/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:53:22 GMT 2019
 */

package com.wrapper.spotify;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.wrapper.spotify.HttpDeleteBody;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpDeleteBody_ESTest extends HttpDeleteBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HttpDeleteBody httpDeleteBody0 = null;
      try {
        httpDeleteBody0 = new HttpDeleteBody((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HttpDeleteBody httpDeleteBody0 = null;
      try {
        httpDeleteBody0 = new HttpDeleteBody(" $8ob");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 0:  $8ob
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URI uRI0 = MockURI.create("org.apache.http.entity.HttpEntityWrapper");
      HttpDeleteBody httpDeleteBody0 = new HttpDeleteBody(uRI0);
      assertEquals("DELETE", httpDeleteBody0.getMethod());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HttpDeleteBody httpDeleteBody0 = new HttpDeleteBody();
      String string0 = httpDeleteBody0.getMethod();
      assertEquals("DELETE", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HttpDeleteBody httpDeleteBody0 = new HttpDeleteBody("");
      assertFalse(httpDeleteBody0.isAborted());
  }
}
