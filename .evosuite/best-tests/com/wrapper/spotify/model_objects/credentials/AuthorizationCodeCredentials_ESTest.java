/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:27:20 GMT 2019
 */

package com.wrapper.spotify.model_objects.credentials;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthorizationCodeCredentials_ESTest extends AuthorizationCodeCredentials_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      authorizationCodeCredentials_JsonUtil0.createModelObject(jsonObject0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setScope("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setRefreshToken("dox4;{3^kI!|}m~{iU");
      assertSame(authorizationCodeCredentials_Builder0, authorizationCodeCredentials_Builder2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setTokenType("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setRefreshToken("");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder2.build();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder3.build();
      authorizationCodeCredentials1.builder();
      authorizationCodeCredentials1.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder3.setTokenType("");
      authorizationCodeCredentials_Builder0.setScope("y3IovqKc6#+VsA");
      authorizationCodeCredentials_Builder1.setScope("");
      authorizationCodeCredentials0.getRefreshToken();
      AuthorizationCodeCredentials authorizationCodeCredentials2 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials_Builder3.setAccessToken("");
      AuthorizationCodeCredentials authorizationCodeCredentials3 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials3.builder();
      authorizationCodeCredentials3.builder();
      Integer integer0 = new Integer(888);
      authorizationCodeCredentials_Builder2.setTokenType("f<Vnf");
      authorizationCodeCredentials_Builder4.setExpiresIn(integer0);
      authorizationCodeCredentials_Builder4.setScope("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials_Builder2.setTokenType("gt2:iqEXEg8'(");
      authorizationCodeCredentials2.getRefreshToken();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder6 = authorizationCodeCredentials0.builder();
      assertNotSame(authorizationCodeCredentials_Builder6, authorizationCodeCredentials_Builder5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setAccessToken("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder0.setTokenType("");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials_Builder0.setRefreshToken("\"yfx[P%V32>'");
      authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials_Builder0.setScope("");
      authorizationCodeCredentials0.builder();
      Integer integer0 = new Integer(0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder0.setRefreshToken("\"yfx[P%V32>'");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder2.setExpiresIn(integer0);
      authorizationCodeCredentials0.getAccessToken();
      authorizationCodeCredentials_Builder4.setRefreshToken("");
      authorizationCodeCredentials_Builder0.setRefreshToken("Qh1GK'z");
      authorizationCodeCredentials0.getScope();
      Integer integer1 = new Integer(11);
      authorizationCodeCredentials_Builder4.setExpiresIn(integer1);
      authorizationCodeCredentials0.getScope();
      authorizationCodeCredentials0.getRefreshToken();
      authorizationCodeCredentials_Builder3.setTokenType("InNt}ZC,m:Sp/h");
      authorizationCodeCredentials_Builder0.setRefreshToken("o|>pzdD lGf&GnF");
      Integer integer2 = new Integer(0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials_Builder1.setExpiresIn(integer2);
      assertSame(authorizationCodeCredentials_Builder5, authorizationCodeCredentials_Builder4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setAccessToken("Q??e");
      Integer integer0 = new Integer((-290));
      authorizationCodeCredentials_Builder1.setAccessToken("Q??e");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setExpiresIn(integer0);
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials_Builder0.setTokenType("Q??e");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder2.setAccessToken("Q??e");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getExpiresIn();
      authorizationCodeCredentials_Builder1.setTokenType((String) null);
      authorizationCodeCredentials0.getExpiresIn();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder3.setScope("Not a JSON Null: ");
      authorizationCodeCredentials0.getScope();
      authorizationCodeCredentials_Builder5.setScope("f");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder6 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getExpiresIn();
      authorizationCodeCredentials0.getTokenType();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder7 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder1.setRefreshToken("Not a JSON Null: ");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder8 = authorizationCodeCredentials_Builder6.setTokenType((String) null);
      authorizationCodeCredentials_Builder8.setTokenType("f");
      authorizationCodeCredentials_Builder4.setAccessToken((String) null);
      authorizationCodeCredentials0.getExpiresIn();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder9 = authorizationCodeCredentials_Builder7.setRefreshToken("");
      authorizationCodeCredentials0.getAccessToken();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder10 = authorizationCodeCredentials_Builder9.setScope((String) null);
      assertSame(authorizationCodeCredentials_Builder7, authorizationCodeCredentials_Builder10);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setScope((String) null);
      authorizationCodeCredentials_Builder1.setTokenType("scope");
      authorizationCodeCredentials_Builder1.setScope((String) null);
      Integer integer0 = new Integer(516);
      authorizationCodeCredentials_Builder1.setExpiresIn(integer0);
      authorizationCodeCredentials_Builder0.setScope((String) null);
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder0.build();
      Integer integer1 = authorizationCodeCredentials0.getExpiresIn();
      assertEquals(516, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_JsonUtil0.createModelObject(jsonObject0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setRefreshToken("com.wrapper.spotify.model_objects.specification.Paging");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setScope("");
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder2.build();
      String string0 = authorizationCodeCredentials1.getScope();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder0.build();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getRefreshToken();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setTokenType((String) null);
      assertSame(authorizationCodeCredentials_Builder0, authorizationCodeCredentials_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setRefreshToken("scope");
      Integer integer0 = new Integer((-134));
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setExpiresIn(integer0);
      authorizationCodeCredentials_Builder1.setAccessToken("scope");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder0.setRefreshToken("scope");
      String string0 = authorizationCodeCredentials0.getRefreshToken();
      assertEquals("scope", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      authorizationCodeCredentials_Builder0.setScope("-nn~(`$Vr<t`");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setTokenType("offset");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setAccessToken("offset");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials_Builder2.setRefreshToken(" uLIuVnI/N2bDS>fpx");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder3.setExpiresIn((Integer) null);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials_Builder4.setScope("scope");
      authorizationCodeCredentials_Builder3.setScope(")N2pjD1.kHH;HYKG|%");
      authorizationCodeCredentials_Builder4.setAccessToken("offset");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder4.build();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getAccessToken();
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder0.build();
      authorizationCodeCredentials0.getScope();
      authorizationCodeCredentials_Builder3.build();
      authorizationCodeCredentials_Builder5.setRefreshToken("");
      authorizationCodeCredentials_Builder3.setTokenType((String) null);
      authorizationCodeCredentials_Builder1.setExpiresIn((Integer) null);
      String string0 = authorizationCodeCredentials1.getTokenType();
      assertEquals("offset", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      Integer integer0 = new Integer(0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setTokenType("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder0.setExpiresIn(integer0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials_Builder2.setAccessToken(":wqr5ZS2Cn''CS^");
      authorizationCodeCredentials_Builder3.setScope(":wqr5ZS2Cn''CS^");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder1.build();
      authorizationCodeCredentials0.getAccessToken();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder3.setAccessToken("\" l{Y~lo+l");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder4.setTokenType("qEF3&h:UY ");
      authorizationCodeCredentials_Builder1.setAccessToken("qEF3&h:UY ");
      authorizationCodeCredentials_Builder0.setExpiresIn(integer0);
      authorizationCodeCredentials0.getAccessToken();
      authorizationCodeCredentials0.getExpiresIn();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder6 = authorizationCodeCredentials_Builder1.setTokenType("\" l{Y~lo+l");
      assertNotSame(authorizationCodeCredentials_Builder6, authorizationCodeCredentials_Builder5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setTokenType("");
      authorizationCodeCredentials_Builder1.build();
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder1.build();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder2.setRefreshToken("eQvwgT");
      Integer integer0 = new Integer(1255);
      authorizationCodeCredentials_Builder2.setExpiresIn(integer0);
      authorizationCodeCredentials0.getTokenType();
      authorizationCodeCredentials_Builder1.setTokenType("a\"A.xTS0*<&Mf+DUy!");
      authorizationCodeCredentials_Builder4.build();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials_Builder3.setAccessToken("Q)G`");
      assertNotSame(authorizationCodeCredentials_Builder5, authorizationCodeCredentials_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder0.build();
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getScope();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setScope((String) null);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getAccessToken();
      authorizationCodeCredentials0.getExpiresIn();
      authorizationCodeCredentials_Builder1.setTokenType((String) null);
      authorizationCodeCredentials_Builder1.setTokenType("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder3.setRefreshToken("");
      assertNotSame(authorizationCodeCredentials_Builder4, authorizationCodeCredentials_Builder2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setScope("R'.0Oj ");
      Integer integer0 = new Integer(3780);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setExpiresIn(integer0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials_Builder0.setTokenType("2G");
      authorizationCodeCredentials_Builder2.setScope("2G");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder2.setTokenType("}s`");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder4.build();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder5 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder5.setTokenType("}s`");
      Integer integer1 = new Integer(0);
      authorizationCodeCredentials_Builder2.setExpiresIn(integer1);
      authorizationCodeCredentials0.getExpiresIn();
      authorizationCodeCredentials_Builder3.setRefreshToken((String) null);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder6 = authorizationCodeCredentials_Builder3.setScope((String) null);
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder6.build();
      assertEquals("}s`", authorizationCodeCredentials1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setScope("expires_in");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setRefreshToken("expires_in");
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder2.build();
      Integer integer0 = authorizationCodeCredentials0.getExpiresIn();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setAccessToken((String) null);
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder1.build();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials0.builder();
      Integer integer0 = new Integer(0);
      authorizationCodeCredentials_Builder1.setExpiresIn(integer0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials_Builder0.setAccessToken((String) null);
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.getRefreshToken();
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials0.getScope();
      authorizationCodeCredentials0.getAccessToken();
      authorizationCodeCredentials1.getExpiresIn();
      authorizationCodeCredentials_Builder3.setScope((String) null);
      String string0 = authorizationCodeCredentials0.getScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        authorizationCodeCredentials_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_Builder0.build();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder1.setAccessToken("");
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder2.build();
      authorizationCodeCredentials0.getExpiresIn();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials1.builder();
      authorizationCodeCredentials1.builder();
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder4 = authorizationCodeCredentials_Builder2.setTokenType("com.google.gson.JsonNull");
      authorizationCodeCredentials_Builder0.build();
      authorizationCodeCredentials_Builder3.build();
      authorizationCodeCredentials_Builder1.setRefreshToken("#9HJ'PNH");
      authorizationCodeCredentials1.getScope();
      authorizationCodeCredentials1.getExpiresIn();
      authorizationCodeCredentials_Builder2.setAccessToken("J&g3]cI");
      authorizationCodeCredentials_Builder4.setRefreshToken("}d)rq-_i");
      authorizationCodeCredentials_Builder2.setRefreshToken("");
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder3.setTokenType("#9HJ'PNH");
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      AuthorizationCodeCredentials authorizationCodeCredentials2 = authorizationCodeCredentials_JsonUtil0.createModelObject(jsonObject0);
      assertNull(authorizationCodeCredentials2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = new AuthorizationCodeCredentials.Builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setRefreshToken("com.google.gson.JsonElement");
      assertSame(authorizationCodeCredentials_Builder0, authorizationCodeCredentials_Builder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AuthorizationCodeCredentials.JsonUtil authorizationCodeCredentials_JsonUtil0 = new AuthorizationCodeCredentials.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      AuthorizationCodeCredentials authorizationCodeCredentials0 = authorizationCodeCredentials_JsonUtil0.createModelObject(jsonObject0);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder0 = authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder1 = authorizationCodeCredentials_Builder0.setRefreshToken("");
      authorizationCodeCredentials0.builder();
      AuthorizationCodeCredentials authorizationCodeCredentials1 = authorizationCodeCredentials_Builder1.build();
      authorizationCodeCredentials1.getAccessToken();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_JsonUtil0.createModelObjectPagingCursorbased(jsonObject1);
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder2 = authorizationCodeCredentials_Builder0.setTokenType("");
      AuthorizationCodeCredentials.Builder authorizationCodeCredentials_Builder3 = authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder3.build();
      authorizationCodeCredentials_Builder2.setScope((String) null);
      authorizationCodeCredentials_Builder2.setAccessToken((String) null);
      authorizationCodeCredentials_JsonUtil0.createModelObject((JsonObject) null);
      authorizationCodeCredentials1.getTokenType();
      Integer integer0 = new Integer(0);
      authorizationCodeCredentials0.builder();
      authorizationCodeCredentials_Builder2.setExpiresIn(integer0);
      // Undeclared exception!
      try { 
        authorizationCodeCredentials_JsonUtil0.createModelObjectArray("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Array: null
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }
}
