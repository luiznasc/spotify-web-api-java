/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:31:59 GMT 2019
 */

package com.wrapper.spotify.model_objects.credentials;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.credentials.ClientCredentials;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientCredentials_ESTest extends ClientCredentials_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      clientCredentials_Builder0.setTokenType("Not a JSON Null: ");
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      String string0 = clientCredentials0.getTokenType();
      assertEquals("Not a JSON Null: ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      Integer integer0 = new Integer(0);
      clientCredentials_Builder0.setExpiresIn(integer0);
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      Integer integer1 = clientCredentials0.getExpiresIn();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      Integer integer0 = new Integer(16);
      clientCredentials_Builder0.setExpiresIn(integer0);
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      Integer integer1 = clientCredentials0.getExpiresIn();
      assertEquals(16, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      Integer integer0 = new Integer((-112));
      ClientCredentials.Builder clientCredentials_Builder1 = clientCredentials_Builder0.setExpiresIn(integer0);
      ClientCredentials clientCredentials0 = clientCredentials_Builder1.build();
      Integer integer1 = clientCredentials0.getExpiresIn();
      assertEquals((-112), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      clientCredentials_Builder0.setAccessToken("a-_uL|'({");
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      String string0 = clientCredentials0.getAccessToken();
      assertEquals("a-_uL|'({", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      clientCredentials_Builder0.setAccessToken("");
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      String string0 = clientCredentials0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClientCredentials.JsonUtil clientCredentials_JsonUtil0 = new ClientCredentials.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("expires_in", "expires_in");
      // Undeclared exception!
      try { 
        clientCredentials_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"expires_in\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClientCredentials.JsonUtil clientCredentials_JsonUtil0 = new ClientCredentials.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("token_type", "token_type");
      ClientCredentials clientCredentials0 = clientCredentials_JsonUtil0.createModelObject(jsonObject0);
      assertNull(clientCredentials0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClientCredentials.JsonUtil clientCredentials_JsonUtil0 = new ClientCredentials.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("access_token", "access_token");
      ClientCredentials clientCredentials0 = clientCredentials_JsonUtil0.createModelObject(jsonObject0);
      assertNull(clientCredentials0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClientCredentials.JsonUtil clientCredentials_JsonUtil0 = new ClientCredentials.JsonUtil();
      ClientCredentials clientCredentials0 = clientCredentials_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(clientCredentials0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      Integer integer0 = clientCredentials0.getExpiresIn();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      String string0 = clientCredentials0.getTokenType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      String string0 = clientCredentials0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClientCredentials.Builder clientCredentials_Builder0 = new ClientCredentials.Builder();
      ClientCredentials clientCredentials0 = clientCredentials_Builder0.build();
      ClientCredentials.Builder clientCredentials_Builder1 = clientCredentials0.builder();
      assertNotSame(clientCredentials_Builder0, clientCredentials_Builder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClientCredentials.JsonUtil clientCredentials_JsonUtil0 = new ClientCredentials.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      ClientCredentials clientCredentials0 = clientCredentials_JsonUtil0.createModelObject(jsonObject0);
      ClientCredentials.Builder clientCredentials_Builder0 = clientCredentials0.builder();
      ClientCredentials.Builder clientCredentials_Builder1 = clientCredentials_Builder0.setTokenType("");
      ClientCredentials clientCredentials1 = clientCredentials_Builder1.build();
      String string0 = clientCredentials1.getTokenType();
      assertEquals("", string0);
  }
}
