/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:52:44 GMT 2019
 */

package com.wrapper.spotify.model_objects.miscellaneous;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.wrapper.spotify.enums.Modality;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisTrack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AudioAnalysisTrack_ESTest extends AudioAnalysisTrack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer(54);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTimeSignature(integer0);
      Long long0 = new Long(54);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisSampleRate(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setWindowSeconds(integer0);
      audioAnalysisTrack_Builder1.setSynchString("cf&Fz~iV{h");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setCodeString((String) null);
      Float float0 = new Float((double) 54);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getSynchVersion();
      audioAnalysisTrack_Builder4.setEndOfFadeIn((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setEchoprintVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder5.setAnalysisChannels(integer0);
      audioAnalysisTrack_Builder6.setRhythmString((String) null);
      Modality modality0 = Modality.MINOR;
      audioAnalysisTrack_Builder3.setMode(modality0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack1.getEchoprintString();
      Integer integer1 = audioAnalysisTrack0.getWindowSeconds();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder7 = audioAnalysisTrack_Builder2.setWindowSeconds(integer1);
      assertSame(audioAnalysisTrack_Builder4, audioAnalysisTrack_Builder7);
      
      audioAnalysisTrack1.getEchoprintVersion();
      Long long1 = audioAnalysisTrack0.getAnalysisSampleRate();
      assertEquals(54L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer((-3074));
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder0.build();
      audioAnalysisTrack0.getTempoConfidence();
      audioAnalysisTrack_Builder0.setTimeSignatureConfidence((Float) null);
      audioAnalysisTrack_Builder0.setAnalysisChannels(integer0);
      Integer integer1 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setOffsetSeconds(integer1);
      Float float0 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setEchoprintVersion(float0);
      Float float1 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmString("total");
      Float.max((-3074), 1.0F);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack1.getTimeSignatureConfidence();
      audioAnalysisTrack1.builder();
      audioAnalysisTrack1.getDuration();
      audioAnalysisTrack1.getSynchVersion();
      audioAnalysisTrack1.getSampleMd5();
      audioAnalysisTrack1.getKeyConfidence();
      Integer integer2 = audioAnalysisTrack1.getAnalysisChannels();
      assertEquals((-3074), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer((-3074));
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder0.build();
      audioAnalysisTrack0.getTempoConfidence();
      audioAnalysisTrack_Builder0.setTimeSignatureConfidence((Float) null);
      audioAnalysisTrack_Builder0.setAnalysisChannels(integer0);
      Integer integer1 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setOffsetSeconds(integer1);
      Float float0 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setEchoprintVersion(float0);
      Float float1 = new Float((double) (-3074));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmString("total");
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack1.getTimeSignatureConfidence();
      audioAnalysisTrack1.builder();
      audioAnalysisTrack1.getDuration();
      audioAnalysisTrack1.getSynchVersion();
      audioAnalysisTrack1.getSampleMd5();
      audioAnalysisTrack1.getKeyConfidence();
      Float float2 = audioAnalysisTrack1.getEchoprintVersion();
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(1408.6062F);
      audioAnalysisTrack_Builder0.setKeyConfidence(float0);
      Integer integer0 = new Integer((-3074));
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder0.build();
      audioAnalysisTrack0.getTempoConfidence();
      audioAnalysisTrack_Builder0.setTimeSignatureConfidence((Float) null);
      audioAnalysisTrack_Builder0.setAnalysisChannels(integer0);
      Integer integer1 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setOffsetSeconds(integer1);
      Float float1 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setEchoprintVersion(float1);
      Float float2 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float2);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmString("total");
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack1.getTimeSignatureConfidence();
      audioAnalysisTrack1.builder();
      audioAnalysisTrack1.getDuration();
      audioAnalysisTrack1.getSynchVersion();
      audioAnalysisTrack1.getSampleMd5();
      audioAnalysisTrack1.getKeyConfidence();
      Float float3 = audioAnalysisTrack0.getModeConfidence();
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = audioAnalysisTrack0.builder();
      Double double0 = new Double(0);
      jsonObject0.addProperty("total", (Number) double0);
      JsonArray jsonArray0 = new JsonArray(0);
      Class<Object> class0 = Object.class;
      audioAnalysisTrack_JsonUtil0.createModelObjectArray(jsonArray0, class0);
      audioAnalysisTrack0.getTempo();
      jsonObject0.remove("key == null");
      Float float0 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setKeyConfidence(float0);
      audioAnalysisTrack_Builder1.setSynchVersion(float0);
      audioAnalysisTrack_JsonUtil0.createModelObjectPagingCursorbased(jsonObject0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack1.builder();
      Integer integer0 = new Integer(4);
      audioAnalysisTrack_Builder1.setAnalysisChannels(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack1.builder();
      audioAnalysisTrack1.getKeyConfidence();
      audioAnalysisTrack1.getTempoConfidence();
      audioAnalysisTrack1.getSampleMd5();
      audioAnalysisTrack1.getModeConfidence();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setKeyConfidence((Float) null);
      assertSame(audioAnalysisTrack_Builder3, audioAnalysisTrack_Builder2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setStartOfFadeOut(float0);
      Float float1 = new Float(0.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setCodeVersion(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setSynchString("windows_seconds");
      Long long0 = new Long((-49L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setAnalysisSampleRate(long0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getCodeString();
      Float float2 = audioAnalysisTrack0.getCodeVersion();
      assertEquals((float)float2, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = Float.valueOf(1.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setModeConfidence(float0);
      Integer integer0 = new Integer(1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisChannels(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeString("uhH=~+5D");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder1.setRhythmString((String) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder3.setTimeSignatureConfidence(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder5.build();
      audioAnalysisTrack_Builder5.setRhythmString("uhH=~+5D");
      audioAnalysisTrack_Builder5.setSampleMd5((String) null);
      audioAnalysisTrack0.getRhythmVersion();
      audioAnalysisTrack_Builder1.setEndOfFadeIn((Float) null);
      Float.sum((-3718.4045F), 1);
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getEndOfFadeIn();
      audioAnalysisTrack0.getMode();
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder1.build();
      Float float1 = new Float(1257.3235F);
      Float.min(1257.3235F, 686.4717F);
      audioAnalysisTrack_Builder3.setEndOfFadeIn(float1);
      audioAnalysisTrack_Builder1.setKey(integer0);
      audioAnalysisTrack0.getOffsetSeconds();
      Integer integer1 = Integer.getInteger((String) null, (-377));
      audioAnalysisTrack_Builder4.setAnalysisChannels(integer1);
      audioAnalysisTrack0.getCodeString();
      audioAnalysisTrack1.getStartOfFadeOut();
      audioAnalysisTrack0.getWindowSeconds();
      audioAnalysisTrack1.getTempoConfidence();
      audioAnalysisTrack1.getTempoConfidence();
      Float float2 = audioAnalysisTrack1.getTimeSignatureConfidence();
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0);
      Float.isFinite(0.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setLoudness(float0);
      Float float1 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setTempo(float1);
      Float.min(1.0F, (-1503.7489F));
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder2.build();
      audioAnalysisTrack0.getTimeSignature();
      audioAnalysisTrack0.getEchoprintVersion();
      audioAnalysisTrack0.getSampleMd5();
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getModeConfidence();
      audioAnalysisTrack0.getEchoprintString();
      audioAnalysisTrack0.getAnalysisSampleRate();
      audioAnalysisTrack0.getLoudness();
      audioAnalysisTrack0.getKey();
      audioAnalysisTrack0.getTempo();
      Float float2 = audioAnalysisTrack0.getLoudness();
      assertEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer(54);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTimeSignature(integer0);
      Long long0 = new Long(54);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisSampleRate(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setWindowSeconds(integer0);
      Float float0 = new Float(0.0F);
      audioAnalysisTrack_Builder0.setSynchVersion(float0);
      audioAnalysisTrack_Builder1.setSynchString("cf&Fz~iV{h");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setCodeString((String) null);
      Float float1 = new Float((double) 54);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getSynchVersion();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setEchoprintVersion(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder5.setAnalysisChannels(integer0);
      audioAnalysisTrack_Builder6.setRhythmString((String) null);
      Modality modality0 = Modality.MINOR;
      audioAnalysisTrack_Builder3.setMode(modality0);
      audioAnalysisTrack0.getEchoprintString();
      Integer integer1 = audioAnalysisTrack0.getWindowSeconds();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder7 = audioAnalysisTrack_Builder2.setWindowSeconds(integer1);
      assertSame(audioAnalysisTrack_Builder4, audioAnalysisTrack_Builder7);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(3179.72714836001);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTempo(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setRhythmVersion(float0);
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack0.getKeyConfidence();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion((Float) null);
      audioAnalysisTrack_Builder0.build();
      Integer integer0 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setDuration(float0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack1.getTimeSignatureConfidence();
      Float float1 = new Float(0.0F);
      audioAnalysisTrack_Builder2.setEndOfFadeIn(float1);
      audioAnalysisTrack_Builder2.setTempoConfidence(float0);
      audioAnalysisTrack0.builder();
      Modality modality0 = Modality.MINOR;
      audioAnalysisTrack_Builder2.setMode(modality0);
      Modality modality1 = Modality.MINOR;
      audioAnalysisTrack_Builder0.setMode(modality1);
      Float float2 = audioAnalysisTrack1.getTempo();
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setRhythmString("loudness");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setSampleMd5("loudness");
      Integer integer0 = new Integer((-916));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setAnalysisChannels(integer0);
      Float float0 = new Float((double) (-916));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setTimeSignatureConfidence(float0);
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      audioAnalysisTrack_Builder1.setCodeVersion(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject1);
      audioAnalysisTrack0.getTempoConfidence();
      Float.min((-3324.13F), (-916));
      audioAnalysisTrack_Builder2.setCodeVersion((Float) null);
      audioAnalysisTrack_Builder3.setTempo(float0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack1.getAnalysisChannels();
      audioAnalysisTrack0.getStartOfFadeOut();
      audioAnalysisTrack0.getTempo();
      audioAnalysisTrack1.getLoudness();
      audioAnalysisTrack0.getKey();
      audioAnalysisTrack1.getTempo();
      String string0 = audioAnalysisTrack0.getEchoprintString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = audioAnalysisTrack0.builder();
      Long long0 = new Long((-3501L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setAnalysisSampleRate(long0);
      Integer integer0 = new Integer((-1508));
      audioAnalysisTrack_Builder0.setWindowSeconds(integer0);
      Float float0 = new Float((-3133.1147F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setStartOfFadeOut(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float0);
      Float float1 = new Float((float) (-3501L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder2.setCodeVersion(float1);
      Float.min(0.0F, (-3501L));
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder3.build();
      Float float2 = new Float((-3501.0F));
      audioAnalysisTrack_Builder2.setEchoprintVersion(float2);
      audioAnalysisTrack_Builder2.setEchoprintString("");
      audioAnalysisTrack1.getNumSamples();
      audioAnalysisTrack_Builder2.setTimeSignatureConfidence(float0);
      audioAnalysisTrack_Builder1.setOffsetSeconds((Integer) null);
      audioAnalysisTrack_Builder1.setLoudness(float0);
      audioAnalysisTrack_Builder3.setAnalysisChannels((Integer) null);
      audioAnalysisTrack1.getWindowSeconds();
      audioAnalysisTrack_Builder4.setLoudness(float0);
      String string0 = audioAnalysisTrack0.getEchoprintString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Long long0 = new Long((-1L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setAnalysisSampleRate(long0);
      audioAnalysisTrack_Builder1.setNumSamples(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setSynchString("XQM\"m");
      Float float0 = new Float((double) (-1L));
      Float.max(0.0F, 0.0F);
      audioAnalysisTrack_Builder2.setSampleMd5("tempo_confidence");
      Float.min((-1L), 0.0F);
      audioAnalysisTrack_Builder2.setModeConfidence(float0);
      audioAnalysisTrack_Builder2.setAnalysisSampleRate(long0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder2.build();
      audioAnalysisTrack0.getModeConfidence();
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getEchoprintVersion();
      audioAnalysisTrack0.getTempo();
      Integer integer0 = audioAnalysisTrack0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer(3107);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTimeSignature(integer0);
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getLoudness();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setCodeVersion((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setSampleMd5("tempo");
      Integer integer1 = new Integer(3107);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setKey(integer1);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      Long long0 = audioAnalysisTrack1.getNumSamples();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Modality modality0 = Modality.MAJOR;
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setMode(modality0);
      Integer integer0 = Integer.valueOf(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setOffsetSeconds(integer0);
      audioAnalysisTrack_Builder2.setWindowSeconds(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setEchoprintString("code_string");
      Float float0 = new Float(223.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setCodeVersion(float0);
      Integer integer1 = Integer.getInteger("com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisTrack$JsonUtil", integer0);
      audioAnalysisTrack_Builder4.setWindowSeconds(integer1);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getSampleMd5();
      audioAnalysisTrack0.getEchoprintString();
      Float float1 = audioAnalysisTrack0.getTempoConfidence();
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setSynchString("rhythmstring");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setEchoprintString("");
      Float float0 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setEchoprintVersion(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getSynchString();
      audioAnalysisTrack0.getStartOfFadeOut();
      Long long0 = audioAnalysisTrack0.getNumSamples();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Long long0 = new Long(1L);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setAnalysisSampleRate(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setRhythmString("p7h:P6ERBj(;N");
      Float float0 = new Float((-1.0F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setRhythmVersion(float0);
      Float float1 = new Float(1644.039631);
      audioAnalysisTrack_Builder0.setSynchVersion(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setStartOfFadeOut(float0);
      Float float2 = new Float(311.04154251865);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setRhythmVersion(float2);
      audioAnalysisTrack_Builder4.setCodeString("");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder4.setTimeSignatureConfidence((Float) null);
      audioAnalysisTrack_Builder4.setLoudness(float0);
      Integer integer0 = new Integer(672);
      audioAnalysisTrack_Builder6.setAnalysisChannels(integer0);
      audioAnalysisTrack_Builder6.setLoudness(float0);
      audioAnalysisTrack_Builder5.setCodeVersion(float2);
      audioAnalysisTrack_Builder2.setDuration(float2);
      audioAnalysisTrack_Builder0.setEchoprintVersion(float1);
      Integer integer1 = Integer.getInteger("com.wrapper.spotify.model_objects.specification.PagingCursorbased$Builder", integer0);
      audioAnalysisTrack_Builder0.setAnalysisChannels(integer1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder7 = audioAnalysisTrack_Builder2.setRhythmString("");
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder7.build();
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getCodeVersion();
      audioAnalysisTrack0.getRhythmVersion();
      Float float3 = audioAnalysisTrack0.getSynchVersion();
      assertNotEquals((float)float3, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setKey(integer0);
      Long long0 = new Long(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setNumSamples(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeString("QH8!*@N_,a|");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setSampleMd5("2Q2|1>,!");
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getWindowSeconds();
      audioAnalysisTrack0.getNumSamples();
      Float float0 = new Float((double) 0);
      audioAnalysisTrack_Builder1.setDuration(float0);
      String string0 = audioAnalysisTrack0.getSampleMd5();
      assertEquals("2Q2|1>,!", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float((-1.0));
      Float.min((-17.9034F), (-17.9034F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTempo(float0);
      Float float1 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setKeyConfidence(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setLoudness(float1);
      Float float2 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setEndOfFadeIn(float2);
      Modality modality0 = Modality.MAJOR;
      Float.sum(0.0F, 0.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setMode(modality0);
      audioAnalysisTrack_Builder5.setTempo(float1);
      Float float3 = new Float((-1.0));
      Float.isFinite(1776.4847F);
      audioAnalysisTrack_Builder2.setDuration(float3);
      Integer integer0 = new Integer(4258);
      Float.isFinite(0.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder5.setOffsetSeconds(integer0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack0.getModeConfidence();
      audioAnalysisTrack0.getTempoConfidence();
      audioAnalysisTrack0.getDuration();
      audioAnalysisTrack_Builder6.setDuration(float1);
      Integer integer1 = audioAnalysisTrack0.getOffsetSeconds();
      assertEquals(4258, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(2035);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTimeSignature(integer1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder0.setEndOfFadeIn(float0);
      Integer integer2 = Integer.getInteger("Lr y=>*-?$:jl(r", (-4134));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setWindowSeconds(integer2);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setTempoConfidence(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder3.build();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setDuration(float0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder5.build();
      Integer integer3 = new Integer((-4134));
      Integer.getInteger("8", integer3);
      audioAnalysisTrack1.getModeConfidence();
      Float float1 = new Float(0.0F);
      audioAnalysisTrack_Builder5.setTimeSignatureConfidence(float1);
      audioAnalysisTrack0.getEndOfFadeIn();
      audioAnalysisTrack_Builder5.setSynchString("\"tt}ok>z[XpFQGEu[WK");
      audioAnalysisTrack0.getRhythmString();
      audioAnalysisTrack1.getTimeSignatureConfidence();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder1.setOffsetSeconds(integer0);
      assertSame(audioAnalysisTrack_Builder1, audioAnalysisTrack_Builder6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setEchoprintVersion((Float) null);
      Modality modality0 = Modality.MINOR;
      Long long0 = new Long((-2525L));
      audioAnalysisTrack_Builder1.setNumSamples(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setMode(modality0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setSampleMd5("");
      audioAnalysisTrack_Builder0.setSynchString("");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setAnalysisChannels((Integer) null);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getTempoConfidence();
      Long long1 = audioAnalysisTrack0.getNumSamples();
      assertEquals((-2525L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      jsonObject1.getAsJsonObject("com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisTrack$1");
      audioAnalysisTrack_JsonUtil0.createModelObject((JsonObject) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      try { 
        Long.decode("echoprintstring");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"echoprintstring\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getOffsetSeconds();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setKey((Integer) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setRhythmString(":q8;");
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder2.build();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack1.builder();
      Long long0 = new Long(2451L);
      audioAnalysisTrack_Builder3.setNumSamples(long0);
      Float float0 = new Float(1.0);
      float float1 = 1366.4158F;
      Float.max(1366.4158F, 1366.4158F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setTempoConfidence(float0);
      jsonObject0.toString();
      String string0 = "";
      audioAnalysisTrack_Builder4.setEchoprintString("");
      audioAnalysisTrack_Builder4.setWindowSeconds((Integer) null);
      audioAnalysisTrack1.getRhythmString();
      audioAnalysisTrack0.getAnalysisChannels();
      audioAnalysisTrack1.getDuration();
      int int0 = 1704;
      // Undeclared exception!
      try { 
        jsonObject0.getAsNumber();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(1.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setEndOfFadeIn(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setModeConfidence(float0);
      Float.isFinite(1664.9219F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setTimeSignatureConfidence(float0);
      Long long0 = new Long(0L);
      Float float1 = new Float((double) 1664.9219F);
      audioAnalysisTrack_Builder1.setTimeSignatureConfidence(float1);
      Long long1 = new Long(0L);
      Long.getLong("_lS<W ", (-1300L));
      Long.getLong("mf(}IH", long1);
      audioAnalysisTrack_Builder2.setSampleMd5("");
      audioAnalysisTrack_Builder2.setAnalysisSampleRate(long0);
      audioAnalysisTrack_Builder1.setNumSamples((Long) null);
      Integer integer0 = new Integer((-1445));
      Integer.toUnsignedString((-1445));
      audioAnalysisTrack_Builder0.setSynchString("j$e2");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setKey(integer0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      Integer integer1 = new Integer(0);
      audioAnalysisTrack_Builder2.setOffsetSeconds(integer1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getAnalysisSampleRate();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder1.setSynchString("j$e2");
      assertFalse(audioAnalysisTrack_Builder6.equals((Object)audioAnalysisTrack_Builder5));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float((-374.019F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setEndOfFadeIn(float0);
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getCodeVersion();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setStartOfFadeOut((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setRhythmVersion((Float) null);
      Integer integer0 = new Integer((-1456));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setOffsetSeconds(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setRhythmString("previous");
      audioAnalysisTrack0.getAnalysisChannels();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder5.setKey((Integer) null);
      assertSame(audioAnalysisTrack_Builder5, audioAnalysisTrack_Builder6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Long long0 = new Long((-1L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setNumSamples(long0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack0.getStartOfFadeOut();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setTimeSignatureConfidence((Float) null);
      Integer integer0 = new Integer((-1009));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setKey(integer0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder3.build();
      assertNull(audioAnalysisTrack1.getWindowSeconds());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = audioAnalysisTrack0.builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setEndOfFadeIn((Float) null);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder1.build();
      String string0 = audioAnalysisTrack1.getCodeString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonArray jsonArray0 = new JsonArray(0);
      JsonArray jsonArray1 = jsonArray0.deepCopy();
      Class<Object> class0 = Object.class;
      audioAnalysisTrack_JsonUtil0.createModelObjectArray(jsonArray1, class0);
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      JsonObject jsonObject2 = jsonObject1.deepCopy();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject2);
      Float float0 = audioAnalysisTrack0.getKeyConfidence();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Modality modality0 = Modality.MINOR;
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setMode(modality0);
      Float float0 = new Float(1288.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setRhythmVersion(float0);
      Float float1 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float1);
      Integer integer0 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setKey(integer0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      Float float2 = audioAnalysisTrack0.getTimeSignatureConfidence();
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setStartOfFadeOut(float0);
      audioAnalysisTrack_Builder1.setSynchString("");
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack0.builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getEndOfFadeIn();
      audioAnalysisTrack0.getRhythmString();
      Float float1 = new Float((-864.363063316));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setStartOfFadeOut(float1);
      assertNotSame(audioAnalysisTrack_Builder0, audioAnalysisTrack_Builder3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer((-2842));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTimeSignature(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setCodeString((String) null);
      Float float0 = new Float((double) (-2842));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setRhythmVersion(float0);
      Long long0 = new Long((-2842));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setNumSamples(long0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      Integer integer1 = audioAnalysisTrack0.getKey();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      String string0 = audioAnalysisTrack0.getEchoprintString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setSampleMd5("");
      Float float0 = new Float((-96.5116F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setEndOfFadeIn(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setEchoprintVersion(float0);
      Float float1 = new Float((-96.5116F));
      audioAnalysisTrack_Builder2.setStartOfFadeOut(float1);
      Long long0 = new Long(0L);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setNumSamples(long0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getSynchString();
      Long long1 = audioAnalysisTrack0.getNumSamples();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setEchoprintVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setRhythmString("previous");
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder2.build();
      audioAnalysisTrack0.getTimeSignature();
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      JsonObject jsonObject2 = jsonObject1.deepCopy();
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject2);
      assertNull(audioAnalysisTrack1.getTimeSignature());
      assertNull(audioAnalysisTrack1.getWindowSeconds());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setEchoprintString("9.Y2~");
      Long long0 = new Long((-4372L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setNumSamples(long0);
      assertSame(audioAnalysisTrack_Builder1, audioAnalysisTrack_Builder2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = audioAnalysisTrack0.builder();
      Float float0 = new Float(2190.629F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTempo(float0);
      Integer integer0 = new Integer((-498));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setWindowSeconds(integer0);
      assertSame(audioAnalysisTrack_Builder1, audioAnalysisTrack_Builder2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(3515.399);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTempoConfidence(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setLoudness(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setEndOfFadeIn(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmVersion(float0);
      audioAnalysisTrack_Builder3.setRhythmVersion(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getModeConfidence();
      Integer integer0 = audioAnalysisTrack0.getAnalysisChannels();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setOffsetSeconds((Integer) null);
      Integer integer0 = Integer.valueOf((-2027));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisChannels(integer0);
      Float float0 = new Float((float) (-2027));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setSynchVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setTempo(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      String string0 = audioAnalysisTrack0.getEchoprintString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      audioAnalysisTrack_JsonUtil0.createModelObject((String) null);
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.builder();
      Float float0 = audioAnalysisTrack0.getCodeVersion();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setModeConfidence((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setSampleMd5("?#6^grY");
      Integer integer0 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setTimeSignature(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setTempoConfidence((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setEchoprintVersion((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder5.setAnalysisChannels(integer0);
      assertSame(audioAnalysisTrack_Builder6, audioAnalysisTrack_Builder4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setSynchVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setCodeString(" is not Comparable");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setEchoprintVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setKeyConfidence(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setTempoConfidence(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder5.build();
      assertNull(audioAnalysisTrack0.getCodeVersion());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float(0.0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setStartOfFadeOut(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setLoudness(float0);
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getTimeSignatureConfidence();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setKeyConfidence((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setTimeSignatureConfidence((Float) null);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      Float float1 = audioAnalysisTrack1.getLoudness();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = new Float((-1.0F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setModeConfidence(float0);
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getAnalysisSampleRate();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisSampleRate((Long) null);
      Long.getLong("com.wrapper.spotify.model_objects.specification.PagingCursorbased");
      audioAnalysisTrack0.getTempo();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setRhythmVersion((Float) null);
      Float float1 = new Float((-58.69F));
      audioAnalysisTrack_Builder2.setSynchVersion(float1);
      JsonArray jsonArray0 = new JsonArray();
      JsonArray jsonArray1 = jsonArray0.deepCopy();
      audioAnalysisTrack_JsonUtil0.createModelObjectArray(jsonArray1);
      Integer integer0 = new Integer(0);
      audioAnalysisTrack_Builder1.setRhythmString("com.wrapper.spotify.model_objects.specification.PagingCursorbased");
      audioAnalysisTrack_Builder3.setKey(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmString("7");
      Long.remainderUnsigned(1830L, 1830L);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack_Builder4.setOffsetSeconds((Integer) null);
      audioAnalysisTrack1.getCodeString();
      audioAnalysisTrack0.getDuration();
      audioAnalysisTrack1.getCodeVersion();
      Integer integer1 = audioAnalysisTrack0.getOffsetSeconds();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Float float0 = Float.valueOf(1.0F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setModeConfidence(float0);
      Long long0 = new Long((-54L));
      audioAnalysisTrack_Builder1.setNumSamples(long0);
      Integer integer0 = new Integer(1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisChannels(integer0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeString("uhH=~+5D");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder1.setRhythmString((String) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder3.setTimeSignatureConfidence(float0);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder5.build();
      audioAnalysisTrack_Builder5.setRhythmString("uhH=~+5D");
      audioAnalysisTrack_Builder5.setSampleMd5((String) null);
      audioAnalysisTrack0.getRhythmVersion();
      audioAnalysisTrack_Builder1.setEndOfFadeIn((Float) null);
      Float.sum((-3718.4045F), 1);
      audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getEndOfFadeIn();
      audioAnalysisTrack0.getMode();
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder1.build();
      Float float1 = new Float(1257.3235F);
      Float.min(1257.3235F, 686.4717F);
      audioAnalysisTrack_Builder3.setEndOfFadeIn(float1);
      audioAnalysisTrack_Builder1.setKey(integer0);
      audioAnalysisTrack0.getOffsetSeconds();
      Integer integer1 = Integer.getInteger((String) null, (-377));
      audioAnalysisTrack_Builder4.setAnalysisChannels(integer1);
      audioAnalysisTrack0.getCodeString();
      audioAnalysisTrack1.getStartOfFadeOut();
      Integer integer2 = audioAnalysisTrack0.getWindowSeconds();
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Modality modality0 = Modality.MAJOR;
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setMode(modality0);
      Float float0 = new Float((-1029.7457F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setLoudness(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setKeyConfidence((Float) null);
      Float float1 = new Float((double) (-1029.7457F));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmVersion(float1);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      String string0 = audioAnalysisTrack0.getSynchString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer((-3074));
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder0.build();
      audioAnalysisTrack0.getTempoConfidence();
      audioAnalysisTrack_Builder0.setTimeSignatureConfidence((Float) null);
      audioAnalysisTrack_Builder0.setAnalysisChannels(integer0);
      Integer integer1 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setOffsetSeconds(integer1);
      Float float0 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setEchoprintVersion(float0);
      Float float1 = new Float((double) 0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setCodeVersion(float1);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmString("total");
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack1.getTimeSignatureConfidence();
      audioAnalysisTrack1.builder();
      audioAnalysisTrack1.getDuration();
      audioAnalysisTrack1.getSynchVersion();
      audioAnalysisTrack1.getSampleMd5();
      Float float2 = audioAnalysisTrack1.getKeyConfidence();
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getEchoprintVersion();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setKeyConfidence((Float) null);
      audioAnalysisTrack0.getAnalysisSampleRate();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisSampleRate((Long) null);
      Modality modality0 = Modality.MINOR;
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setMode(modality0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setRhythmVersion((Float) null);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder4.build();
      Long long0 = audioAnalysisTrack1.getNumSamples();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      Integer integer0 = new Integer(54);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setTimeSignature(integer0);
      Long long0 = new Long(54);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setAnalysisSampleRate(long0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setWindowSeconds(integer0);
      audioAnalysisTrack_Builder1.setSynchString("cf&Fz~iV{h");
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setCodeString((String) null);
      audioAnalysisTrack_Builder3.setSampleMd5((String) null);
      Float float0 = new Float((double) 54);
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder4.build();
      audioAnalysisTrack0.getSynchVersion();
      Float.min(54, 0.0F);
      audioAnalysisTrack_Builder4.setEndOfFadeIn((Float) null);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setEchoprintVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder6 = audioAnalysisTrack_Builder5.setAnalysisChannels(integer0);
      audioAnalysisTrack_Builder6.setRhythmString((String) null);
      Modality modality0 = Modality.MINOR;
      audioAnalysisTrack_Builder3.setMode(modality0);
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysisTrack_Builder1.build();
      audioAnalysisTrack1.getEchoprintString();
      Integer integer1 = audioAnalysisTrack0.getWindowSeconds();
      audioAnalysisTrack_Builder2.setWindowSeconds(integer1);
      audioAnalysisTrack0.getLoudness();
      Integer integer2 = audioAnalysisTrack1.getKey();
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_Builder0.build();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getEndOfFadeIn();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setModeConfidence((Float) null);
      audioAnalysisTrack0.getModeConfidence();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setRhythmVersion((Float) null);
      Long long0 = new Long((-2018L));
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setNumSamples(long0);
      Integer integer0 = new Integer(0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setAnalysisChannels(integer0);
      assertSame(audioAnalysisTrack_Builder5, audioAnalysisTrack_Builder3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = new AudioAnalysisTrack.Builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack_Builder0.setSynchString("offset");
      Float float0 = new Float(5940.1523F);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder2 = audioAnalysisTrack_Builder1.setKeyConfidence(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder3 = audioAnalysisTrack_Builder2.setEchoprintVersion(float0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder4 = audioAnalysisTrack_Builder3.setSampleMd5("@|<{oaRS ");
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      audioAnalysisTrack0.getTempo();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder5 = audioAnalysisTrack_Builder4.setDuration((Float) null);
      assertSame(audioAnalysisTrack_Builder5, audioAnalysisTrack_Builder4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder0 = audioAnalysisTrack0.builder();
      Float float0 = new Float(3666.756F);
      audioAnalysisTrack_Builder0.setEndOfFadeIn(float0);
      jsonObject0.equals(audioAnalysisTrack_Builder0);
      audioAnalysisTrack0.builder();
      AudioAnalysisTrack.Builder audioAnalysisTrack_Builder1 = audioAnalysisTrack0.builder();
      audioAnalysisTrack0.getTimeSignature();
      audioAnalysisTrack0.getCodeString();
      Integer.compare((-1632), (-1632));
      float float1 = (-2216.0F);
      Float float2 = new Float((-2216.0F));
      Float.max((-2216.0F), 2043.5322F);
      audioAnalysisTrack_Builder1.setStartOfFadeOut(float2);
      jsonObject0.getAsJsonPrimitive(")kulm9g+h` 9/wW*v1t");
      audioAnalysisTrack_Builder1.setDuration(float2);
      audioAnalysisTrack0.getTempoConfidence();
      audioAnalysisTrack_Builder0.setCodeString(")kulm9g+h` 9/wW*v1t");
      audioAnalysisTrack0.getDuration();
      Integer integer0 = new Integer(1821);
      try { 
        Integer.parseUnsignedInt("com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisTrack$JsonUtil", 1821);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1821 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }
}
