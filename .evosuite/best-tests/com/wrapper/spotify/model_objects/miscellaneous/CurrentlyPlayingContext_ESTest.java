/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:16:39 GMT 2019
 */

package com.wrapper.spotify.model_objects.miscellaneous;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.miscellaneous.CurrentlyPlayingContext;
import com.wrapper.spotify.model_objects.miscellaneous.Device;
import com.wrapper.spotify.model_objects.specification.Context;
import com.wrapper.spotify.model_objects.specification.Track;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CurrentlyPlayingContext_ESTest extends CurrentlyPlayingContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setItem((Track) null);
      assertSame(currentlyPlayingContext_Builder1, currentlyPlayingContext_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setDevice((Device) null);
      assertSame(currentlyPlayingContext_Builder1, currentlyPlayingContext_Builder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setContext((Context) null);
      assertSame(currentlyPlayingContext_Builder0, currentlyPlayingContext_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Long long0 = new Long((-2520L));
      currentlyPlayingContext_Builder0.setTimestamp(long0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Long long1 = currentlyPlayingContext0.getTimestamp();
      assertEquals((-2520L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CurrentlyPlayingContext.JsonUtil currentlyPlayingContext_JsonUtil0 = new CurrentlyPlayingContext.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_JsonUtil0.createModelObject(jsonObject0);
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = currentlyPlayingContext0.builder();
      Long long0 = new Long(0L);
      currentlyPlayingContext_Builder0.setTimestamp(long0);
      CurrentlyPlayingContext currentlyPlayingContext1 = currentlyPlayingContext_Builder0.build();
      Long long1 = currentlyPlayingContext1.getTimestamp();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Long long0 = new Long(2818L);
      currentlyPlayingContext_Builder0.setTimestamp(long0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Long long1 = currentlyPlayingContext0.getTimestamp();
      assertEquals(2818L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Boolean boolean0 = Boolean.TRUE;
      currentlyPlayingContext_Builder0.setShuffle_state(boolean0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Boolean boolean1 = currentlyPlayingContext0.getShuffle_state();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CurrentlyPlayingContext.JsonUtil currentlyPlayingContext_JsonUtil0 = new CurrentlyPlayingContext.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_JsonUtil0.createModelObject(jsonObject0);
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = currentlyPlayingContext0.builder();
      Boolean boolean0 = Boolean.FALSE;
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setShuffle_state(boolean0);
      CurrentlyPlayingContext currentlyPlayingContext1 = currentlyPlayingContext_Builder1.build();
      Boolean boolean1 = currentlyPlayingContext1.getShuffle_state();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      currentlyPlayingContext_Builder0.setRepeat_state(">ah/Xv");
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      String string0 = currentlyPlayingContext0.getRepeat_state();
      assertEquals(">ah/Xv", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CurrentlyPlayingContext.JsonUtil currentlyPlayingContext_JsonUtil0 = new CurrentlyPlayingContext.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_JsonUtil0.createModelObject(jsonObject0);
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = currentlyPlayingContext0.builder();
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setRepeat_state("");
      CurrentlyPlayingContext currentlyPlayingContext1 = currentlyPlayingContext_Builder1.build();
      String string0 = currentlyPlayingContext1.getRepeat_state();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Integer integer0 = new Integer((-1024));
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setProgress_ms(integer0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder1.build();
      Integer integer1 = currentlyPlayingContext0.getProgress_ms();
      assertEquals((-1024), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Integer integer0 = new Integer(1);
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setProgress_ms(integer0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder1.build();
      Integer integer1 = currentlyPlayingContext0.getProgress_ms();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Integer integer0 = new Integer((-312));
      currentlyPlayingContext_Builder0.setProgress_ms(integer0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Integer integer1 = currentlyPlayingContext0.getProgress_ms();
      assertEquals((-312), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Boolean boolean0 = Boolean.valueOf(true);
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setIs_playing(boolean0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder1.build();
      Boolean boolean1 = currentlyPlayingContext0.getIs_playing();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      Boolean boolean0 = new Boolean(false);
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder1 = currentlyPlayingContext_Builder0.setIs_playing(boolean0);
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder1.build();
      Boolean boolean1 = currentlyPlayingContext0.getIs_playing();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CurrentlyPlayingContext.JsonUtil currentlyPlayingContext_JsonUtil0 = new CurrentlyPlayingContext.JsonUtil();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(currentlyPlayingContext0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      String string0 = currentlyPlayingContext0.getRepeat_state();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Device device0 = currentlyPlayingContext0.getDevice();
      assertNull(device0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Integer integer0 = currentlyPlayingContext0.getProgress_ms();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CurrentlyPlayingContext.JsonUtil currentlyPlayingContext_JsonUtil0 = new CurrentlyPlayingContext.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_JsonUtil0.createModelObject(jsonObject0);
      Long long0 = currentlyPlayingContext0.getTimestamp();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Track track0 = currentlyPlayingContext0.getItem();
      assertNull(track0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Boolean boolean0 = currentlyPlayingContext0.getIs_playing();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CurrentlyPlayingContext.Builder currentlyPlayingContext_Builder0 = new CurrentlyPlayingContext.Builder();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_Builder0.build();
      Boolean boolean0 = currentlyPlayingContext0.getShuffle_state();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CurrentlyPlayingContext.JsonUtil currentlyPlayingContext_JsonUtil0 = new CurrentlyPlayingContext.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      CurrentlyPlayingContext currentlyPlayingContext0 = currentlyPlayingContext_JsonUtil0.createModelObject(jsonObject0);
      Context context0 = currentlyPlayingContext0.getContext();
      assertNull(context0);
  }
}
