/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:14:17 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonObject;
import com.neovisionaries.i18n.CountryCode;
import com.wrapper.spotify.enums.AlbumType;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.enums.ReleaseDatePrecision;
import com.wrapper.spotify.model_objects.specification.Album;
import com.wrapper.spotify.model_objects.specification.ArtistSimplified;
import com.wrapper.spotify.model_objects.specification.Copyright;
import com.wrapper.spotify.model_objects.specification.ExternalId;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import com.wrapper.spotify.model_objects.specification.Image;
import com.wrapper.spotify.model_objects.specification.Paging;
import com.wrapper.spotify.model_objects.specification.TrackSimplified;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Album_ESTest extends Album_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setHref("*T5go7':BlFZ|!2");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album album0 = album_Builder2.build();
      Album.Builder album_Builder3 = album0.builder();
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      album_Builder1.setImages(imageArray0);
      AlbumType albumType0 = AlbumType.COMPILATION;
      album_Builder0.setAlbumType(albumType0);
      album_Builder2.setHref("*T5go7':BlFZ|!2");
      album0.builder();
      album_Builder2.setLabel("Algeria");
      album0.getHref();
      Album.Builder album_Builder4 = album_Builder2.setReleaseDate("*T5go7':BlFZ|!2");
      Album album1 = album_Builder4.build();
      Copyright[] copyrightArray0 = new Copyright[5];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      copyrightArray0[3] = copyright0;
      copyrightArray0[4] = copyright0;
      album_Builder0.setCopyrights(copyrightArray0);
      album0.getLabel();
      album1.getImages();
      album1.getReleaseDate();
      Album.Builder album_Builder5 = album1.builder();
      assertFalse(album_Builder5.equals((Object)album_Builder3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setLabel("");
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[1];
      ArtistSimplified artistSimplified0 = mock(ArtistSimplified.class, new ViolatedAssumptionAnswer());
      artistSimplifiedArray0[0] = artistSimplified0;
      Album.Builder album_Builder2 = album_Builder1.setArtists(artistSimplifiedArray0);
      Copyright[] copyrightArray0 = new Copyright[7];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      album_Builder2.setCopyrights(copyrightArray0);
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      copyrightArray0[3] = copyright0;
      album_Builder1.setArtists(artistSimplifiedArray0);
      copyrightArray0[4] = copyright0;
      copyrightArray0[5] = copyright0;
      copyrightArray0[6] = copyright0;
      Album.Builder album_Builder3 = album_Builder2.setCopyrights(copyrightArray0);
      Album.Builder album_Builder4 = album_Builder3.setId("");
      Album album0 = album_Builder4.build();
      album0.builder();
      album0.builder();
      album0.getReleaseDate();
      album0.builder();
      album0.builder();
      album0.getArtists();
      album0.getCopyrights();
      album0.getArtists();
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      album_JsonUtil0.createModelObject((JsonObject) null);
      Album album1 = album_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(album1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setReleaseDate("\"p3Rt=4G3");
      Album.Builder album_Builder2 = album_Builder1.setHref("");
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.DAY;
      album_Builder1.setReleaseDatePrecision(releaseDatePrecision0);
      ReleaseDatePrecision releaseDatePrecision1 = ReleaseDatePrecision.MONTH;
      Album.Builder album_Builder3 = album_Builder2.setReleaseDatePrecision(releaseDatePrecision1);
      Album.Builder album_Builder4 = album_Builder3.setLabel("");
      Album album0 = album_Builder4.build();
      album0.builder();
      album0.builder();
      album0.builder();
      Image[] imageArray0 = new Image[7];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      album0.builder();
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      album_Builder3.setImages(imageArray0);
      Integer integer0 = new Integer((-522));
      album_Builder4.setPopularity(integer0);
      album0.getLabel();
      String string0 = album0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Integer integer0 = new Integer(768);
      album_Builder0.setPopularity(integer0);
      album_Builder0.setUri("");
      jsonObject0.deepCopy();
      Album album0 = album_Builder0.build();
      album0.getPopularity();
      Integer integer1 = new Integer((-1405));
      jsonObject0.equals(integer1);
      // Undeclared exception!
      try { 
        album_JsonUtil0.createModelObjectPaging("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: null
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      album_Builder0.setLabel("u*O^@O/||");
      AlbumType albumType0 = AlbumType.ALBUM;
      album_Builder0.setLabel("u*O^@O/||");
      Album.Builder album_Builder1 = album_Builder0.setAlbumType(albumType0);
      album_Builder1.setReleaseDate("href");
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.YEAR;
      album_Builder0.setReleaseDatePrecision(releaseDatePrecision0);
      Album album0 = album_Builder1.build();
      album0.getExternalIds();
      album0.getReleaseDate();
      album0.getReleaseDatePrecision();
      album0.getTracks();
      Copyright[] copyrightArray0 = album0.getCopyrights();
      assertNull(copyrightArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setHref("*T5go7':BlFZ|!2");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album album0 = album_Builder2.build();
      album0.builder();
      album0.builder();
      album_Builder2.setLabel("Algeria");
      album0.builder();
      album0.getHref();
      Album.Builder album_Builder3 = album_Builder2.setReleaseDate("*T5go7':BlFZ|!2");
      album_Builder3.build();
      Copyright[] copyrightArray0 = new Copyright[5];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      copyrightArray0[3] = copyright0;
      copyrightArray0[4] = copyright0;
      album_Builder0.setCopyrights(copyrightArray0);
      ModelObjectType modelObjectType1 = album0.getType();
      assertEquals("audio_features", modelObjectType1.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setName("Z%,UFKl-T#lzIYE");
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getExternalIds();
      Album.Builder album_Builder2 = album_Builder1.setExternalIds((ExternalId) null);
      album0.builder();
      Album.Builder album_Builder3 = album_Builder2.setId("![");
      Copyright[] copyrightArray0 = new Copyright[0];
      album_Builder2.setCopyrights(copyrightArray0);
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder4 = album_Builder3.setAlbumType(albumType0);
      Album album1 = album_Builder4.build();
      album1.getUri();
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.MONTH;
      album_Builder4.setReleaseDatePrecision(releaseDatePrecision0);
      album_Builder1.setCopyrights(copyrightArray0);
      album_Builder0.setUri("");
      String string0 = album1.getId();
      assertEquals("![", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder1 = album_Builder0.setAlbumType(albumType0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.BW;
      countryCodeArray0[0] = countryCode0;
      Album.Builder album_Builder2 = album_Builder1.setAvailableMarkets(countryCodeArray0);
      Album.Builder album_Builder3 = album_Builder2.setLabel("=K*,W");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=K*,W";
      stringArray0[1] = "=K*,W";
      stringArray0[2] = "=K*,W";
      stringArray0[3] = "=K*,W";
      stringArray0[4] = "=K*,W";
      stringArray0[5] = "=K*,W";
      stringArray0[6] = "=K*,W";
      stringArray0[7] = "f&hpE QR";
      Album.Builder album_Builder4 = album_Builder3.setGenres(stringArray0);
      Album album0 = album_Builder4.build();
      String string0 = album0.getLabel();
      assertEquals("=K*,W", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Copyright[] copyrightArray0 = new Copyright[8];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      copyrightArray0[3] = copyright0;
      copyrightArray0[4] = copyright0;
      copyrightArray0[5] = copyright0;
      copyrightArray0[6] = copyright0;
      copyrightArray0[7] = copyright0;
      Album.Builder album_Builder1 = album_Builder0.setCopyrights(copyrightArray0);
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getTracks();
      Album.Builder album_Builder2 = album_Builder1.setTracks((Paging<TrackSimplified>) null);
      Image[] imageArray0 = new Image[2];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      Album.Builder album_Builder3 = album_Builder2.setImages(imageArray0);
      Album album1 = album_Builder3.build();
      String[] stringArray0 = album1.getGenres();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      ArtistSimplified[] artistSimplifiedArray0 = album0.getArtists();
      assertNull(artistSimplifiedArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setLabel("o");
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[7];
      ArtistSimplified artistSimplified0 = mock(ArtistSimplified.class, new ViolatedAssumptionAnswer());
      artistSimplifiedArray0[0] = artistSimplified0;
      artistSimplifiedArray0[1] = artistSimplified0;
      artistSimplifiedArray0[2] = artistSimplified0;
      artistSimplifiedArray0[3] = artistSimplified0;
      artistSimplifiedArray0[4] = artistSimplified0;
      artistSimplifiedArray0[5] = artistSimplified0;
      artistSimplifiedArray0[6] = artistSimplified0;
      Album.Builder album_Builder2 = album_Builder1.setArtists(artistSimplifiedArray0);
      Album.Builder album_Builder3 = album_Builder2.setName("o");
      Album album0 = album_Builder1.build();
      album0.getTracks();
      Album.Builder album_Builder4 = album_Builder3.setTracks((Paging<TrackSimplified>) null);
      album_Builder2.build();
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.MONTH;
      Album.Builder album_Builder5 = album_Builder4.setReleaseDatePrecision(releaseDatePrecision0);
      album_Builder5.setReleaseDate("o");
      String string0 = album0.getName();
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album album0 = album_Builder0.build();
      album0.getExternalIds();
      Album.Builder album_Builder1 = album_Builder0.setExternalIds((ExternalId) null);
      album0.builder();
      album_Builder0.setReleaseDate("external_urls");
      album_Builder1.setLabel("OD1p5N");
      Integer integer0 = new Integer(0);
      Album.Builder album_Builder2 = album_Builder1.setPopularity(integer0);
      album0.builder();
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder3 = album_Builder2.setAlbumType(albumType0);
      album_Builder2.setUri("OD1p5N");
      Album.Builder album_Builder4 = album_Builder3.setName("");
      Album.Builder album_Builder5 = album_Builder4.setAvailableMarkets((CountryCode[]) null);
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      album_Builder5.setType(modelObjectType0);
      album0.getReleaseDatePrecision();
      album0.getExternalUrls();
      Copyright[] copyrightArray0 = new Copyright[1];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      album_Builder3.setCopyrights(copyrightArray0);
      album0.getCopyrights();
      album0.getTracks();
      album_Builder5.setType(modelObjectType0);
      album_Builder5.setName("");
      album0.getImages();
      Paging<TrackSimplified> paging0 = album0.getTracks();
      assertNull(paging0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      String[] stringArray0 = new String[0];
      Album.Builder album_Builder1 = album_Builder0.setGenres(stringArray0);
      Album.Builder album_Builder2 = album_Builder1.setLabel("0Lj}jS");
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[7];
      ArtistSimplified artistSimplified0 = mock(ArtistSimplified.class, new ViolatedAssumptionAnswer());
      artistSimplifiedArray0[0] = artistSimplified0;
      artistSimplifiedArray0[1] = artistSimplified0;
      artistSimplifiedArray0[2] = artistSimplified0;
      artistSimplifiedArray0[3] = artistSimplified0;
      artistSimplifiedArray0[4] = artistSimplified0;
      artistSimplifiedArray0[5] = artistSimplified0;
      artistSimplifiedArray0[6] = artistSimplified0;
      Album.Builder album_Builder3 = album_Builder2.setArtists(artistSimplifiedArray0);
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getExternalIds();
      Album.Builder album_Builder4 = album_Builder3.setExternalIds((ExternalId) null);
      Album album1 = album_Builder4.build();
      ArtistSimplified[] artistSimplifiedArray1 = album1.getArtists();
      assertSame(artistSimplifiedArray0, artistSimplifiedArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setReleaseDate("2#K18qI q;,U[b.A2");
      Album album0 = album_Builder1.build();
      Copyright[] copyrightArray0 = new Copyright[3];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      Album.Builder album_Builder2 = album_Builder1.setCopyrights(copyrightArray0);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.DAY;
      album_Builder1.setReleaseDatePrecision(releaseDatePrecision0);
      album_Builder0.setUri("2#K18qI q;,U[b.A2");
      Album.Builder album_Builder3 = album_Builder0.setCopyrights(copyrightArray0);
      album_Builder1.setLabel("Kazakhstan");
      album0.getReleaseDate();
      album0.getExternalIds();
      album_Builder1.setExternalIds((ExternalId) null);
      album_Builder1.setPopularity((Integer) null);
      album_Builder1.setImages((Image[]) null);
      album_Builder1.setImages((Image[]) null);
      album0.getUri();
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      album_Builder3.setType(modelObjectType0);
      CountryCode[] countryCodeArray0 = new CountryCode[6];
      CountryCode countryCode0 = CountryCode.VG;
      countryCodeArray0[0] = countryCode0;
      CountryCode countryCode1 = CountryCode.ME;
      countryCodeArray0[1] = countryCode1;
      CountryCode countryCode2 = CountryCode.IC;
      countryCodeArray0[2] = countryCode2;
      CountryCode countryCode3 = CountryCode.TW;
      countryCodeArray0[3] = countryCode3;
      CountryCode countryCode4 = CountryCode.ID;
      countryCodeArray0[4] = countryCode4;
      CountryCode countryCode5 = CountryCode.MO;
      countryCodeArray0[5] = countryCode5;
      Album.Builder album_Builder4 = album_Builder1.setAvailableMarkets(countryCodeArray0);
      assertSame(album_Builder4, album_Builder2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      Album.Builder album_Builder1 = album_Builder0.setType(modelObjectType0);
      Album.Builder album_Builder2 = album_Builder1.setLabel((String) null);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.YEAR;
      Album.Builder album_Builder3 = album_Builder2.setReleaseDatePrecision(releaseDatePrecision0);
      Image[] imageArray0 = new Image[3];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      album_Builder1.setType(modelObjectType0);
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      Album.Builder album_Builder4 = album_Builder3.setImages(imageArray0);
      Album.Builder album_Builder5 = album_Builder4.setUri("");
      Integer integer0 = new Integer(0);
      Integer.max(0, 127);
      Integer.getInteger("");
      album_Builder5.setPopularity(integer0);
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder6 = album_Builder5.setAlbumType(albumType0);
      Album album0 = album_Builder6.build();
      album0.getTracks();
      album_Builder2.setTracks((Paging<TrackSimplified>) null);
      album0.getAlbumType();
      album_Builder1.setReleaseDate("");
      album0.getExternalUrls();
      album_Builder4.setLabel((String) null);
      album_Builder5.setImages(imageArray0);
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject("m>Z-T//N6=nJeokUhV");
      Album album1 = album_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(album1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      assertNull(album0.getReleaseDate());
      
      Album.Builder album_Builder0 = album0.builder();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fEhje:#";
      stringArray0[1] = "Holy See (Vatican City State)";
      stringArray0[2] = "tracks";
      album0.getTracks();
      album_Builder0.setTracks((Paging<TrackSimplified>) null);
      stringArray0[3] = "";
      stringArray0[4] = "^#4cS2wCip)";
      stringArray0[5] = "SU";
      stringArray0[6] = "Svalbard and Jan Mayen";
      stringArray0[7] = "ZAR";
      stringArray0[8] = "]I_W^7op(*2+J((";
      Album.Builder album_Builder1 = album_Builder0.setGenres(stringArray0);
      album_Builder0.setUri((String) null);
      Album album1 = album_Builder1.build();
      String[] stringArray1 = album1.getGenres();
      assertSame(stringArray0, stringArray1);
      
      album0.getHref();
      CountryCode[] countryCodeArray0 = album0.getAvailableMarkets();
      assertNull(countryCodeArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setHref("*T5go7':BlFZ|!2");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album album0 = album_Builder2.build();
      album0.builder();
      album0.builder();
      Album.Builder album_Builder3 = album_Builder2.setLabel("Algeria");
      album0.getHref();
      Album.Builder album_Builder4 = album_Builder2.setReleaseDate("*T5go7':BlFZ|!2");
      album_Builder4.build();
      Copyright[] copyrightArray0 = new Copyright[5];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      copyrightArray0[3] = copyright0;
      copyrightArray0[4] = copyright0;
      Album.Builder album_Builder5 = album_Builder0.setCopyrights(copyrightArray0);
      assertSame(album_Builder5, album_Builder3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      CountryCode[] countryCodeArray0 = new CountryCode[7];
      CountryCode countryCode0 = CountryCode.BG;
      countryCodeArray0[0] = countryCode0;
      CountryCode countryCode1 = CountryCode.RO;
      countryCodeArray0[1] = countryCode1;
      CountryCode countryCode2 = CountryCode.LY;
      countryCodeArray0[2] = countryCode2;
      CountryCode countryCode3 = CountryCode.ST;
      countryCodeArray0[3] = countryCode3;
      CountryCode countryCode4 = CountryCode.BE;
      countryCodeArray0[4] = countryCode4;
      CountryCode countryCode5 = CountryCode.TJ;
      countryCodeArray0[5] = countryCode5;
      CountryCode countryCode6 = CountryCode.MA;
      countryCodeArray0[6] = countryCode6;
      Album.Builder album_Builder1 = album_Builder0.setAvailableMarkets(countryCodeArray0);
      album0.getTracks();
      album_Builder1.setTracks((Paging<TrackSimplified>) null);
      String[] stringArray0 = album0.getGenres();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      JsonObject jsonObject2 = jsonObject1.getAsJsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject2);
      album0.getType();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      album0.builder();
      Album album1 = album_JsonUtil0.createModelObject(jsonObject0);
      album1.getName();
      album1.getPopularity();
      album0.builder();
      jsonObject0.entrySet();
      Album.Builder album_Builder1 = album1.builder();
      Copyright[] copyrightArray0 = new Copyright[0];
      Album.Builder album_Builder2 = album_Builder1.setCopyrights(copyrightArray0);
      album0.getReleaseDate();
      jsonObject0.addProperty("9uL=D{(=PNUPK_.V", (Character) null);
      album_Builder2.setName((String) null);
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[0];
      album_Builder2.setArtists(artistSimplifiedArray0);
      album1.getId();
      Album.Builder album_Builder3 = album_Builder2.setPopularity((Integer) null);
      Album.Builder album_Builder4 = album1.builder();
      album1.getTracks();
      album0.getExternalUrls();
      Album.Builder album_Builder5 = album_Builder0.setExternalUrls((ExternalUrl) null);
      album0.getExternalUrls();
      album_Builder5.setCopyrights(copyrightArray0);
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      album_Builder4.setAlbumType(albumType0);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.MONTH;
      Album.Builder album_Builder6 = album_Builder0.setReleaseDatePrecision(releaseDatePrecision0);
      assertFalse(album_Builder6.equals((Object)album_Builder3));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder1 = album_Builder0.setAlbumType(albumType0);
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.DAY;
      Album.Builder album_Builder3 = album_Builder2.setReleaseDatePrecision(releaseDatePrecision0);
      Album.Builder album_Builder4 = album_Builder3.setName("album_type");
      Album album0 = album_Builder4.build();
      Album.Builder album_Builder5 = album0.builder();
      album0.getImages();
      album0.getLabel();
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[0];
      album_Builder0.setArtists(artistSimplifiedArray0);
      album0.getTracks();
      CountryCode[] countryCodeArray0 = new CountryCode[7];
      CountryCode countryCode0 = CountryCode.TD;
      countryCodeArray0[0] = countryCode0;
      CountryCode countryCode1 = CountryCode.BF;
      countryCodeArray0[1] = countryCode1;
      CountryCode countryCode2 = CountryCode.CF;
      countryCodeArray0[2] = countryCode2;
      CountryCode countryCode3 = CountryCode.PS;
      countryCodeArray0[3] = countryCode3;
      CountryCode countryCode4 = CountryCode.SI;
      countryCodeArray0[4] = countryCode4;
      CountryCode countryCode5 = CountryCode.TC;
      countryCodeArray0[5] = countryCode5;
      CountryCode countryCode6 = CountryCode.MD;
      countryCodeArray0[6] = countryCode6;
      Album.Builder album_Builder6 = album_Builder5.setAvailableMarkets(countryCodeArray0);
      assertFalse(album_Builder6.equals((Object)album_Builder2));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      CountryCode[] countryCodeArray0 = new CountryCode[9];
      CountryCode countryCode0 = CountryCode.PK;
      countryCodeArray0[0] = countryCode0;
      CountryCode countryCode1 = CountryCode.EZ;
      countryCodeArray0[1] = countryCode1;
      CountryCode countryCode2 = CountryCode.ST;
      countryCodeArray0[2] = countryCode2;
      CountryCode countryCode3 = CountryCode.BE;
      countryCodeArray0[3] = countryCode3;
      CountryCode countryCode4 = CountryCode.TK;
      countryCodeArray0[4] = countryCode4;
      CountryCode countryCode5 = CountryCode.ML;
      countryCodeArray0[5] = countryCode5;
      CountryCode countryCode6 = CountryCode.AC;
      countryCodeArray0[6] = countryCode6;
      CountryCode countryCode7 = CountryCode.UA;
      countryCodeArray0[7] = countryCode7;
      CountryCode countryCode8 = CountryCode.GN;
      countryCodeArray0[8] = countryCode8;
      Album.Builder album_Builder1 = album_Builder0.setAvailableMarkets(countryCodeArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "release_date_precision";
      stringArray0[1] = "";
      stringArray0[2] = "Syrian Arab Republic";
      Album.Builder album_Builder2 = album_Builder1.setGenres(stringArray0);
      AlbumType albumType0 = AlbumType.ALBUM;
      Album.Builder album_Builder3 = album_Builder2.setAlbumType(albumType0);
      Album.Builder album_Builder4 = album_Builder3.setImages((Image[]) null);
      Album album0 = album_Builder4.build();
      String string0 = album0.getUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      album0.builder();
      album_Builder0.build();
      album0.builder();
      // Undeclared exception!
      try { 
        album_JsonUtil0.createModelObjectPagingCursorbased(":h4p?8~7w", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album album0 = album_Builder0.build();
      Album.Builder album_Builder1 = album0.builder();
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.YEAR;
      Album.Builder album_Builder2 = album_Builder1.setReleaseDatePrecision(releaseDatePrecision0);
      Album.Builder album_Builder3 = album_Builder2.setLabel((String) null);
      AlbumType albumType0 = AlbumType.ALBUM;
      Album.Builder album_Builder4 = album_Builder3.setAlbumType(albumType0);
      Album.Builder album_Builder5 = album_Builder4.setUri("k_J,%-^H3");
      album_Builder2.setId("k_J,%-^H3");
      album_Builder5.setUri("tg!<a}[^6A|K");
      album0.getCopyrights();
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      Album.Builder album_Builder6 = album_Builder3.setImages(imageArray0);
      assertSame(album_Builder1, album_Builder6);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      Album.Builder album_Builder0 = album0.builder();
      Album album1 = album_Builder0.build();
      Album album2 = album_Builder0.build();
      album2.getExternalUrls();
      album_Builder0.setExternalUrls((ExternalUrl) null);
      Character character0 = Character.valueOf('p');
      jsonObject0.addProperty("", character0);
      album1.builder();
      album1.getAlbumType();
      album0.getAvailableMarkets();
      album1.getExternalIds();
      album0.getId();
      Album.Builder album_Builder1 = album_Builder0.setLabel((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Album.Builder album_Builder2 = album_Builder1.setGenres(stringArray0);
      assertSame(album_Builder0, album_Builder2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album album0 = album_Builder0.build();
      album0.getExternalIds();
      Album.Builder album_Builder1 = album_Builder0.setExternalIds((ExternalId) null);
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder2 = album_Builder1.setAlbumType(albumType0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "=.Ep@!!";
      stringArray0[1] = "CAF";
      Album.Builder album_Builder3 = album_Builder2.setGenres(stringArray0);
      album0.getExternalUrls();
      Album.Builder album_Builder4 = album_Builder3.setExternalUrls((ExternalUrl) null);
      assertSame(album_Builder1, album_Builder4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getImages();
      album0.getReleaseDate();
      Album.Builder album_Builder0 = new Album.Builder();
      album0.getExternalIds();
      Album.Builder album_Builder1 = album_Builder0.setExternalIds((ExternalId) null);
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album.Builder album_Builder3 = album_Builder2.setLabel((String) null);
      album0.getExternalUrls();
      album_Builder1.setExternalUrls((ExternalUrl) null);
      album_Builder0.setId(" ");
      Album.Builder album_Builder4 = album_Builder3.setUri(" ");
      Album.Builder album_Builder5 = album_Builder4.setReleaseDate("href");
      album_Builder5.setType(modelObjectType0);
      album0.getLabel();
      String string0 = album0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      CountryCode[] countryCodeArray0 = new CountryCode[0];
      Album.Builder album_Builder1 = album_Builder0.setAvailableMarkets(countryCodeArray0);
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getExternalUrls();
      Album.Builder album_Builder3 = album_Builder2.setExternalUrls((ExternalUrl) null);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.YEAR;
      Album.Builder album_Builder4 = album_Builder3.setReleaseDatePrecision(releaseDatePrecision0);
      Album album1 = album_Builder4.build();
      Image[] imageArray0 = album1.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      album_Builder0.setHref("uri");
      album0.getTracks();
      Album.Builder album_Builder1 = album_Builder0.setTracks((Paging<TrackSimplified>) null);
      album0.getUri();
      album_Builder1.setUri((String) null);
      Album.Builder album_Builder2 = album_Builder1.setId("4=6EDZvB&");
      assertSame(album_Builder2, album_Builder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setName("Z%,UFKl-T#lzIYE");
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getExternalIds();
      Album.Builder album_Builder2 = album_Builder1.setExternalIds((ExternalId) null);
      album0.builder();
      Album.Builder album_Builder3 = album_Builder2.setId("![");
      Copyright[] copyrightArray0 = new Copyright[0];
      album_Builder2.setCopyrights(copyrightArray0);
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder4 = album_Builder3.setAlbumType(albumType0);
      Album album1 = album_Builder4.build();
      album1.getHref();
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.MONTH;
      album_Builder4.setReleaseDatePrecision(releaseDatePrecision0);
      album_Builder1.setCopyrights(copyrightArray0);
      Album.Builder album_Builder5 = album_Builder0.setUri("");
      assertSame(album_Builder5, album_Builder3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Copyright[] copyrightArray0 = album0.getCopyrights();
      assertNull(copyrightArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      Album.Builder album_Builder1 = album_Builder0.setLabel("external_ids");
      album_Builder1.setExternalIds((ExternalId) null);
      Album album1 = album_Builder0.build();
      album1.builder();
      album1.getId();
      album1.getAvailableMarkets();
      album1.builder();
      // Undeclared exception!
      try { 
        jsonObject0.getAsString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Integer integer0 = new Integer((-2918));
      Album.Builder album_Builder1 = album_Builder0.setPopularity(integer0);
      Album.Builder album_Builder2 = album_Builder1.setImages((Image[]) null);
      Album.Builder album_Builder3 = album_Builder2.setUri("PE");
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getTracks();
      Album.Builder album_Builder4 = album_Builder3.setTracks((Paging<TrackSimplified>) null);
      Album album1 = album_Builder4.build();
      album1.getReleaseDatePrecision();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setAvailableMarkets((CountryCode[]) null);
      Album.Builder album_Builder2 = album_Builder1.setLabel("#B|tuR,7(f8Ho");
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      album0.getExternalIds();
      Album.Builder album_Builder3 = album_Builder2.setExternalIds((ExternalId) null);
      Album album1 = album_Builder3.build();
      CountryCode[] countryCodeArray0 = album1.getAvailableMarkets();
      assertNull(countryCodeArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album album0 = album_Builder0.build();
      Album.Builder album_Builder1 = album0.builder();
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album.Builder album_Builder3 = album_Builder2.setTracks((Paging<TrackSimplified>) null);
      Album.Builder album_Builder4 = album_Builder3.setUri("");
      Album.Builder album_Builder5 = album_Builder4.setReleaseDate((String) null);
      assertSame(album_Builder4, album_Builder5);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      Album.Builder album_Builder1 = album_Builder0.setType(modelObjectType0);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.MONTH;
      Album.Builder album_Builder2 = album_Builder1.setReleaseDatePrecision(releaseDatePrecision0);
      Album.Builder album_Builder3 = album_Builder2.setArtists((ArtistSimplified[]) null);
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      Album.Builder album_Builder4 = album_Builder3.setAlbumType(albumType0);
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      album0.getTracks();
      Album.Builder album_Builder5 = album_Builder4.setTracks((Paging<TrackSimplified>) null);
      assertSame(album_Builder2, album_Builder5);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setUri("2'7gO#e;&0");
      Album.Builder album_Builder2 = album_Builder1.setHref("");
      Album.Builder album_Builder3 = album_Builder2.setId("yj[3*J*;~kWa<VQJ!I");
      Album album0 = album_Builder3.build();
      Album.Builder album_Builder4 = album0.builder();
      AlbumType albumType0 = AlbumType.COMPILATION;
      Album.Builder album_Builder5 = album_Builder4.setAlbumType(albumType0);
      assertFalse(album_Builder5.equals((Object)album_Builder2));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      String string0 = album0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      album0.builder();
      String string0 = album0.getReleaseDate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      Paging<TrackSimplified> paging0 = album0.getTracks();
      assertNull(paging0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setGenres((String[]) null);
      Album.Builder album_Builder2 = album_Builder1.setName("");
      Album.Builder album_Builder3 = album_Builder2.setUri("");
      Album album0 = album_Builder2.build();
      album0.getExternalUrls();
      Album.Builder album_Builder4 = album_Builder3.setExternalUrls((ExternalUrl) null);
      album0.getExternalIds();
      Album.Builder album_Builder5 = album_Builder4.setExternalIds((ExternalId) null);
      AlbumType albumType0 = AlbumType.SINGLE;
      Album.Builder album_Builder6 = album_Builder5.setAlbumType(albumType0);
      assertSame(album_Builder5, album_Builder6);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.DAY;
      Album.Builder album_Builder1 = album_Builder0.setReleaseDatePrecision(releaseDatePrecision0);
      assertSame(album_Builder0, album_Builder1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject("NUMBER");
      album_JsonUtil0.createModelObject((JsonObject) null);
      // Undeclared exception!
      try { 
        jsonObject0.getAsJsonPrimitive();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Primitive: {}
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      album0.getExternalIds();
      Album.Builder album_Builder1 = album_Builder0.setExternalIds((ExternalId) null);
      album_Builder1.setUri(")vZQVec^]iGf1xhW");
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[1];
      ArtistSimplified artistSimplified0 = mock(ArtistSimplified.class, new ViolatedAssumptionAnswer());
      artistSimplifiedArray0[0] = artistSimplified0;
      Album.Builder album_Builder2 = album_Builder1.setArtists(artistSimplifiedArray0);
      Album album1 = album_Builder2.build();
      album_Builder0.setHref(")vZQVec^]iGf1xhW");
      ArtistSimplified[] artistSimplifiedArray1 = album1.getArtists();
      album0.getType();
      AlbumType albumType0 = AlbumType.SINGLE;
      album_Builder1.setAlbumType(albumType0);
      album1.getId();
      album1.getExternalIds();
      album1.getLabel();
      album1.getLabel();
      album1.getAvailableMarkets();
      album1.getUri();
      ArtistSimplified[] artistSimplifiedArray2 = album1.getArtists();
      assertSame(artistSimplifiedArray2, artistSimplifiedArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      album0.getExternalIds();
      Album.Builder album_Builder1 = album_Builder0.setExternalIds((ExternalId) null);
      Album album1 = album_Builder1.build();
      String string0 = album1.getUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album album0 = album_Builder0.build();
      Album.Builder album_Builder1 = album0.builder();
      Album.Builder album_Builder2 = album_Builder1.setLabel((String) null);
      AlbumType albumType0 = AlbumType.ALBUM;
      album_Builder1.setReleaseDate("RQXkf{GDM");
      Album.Builder album_Builder3 = album_Builder2.setAlbumType(albumType0);
      Album.Builder album_Builder4 = album_Builder3.setUri("6U2n0DT/ZBJpV3izVO");
      album_Builder1.setId("6U2n0DT/ZBJpV3izVO");
      album_Builder4.setUri("tg!<a}[^6A|K");
      album0.getCopyrights();
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[0] = image0;
      imageArray0[4] = imageArray0[3];
      album_Builder2.setImages(imageArray0);
      album0.builder();
      album0.getName();
      album0.getExternalUrls();
      Copyright[] copyrightArray0 = album0.getCopyrights();
      assertNull(copyrightArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject0);
      Album.Builder album_Builder0 = album0.builder();
      album0.builder();
      Album album1 = album_JsonUtil0.createModelObject(jsonObject0);
      album1.getName();
      album1.getPopularity();
      album0.builder();
      jsonObject0.entrySet();
      album1.builder();
      album0.getReleaseDate();
      ArtistSimplified[] artistSimplifiedArray0 = new ArtistSimplified[0];
      album1.getId();
      Album.Builder album_Builder1 = album1.builder();
      album1.getTracks();
      album0.getExternalUrls();
      album_Builder0.setExternalUrls((ExternalUrl) null);
      album0.getExternalUrls();
      AlbumType albumType0 = AlbumType.APPEARS_ON;
      album_Builder1.setAlbumType(albumType0);
      ReleaseDatePrecision releaseDatePrecision0 = ReleaseDatePrecision.MONTH;
      album_Builder0.setReleaseDatePrecision(releaseDatePrecision0);
      Image[] imageArray0 = album0.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Album.JsonUtil album_JsonUtil0 = new Album.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      Album album0 = album_JsonUtil0.createModelObject(jsonObject1);
      Album.Builder album_Builder0 = album0.builder();
      album_Builder0.build();
      Album album1 = album_Builder0.build();
      Album album2 = album_Builder0.build();
      album2.getExternalUrls();
      Character character0 = Character.valueOf('p');
      jsonObject0.addProperty("", character0);
      album1.builder();
      album1.getAlbumType();
      album0.getAvailableMarkets();
      album1.getExternalIds();
      album0.getId();
      album_Builder0.setLabel((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Copyright[] copyrightArray0 = album1.getCopyrights();
      assertNull(copyrightArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Album.Builder album_Builder0 = new Album.Builder();
      Album.Builder album_Builder1 = album_Builder0.setHref("*T5go7':BlFZ|!2");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Album.Builder album_Builder2 = album_Builder1.setType(modelObjectType0);
      Album album0 = album_Builder2.build();
      album0.builder();
      album_Builder2.setHref("*T5go7':BlFZ|!2");
      album0.builder();
      album_Builder2.setLabel("Algeria");
      album0.getHref();
      Album.Builder album_Builder3 = album_Builder2.setReleaseDate("*T5go7':BlFZ|!2");
      album_Builder3.build();
      Copyright[] copyrightArray0 = new Copyright[5];
      Copyright copyright0 = mock(Copyright.class, new ViolatedAssumptionAnswer());
      copyrightArray0[0] = copyright0;
      copyrightArray0[1] = copyright0;
      copyrightArray0[2] = copyright0;
      copyrightArray0[3] = copyright0;
      copyrightArray0[4] = copyright0;
      album_Builder0.setCopyrights(copyrightArray0);
      String string0 = album0.getLabel();
      assertNull(string0);
  }
}
