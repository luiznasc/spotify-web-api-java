/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:32:54 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.model_objects.specification.Artist;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import com.wrapper.spotify.model_objects.specification.Followers;
import com.wrapper.spotify.model_objects.specification.Image;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Artist_ESTest extends Artist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      Artist.Builder artist_Builder0 = new Artist.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      Artist.Builder artist_Builder1 = artist_Builder0.setType(modelObjectType0);
      Image[] imageArray0 = new Image[0];
      Artist.Builder artist_Builder2 = artist_Builder1.setImages(imageArray0);
      Artist.Builder artist_Builder3 = artist_Builder2.setHref("/O;rF*#[S\"!H36");
      Artist.Builder artist_Builder4 = artist_Builder3.setId((String) null);
      Integer integer0 = new Integer((-2862));
      artist_Builder2.setPopularity(integer0);
      Artist artist0 = artist_Builder4.build();
      artist0.getGenres();
      artist0.builder();
      artist0.getImages();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonElement0).isJsonNull();
      JsonElement jsonElement1 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(jsonElement1).getAsInt();
      doReturn((String) null, (String) null, (String) null).when(jsonElement1).getAsString();
      doReturn(false, false, false, false, false).when(jsonElement1).isJsonNull();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, jsonElement1, jsonElement1, jsonElement1, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(jsonArray0).when(jsonObject0).getAsJsonArray(anyString());
      doReturn(false, true, false, false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        artist_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.Artist$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonElement0).getAsString();
      doReturn(false, false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn((JsonArray) null).when(jsonObject0).getAsJsonArray(anyString());
      doReturn(false, false, false, false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        artist_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist artist0 = artist_Builder0.build();
      Artist.Builder artist_Builder1 = artist_Builder0.setHref("");
      Integer integer0 = new Integer(0);
      artist_Builder0.setPopularity(integer0);
      Artist.Builder artist_Builder2 = artist_Builder1.setPopularity((Integer) null);
      artist_Builder2.setId("u&H8Z");
      artist0.builder();
      Artist.Builder artist_Builder3 = artist_Builder0.setId("");
      Artist artist1 = artist_Builder1.build();
      Artist.Builder artist_Builder4 = artist1.builder();
      artist1.getGenres();
      artist1.getFollowers();
      String[] stringArray0 = new String[0];
      Artist.Builder artist_Builder5 = artist_Builder4.setGenres(stringArray0);
      artist0.getPopularity();
      artist0.getType();
      artist0.getGenres();
      artist_Builder5.setFollowers((Followers) null);
      artist_Builder3.setHref("LJ5P+buGYBC!:E");
      artist_Builder0.setUri("");
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      Artist artist2 = artist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(artist2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Integer integer0 = new Integer(0);
      Artist.Builder artist_Builder1 = artist_Builder0.setPopularity(integer0);
      Artist.Builder artist_Builder2 = artist_Builder1.setId("");
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.getExternalUrls();
      Artist.Builder artist_Builder3 = artist_Builder2.setExternalUrls((ExternalUrl) null);
      Image[] imageArray0 = new Image[7];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      Artist.Builder artist_Builder4 = artist_Builder3.setImages(imageArray0);
      Artist artist1 = artist_Builder4.build();
      artist1.getPopularity();
      artist0.getGenres();
      artist1.getFollowers();
      artist_Builder2.setFollowers((Followers) null);
      artist_Builder3.build();
      Artist artist2 = artist_Builder2.build();
      artist1.getId();
      artist2.getHref();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      Artist.Builder artist_Builder0 = artist0.builder();
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      Artist.Builder artist_Builder1 = artist_Builder0.setImages(imageArray0);
      Artist artist1 = artist_Builder1.build();
      Image[] imageArray1 = artist1.getImages();
      assertSame(imageArray0, imageArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      artist_Builder0.build();
      Integer integer0 = new Integer((-1));
      Artist.Builder artist_Builder1 = artist_Builder0.setPopularity(integer0);
      Artist.Builder artist_Builder2 = artist_Builder1.setUri("");
      ExternalUrl externalUrl0 = mock(ExternalUrl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalUrl0).toString();
      Artist.Builder artist_Builder3 = artist_Builder0.setExternalUrls(externalUrl0);
      Artist artist0 = artist_Builder3.build();
      ExternalUrl externalUrl1 = artist0.getExternalUrls();
      artist_Builder2.setExternalUrls(externalUrl1);
      Artist.Builder artist_Builder4 = artist_Builder2.setHref("R9OP!@fr>TTg2@\"7j^t");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      artist_Builder1.setType(modelObjectType0);
      ModelObjectType modelObjectType1 = ModelObjectType.AUDIO_FEATURES;
      artist_Builder1.setType(modelObjectType1);
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      Artist artist1 = artist_JsonUtil0.createModelObject(jsonObject1);
      artist1.builder();
      Artist artist2 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist2.builder();
      artist2.getUri();
      artist1.getGenres();
      artist1.getFollowers();
      Artist.Builder artist_Builder5 = artist_Builder4.setGenres((String[]) null);
      assertSame(artist_Builder2, artist_Builder5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Image[] imageArray0 = new Image[3];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      Artist.Builder artist_Builder1 = artist_Builder0.setImages(imageArray0);
      Artist.Builder artist_Builder2 = artist_Builder1.setId("ubvl\u0001F");
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      Artist.Builder artist_Builder3 = artist_Builder2.setType(modelObjectType0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "ubvl\u0001F";
      Artist.Builder artist_Builder4 = artist_Builder3.setGenres(stringArray0);
      Artist artist0 = artist_Builder4.build();
      String string0 = artist0.getId();
      assertEquals("ubvl\u0001F", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.Builder artist_Builder1 = artist_Builder0.setUri("0");
      Artist artist0 = artist_Builder0.build();
      Artist.Builder artist_Builder2 = artist0.builder();
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      artist_Builder1.setHref("com.wrapper.spotify.model_objects.specification.Artist");
      Integer integer0 = new Integer((-528));
      Artist.Builder artist_Builder3 = artist_Builder2.setPopularity(integer0);
      Artist.Builder artist_Builder4 = artist_Builder1.setType(modelObjectType0);
      artist0.getFollowers();
      artist0.builder();
      artist_Builder2.setId("");
      artist0.getExternalUrls();
      artist_Builder1.setExternalUrls((ExternalUrl) null);
      artist0.getUri();
      artist_Builder1.build();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "0";
      stringArray0[2] = "com.wrapper.spotify.model_objects.specification.Artist";
      stringArray0[3] = "0";
      artist_Builder2.setGenres(stringArray0);
      Integer integer1 = new Integer((-528));
      Artist.Builder artist_Builder5 = artist_Builder4.setPopularity(integer1);
      artist_Builder3.setId("0");
      artist0.getFollowers();
      artist0.getPopularity();
      artist_Builder5.build();
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist1 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist1.getName();
      String string0 = artist0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "com.wrapper.spotify.model_objects.specification.PagingCursorbased$Builder";
      stringArray0[2] = "";
      stringArray0[3] = "@#";
      stringArray0[4] = "(;sV=c";
      stringArray0[5] = "";
      Artist.Builder artist_Builder1 = artist_Builder0.setGenres(stringArray0);
      Artist.Builder artist_Builder2 = artist_Builder1.setHref("com.wrapper.spotify.model_objects.specification.Artist");
      Artist.Builder artist_Builder3 = artist_Builder2.setName("");
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      Artist.Builder artist_Builder4 = artist_Builder3.setImages(imageArray0);
      artist_Builder4.setImages(imageArray0);
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      artist_Builder3.setType(modelObjectType0);
      Integer integer0 = new Integer(4);
      Artist.Builder artist_Builder5 = artist_Builder2.setPopularity(integer0);
      Artist artist0 = artist_Builder4.build();
      artist0.getName();
      artist0.getUri();
      artist_Builder4.build();
      artist_Builder3.setImages(imageArray0);
      artist_Builder5.setId("k(rB0=,R{pq}>,n");
      artist0.getPopularity();
      artist_Builder0.setName("");
      artist0.getExternalUrls();
      Artist.Builder artist_Builder6 = artist_Builder5.setExternalUrls((ExternalUrl) null);
      assertSame(artist_Builder6, artist_Builder3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.Builder artist_Builder1 = artist_Builder0.setName("");
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      artist_Builder0.setId((String) null);
      Artist.Builder artist_Builder2 = artist_Builder1.setType(modelObjectType0);
      artist_Builder1.setHref("");
      Artist.Builder artist_Builder3 = artist_Builder2.setPopularity((Integer) null);
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.getFollowers();
      artist_Builder3.setFollowers((Followers) null);
      Integer integer0 = new Integer(1429);
      artist_Builder3.setPopularity(integer0);
      Artist artist1 = artist_Builder3.build();
      artist1.getFollowers();
      Artist.Builder artist_Builder4 = artist_Builder1.setPopularity((Integer) null);
      artist_Builder3.setId((String) null);
      artist1.builder();
      artist1.getHref();
      artist1.getExternalUrls();
      artist_Builder4.setUri("");
      Integer integer1 = artist1.getPopularity();
      assertEquals(1429, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.Builder artist_Builder1 = artist_Builder0.setName("N6");
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.getExternalUrls();
      Artist.Builder artist_Builder2 = artist_Builder1.setExternalUrls((ExternalUrl) null);
      Integer integer0 = new Integer(5);
      Artist.Builder artist_Builder3 = artist_Builder2.setPopularity(integer0);
      Artist.Builder artist_Builder4 = artist_Builder3.setHref("N6");
      Artist artist1 = artist_Builder4.build();
      artist1.getName();
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      artist_Builder2.setType(modelObjectType0);
      String[] stringArray0 = artist0.getGenres();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.getExternalUrls();
      Artist.Builder artist_Builder1 = artist_Builder0.setExternalUrls((ExternalUrl) null);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Artist.Builder artist_Builder2 = artist_Builder1.setType(modelObjectType0);
      Artist.Builder artist_Builder3 = artist_Builder2.setHref("8_k");
      Image[] imageArray0 = new Image[4];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      artist_Builder1.setImages(imageArray0);
      Artist.Builder artist_Builder4 = artist_Builder3.setUri("8_k");
      Artist artist1 = artist_Builder4.build();
      artist1.getPopularity();
      artist_Builder3.setHref("8_k");
      artist_Builder3.setUri("");
      artist1.getId();
      artist1.getType();
      Artist.Builder artist_Builder5 = artist_Builder0.setId("(HH2:;");
      Artist.Builder artist_Builder6 = artist_Builder5.setUri("oS0aBE|Z9x`e>Q<S\"Q");
      assertSame(artist_Builder0, artist_Builder6);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Integer integer0 = new Integer(0);
      Artist.Builder artist_Builder1 = artist_Builder0.setPopularity(integer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Artist.Builder artist_Builder2 = artist_Builder1.setGenres(stringArray0);
      Artist.Builder artist_Builder3 = artist_Builder2.setUri("");
      artist_Builder3.setHref("5VRn_3](Z,.r");
      Artist.Builder artist_Builder4 = artist_Builder3.setId("");
      Artist artist0 = artist_Builder4.build();
      artist0.builder();
      artist0.getImages();
      artist0.getImages();
      artist0.getUri();
      artist0.getName();
      artist0.builder();
      artist0.getImages();
      String string0 = artist0.getId();
      artist0.getImages();
      Artist artist1 = artist_Builder0.build();
      String string1 = artist1.getHref();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Integer integer0 = new Integer((-1044));
      artist_Builder0.setPopularity(integer0);
      Integer integer1 = new Integer(35);
      Artist.Builder artist_Builder1 = artist_Builder0.setPopularity(integer1);
      Artist.Builder artist_Builder2 = artist_Builder1.setId(".Jd[");
      Artist artist0 = artist_Builder2.build();
      Artist artist1 = artist_Builder0.build();
      artist0.getPopularity();
      artist_Builder1.setPopularity(integer1);
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      artist_Builder2.setType(modelObjectType0);
      artist_Builder2.setName("*");
      artist0.getExternalUrls();
      Artist.Builder artist_Builder3 = artist_Builder0.setExternalUrls((ExternalUrl) null);
      artist1.getGenres();
      artist_Builder3.build();
      Artist.Builder artist_Builder4 = artist_Builder1.setUri("*");
      assertSame(artist_Builder0, artist_Builder4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.getType();
      Artist.Builder artist_Builder0 = artist0.builder();
      Artist.Builder artist_Builder1 = artist_Builder0.setType((ModelObjectType) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "uri";
      stringArray0[1] = "";
      stringArray0[2] = "54rsEE]kww@f";
      Artist.Builder artist_Builder2 = artist_Builder1.setGenres(stringArray0);
      Artist.Builder artist_Builder3 = artist_Builder2.setHref("uri");
      artist_Builder2.setId("");
      Integer integer0 = new Integer(198);
      artist_Builder2.setPopularity(integer0);
      artist0.getFollowers();
      artist_Builder3.setFollowers((Followers) null);
      Artist.Builder artist_Builder4 = artist_Builder3.setPopularity((Integer) null);
      Artist artist1 = artist_Builder4.build();
      artist0.getHref();
      artist0.getId();
      artist_Builder1.setGenres(stringArray0);
      artist1.getExternalUrls();
      artist_Builder4.build();
      artist1.getGenres();
      artist1.getName();
      Followers followers0 = artist0.getFollowers();
      assertNull(followers0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Integer integer0 = new Integer((-360));
      Image[] imageArray0 = new Image[9];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      imageArray0[7] = image0;
      imageArray0[8] = image0;
      artist_Builder0.setImages(imageArray0);
      Artist.Builder artist_Builder1 = artist_Builder0.setPopularity(integer0);
      Artist.Builder artist_Builder2 = artist_Builder1.setId("href");
      artist_Builder1.setImages((Image[]) null);
      Artist artist0 = artist_Builder0.build();
      artist0.builder();
      artist0.getPopularity();
      artist0.getExternalUrls();
      artist_Builder2.setFollowers((Followers) null);
      Image[] imageArray1 = artist0.getImages();
      assertNull(imageArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist artist0 = artist_Builder0.build();
      Artist.Builder artist_Builder1 = artist0.builder();
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      artist_Builder0.setType(modelObjectType0);
      artist0.getImages();
      Artist.Builder artist_Builder2 = artist0.builder();
      Artist.Builder artist_Builder3 = artist_Builder0.setExternalUrls((ExternalUrl) null);
      artist0.getName();
      Integer integer0 = new Integer(9);
      artist_Builder3.setPopularity(integer0);
      Integer integer1 = new Integer(9);
      Artist.Builder artist_Builder4 = artist_Builder3.setPopularity(integer1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "audio_features";
      stringArray0[1] = null;
      artist_Builder2.setGenres(stringArray0);
      Integer integer2 = new Integer(9);
      artist_Builder2.setPopularity(integer2);
      artist0.getFollowers();
      artist_Builder1.setFollowers((Followers) null);
      Artist.Builder artist_Builder5 = artist0.builder();
      artist_Builder5.setUri("%6tP");
      Artist.Builder artist_Builder6 = artist_Builder4.setImages((Image[]) null);
      assertSame(artist_Builder0, artist_Builder6);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist artist0 = artist_Builder0.build();
      Artist.Builder artist_Builder1 = artist0.builder();
      artist_Builder1.setId((String) null);
      Artist.Builder artist_Builder2 = artist_Builder1.setPopularity((Integer) null);
      artist0.builder();
      artist_Builder1.setName((String) null);
      Artist.Builder artist_Builder3 = artist_Builder2.setId("GENRE");
      Artist.Builder artist_Builder4 = artist_Builder0.setHref((String) null);
      artist0.getExternalUrls();
      artist_Builder2.setExternalUrls((ExternalUrl) null);
      artist_Builder2.setPopularity((Integer) null);
      artist_Builder1.setExternalUrls((ExternalUrl) null);
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      artist_Builder3.setId("");
      Artist.Builder artist_Builder5 = artist_Builder3.setType(modelObjectType0);
      artist_Builder5.setId("GENRE");
      artist0.getHref();
      artist0.getId();
      artist_Builder4.build();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Not a JSON Object: ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      artist_Builder5.setGenres(stringArray0);
      ExternalUrl externalUrl0 = artist0.getExternalUrls();
      assertNull(externalUrl0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist artist0 = artist_Builder0.build();
      Artist.Builder artist_Builder1 = artist0.builder();
      artist0.getPopularity();
      Integer integer0 = new Integer(0);
      artist_Builder0.setPopularity(integer0);
      artist0.getId();
      artist_Builder1.setId((String) null);
      Integer integer1 = artist0.getPopularity();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = null;
      artist_JsonUtil0.createModelObject((JsonObject) null);
      // Undeclared exception!
      try { 
        artist_JsonUtil0.createModelObjectPaging((JsonObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.Builder artist_Builder1 = artist_Builder0.setId((String) null);
      Integer integer0 = new Integer(0);
      Artist.Builder artist_Builder2 = artist_Builder1.setPopularity(integer0);
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Artist.Builder artist_Builder3 = artist_Builder2.setType(modelObjectType0);
      artist_Builder3.setUri("name");
      Artist.Builder artist_Builder4 = artist_Builder3.setHref("com.wrapper.spotify.model_objects.specification.PagingCursorbased$Builder");
      Artist artist0 = artist_Builder4.build();
      artist0.getGenres();
      artist0.getImages();
      artist_Builder0.setPopularity(integer0);
      artist0.getGenres();
      String string0 = artist0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.Builder artist_Builder1 = artist_Builder0.setHref((String) null);
      Artist artist0 = artist_Builder0.build();
      artist0.getFollowers();
      Artist.Builder artist_Builder2 = artist_Builder1.setFollowers((Followers) null);
      Artist.Builder artist_Builder3 = artist_Builder2.setUri("$'jg_w!m`Nf!cL");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "$'jg_w!m`Nf!cL";
      Artist.Builder artist_Builder4 = artist_Builder3.setGenres(stringArray0);
      artist0.getExternalUrls();
      Artist.Builder artist_Builder5 = artist_Builder4.setExternalUrls((ExternalUrl) null);
      Artist artist1 = artist_Builder5.build();
      assertNull(artist1.getHref());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.getExternalUrls();
      Artist.Builder artist_Builder1 = artist_Builder0.setExternalUrls((ExternalUrl) null);
      Integer integer0 = new Integer((-1347));
      Artist.Builder artist_Builder2 = artist_Builder1.setPopularity(integer0);
      Image[] imageArray0 = new Image[9];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      imageArray0[7] = image0;
      imageArray0[8] = image0;
      Artist.Builder artist_Builder3 = artist_Builder2.setImages(imageArray0);
      String[] stringArray0 = new String[0];
      Artist.Builder artist_Builder4 = artist_Builder3.setGenres(stringArray0);
      Artist artist1 = artist_Builder4.build();
      artist1.getGenres();
      String[] stringArray1 = artist0.getGenres();
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn((JsonObject) null).when(jsonObject0).getAsJsonObject();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(jsonObject0).when(jsonArray0).get(anyInt());
      doReturn(1, 1, 0).when(jsonArray0).size();
      artist_JsonUtil0.createModelObjectArray(jsonArray0);
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      Integer integer0 = new Integer(463);
      assertEquals(463, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject1);
      Artist.Builder artist_Builder0 = artist0.builder();
      Artist artist1 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist1.builder();
      Artist.Builder artist_Builder1 = artist1.builder();
      Artist.Builder artist_Builder2 = artist1.builder();
      artist_Builder1.setExternalUrls((ExternalUrl) null);
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject2).has(anyString());
      artist_JsonUtil0.hasAndNotNull(jsonObject2, "+6/($K18My");
      Artist artist2 = artist_Builder1.build();
      artist_Builder1.setName("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil");
      artist_Builder1.setHref("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil");
      artist2.getId();
      artist2.getUri();
      artist1.getGenres();
      Integer integer0 = new Integer(0);
      artist_Builder0.setPopularity(integer0);
      artist_Builder2.setHref((String) null);
      artist0.getHref();
      Image[] imageArray0 = new Image[6];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      Artist.Builder artist_Builder3 = artist_Builder2.setImages(imageArray0);
      assertSame(artist_Builder3, artist_Builder2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Artist.JsonUtil artist_JsonUtil0 = new Artist.JsonUtil();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0).when(jsonObject0).get(anyString());
      doReturn((JsonObject) null).when(jsonObject0).getAsJsonObject(anyString());
      doReturn(false, true, false, false, false).when(jsonObject0).has(anyString());
      Artist artist0 = artist_JsonUtil0.createModelObject(jsonObject0);
      artist0.builder();
      artist0.builder();
      Artist.Builder artist_Builder0 = artist0.builder();
      artist0.builder();
      ExternalUrl externalUrl0 = artist0.getExternalUrls();
      artist_Builder0.setExternalUrls(externalUrl0);
      String string0 = artist0.getId();
      ExternalUrl externalUrl1 = artist0.getExternalUrls();
      artist_Builder0.setExternalUrls(externalUrl1);
      Artist.Builder artist_Builder1 = artist_Builder0.setUri(string0);
      artist0.builder();
      Artist artist1 = artist_Builder0.build();
      String string1 = artist0.getHref();
      artist_Builder1.setName(string1);
      artist_Builder0.setId(string0);
      artist1.getType();
      boolean boolean3 = false;
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(jsonObject1).isJsonNull();
      artist_JsonUtil0.createModelObject(jsonObject1);
      artist1.getGenres();
      artist1.getType();
      boolean boolean4 = false;
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(jsonObject2).isJsonNull();
      Artist artist2 = artist_JsonUtil0.createModelObject(jsonObject2);
      assertNull(artist2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Artist.Builder artist_Builder0 = new Artist.Builder();
      Artist artist0 = artist_Builder0.build();
      Artist.Builder artist_Builder1 = artist0.builder();
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      artist_Builder0.setType(modelObjectType0);
      artist0.getImages();
      Artist.Builder artist_Builder2 = artist0.builder();
      Artist.Builder artist_Builder3 = artist_Builder0.setExternalUrls((ExternalUrl) null);
      artist0.getName();
      Integer integer0 = new Integer(9);
      artist_Builder3.setPopularity(integer0);
      Integer integer1 = new Integer(9);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "audio_features";
      stringArray0[1] = null;
      Artist.Builder artist_Builder4 = artist_Builder2.setGenres(stringArray0);
      Integer integer2 = new Integer(9);
      artist_Builder2.setPopularity(integer2);
      artist0.getFollowers();
      artist_Builder1.setFollowers((Followers) null);
      Artist.Builder artist_Builder5 = artist0.builder();
      artist_Builder5.setUri("%6tP");
      Artist.Builder artist_Builder6 = artist_Builder3.setImages((Image[]) null);
      assertNotSame(artist_Builder6, artist_Builder4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      Image[] imageArray0 = new Image[0];
  }
}
