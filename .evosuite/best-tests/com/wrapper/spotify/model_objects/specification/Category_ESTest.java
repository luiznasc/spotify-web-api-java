/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:49:20 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.Category;
import com.wrapper.spotify.model_objects.specification.Image;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Category_ESTest extends Category_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(false, false, false, true).when(jsonObject0).has(anyString());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject1).isJsonNull();
      category_JsonUtil0.createModelObject(jsonObject1);
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.Category$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(false, false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.Category$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      boolean boolean0 = true;
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0).when(jsonObject0).get(anyString());
      doReturn((JsonArray) null).when(jsonObject0).getAsJsonArray(anyString());
      doReturn(false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.Category$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      category_JsonUtil0.createModelObject(jsonObject0);
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject1).has(anyString());
      Category category0 = category_JsonUtil0.createModelObject(jsonObject1);
      assertNull(category0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject0).has(anyString());
      Category category0 = category_JsonUtil0.createModelObject(jsonObject0);
      category0.getName();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject1).has(anyString());
      Category category1 = category_JsonUtil0.createModelObject(jsonObject1);
      Category.Builder category_Builder0 = category1.builder();
      category0.builder();
      Category.Builder category_Builder1 = category_Builder0.setId((String) null);
      Category.Builder category_Builder2 = category_Builder1.setHref("");
      Category.Builder category_Builder3 = category_Builder2.setIcons((Image[]) null);
      category_Builder3.build();
      Category.Builder category_Builder4 = category_Builder1.setName("");
      Category category2 = category_Builder4.build();
      Category.Builder category_Builder5 = category_Builder1.setId("#[XnKr{~");
      Category category3 = category_Builder4.build();
      Category.Builder category_Builder6 = category0.builder();
      category3.builder();
      Category.Builder category_Builder7 = category_Builder5.setIcons((Image[]) null);
      category3.builder();
      category0.getName();
      Category.Builder category_Builder8 = category_Builder4.setId((String) null);
      Category category4 = category_Builder1.build();
      category_Builder5.setName("~Y`k]6|D]}wIi$nzQ");
      category_Builder8.setId((String) null);
      category2.getName();
      category4.getHref();
      category_Builder6.setName((String) null);
      category_Builder6.build();
      category_Builder7.setHref("");
      String string0 = category0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setName((String) null);
      Image[] imageArray0 = new Image[6];
      category_Builder0.setId((String) null);
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      category_Builder0.setHref((String) null);
      category_Builder1.setId((String) null);
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      Category.Builder category_Builder2 = category_Builder1.setIcons(imageArray0);
      Image[] imageArray1 = new Image[0];
      category_Builder1.setIcons(imageArray1);
      category_Builder2.setHref((String) null);
      Category category0 = category_Builder1.build();
      category_Builder0.setHref("u");
      category_Builder2.setHref("");
      Category category1 = category_Builder0.build();
      category_Builder1.setId((String) null);
      category1.getName();
      category0.builder();
      Category.Builder category_Builder3 = category_Builder2.setHref((String) null);
      category1.builder();
      category1.builder();
      category1.builder();
      category_Builder3.setId("");
      category1.getIcons();
      category0.builder();
      category1.getIcons();
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject0).has(anyString());
      Category category2 = category_JsonUtil0.createModelObject(jsonObject0);
      assertFalse(category2.equals((Object)category1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setName("!ILB*aD>V");
      category_Builder0.setId("com.wrapper.spotify.model_objects.AbstractModelObject$Builder");
      category_Builder0.setId("com.wrapper.spotify.model_objects.specification.Category$JsonUtil");
      category_Builder0.setHref((String) null);
      category_Builder0.setHref("com.wrapper.spotify.model_objects.specification.Category$JsonUtil");
      Category category0 = category_Builder1.build();
      category0.builder();
      category0.builder();
      category0.builder();
      Category.Builder category_Builder2 = category_Builder1.setId((String) null);
      Image[] imageArray0 = new Image[0];
      category_Builder2.build();
      category_Builder1.setIcons(imageArray0);
      category_Builder2.setIcons(imageArray0);
      category0.builder();
      category_Builder1.setName((String) null);
      category_Builder2.setId("!ILB*aD>V");
      category0.builder();
      category0.getHref();
      category0.getHref();
      category0.builder();
      category0.getName();
      String string0 = category0.getHref();
      category0.getId();
      String string1 = category0.getName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setHref("$.;");
      Category.Builder category_Builder2 = category_Builder1.setName("");
      Image[] imageArray0 = new Image[0];
      category_Builder1.setId("com.wrapper.spotify.model_objects.specification.Category$JsonUtil");
      category_Builder0.setIcons(imageArray0);
      Category.Builder category_Builder3 = category_Builder2.setId("");
      Image[] imageArray1 = new Image[2];
      Category.Builder category_Builder4 = category_Builder0.setHref("");
      Category category0 = category_Builder0.build();
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      Category category1 = category_Builder0.build();
      imageArray1[0] = image0;
      Category category2 = category_Builder3.build();
      Category category3 = category_Builder3.build();
      Category.Builder category_Builder5 = category2.builder();
      imageArray1[1] = image0;
      category_Builder3.setIcons(imageArray1);
      category_Builder4.setIcons(imageArray1);
      category_Builder5.setIcons(imageArray0);
      category_Builder5.setId("");
      category0.getHref();
      category_Builder5.setIcons(imageArray1);
      category1.getId();
      Category category4 = category_Builder5.build();
      assertFalse(category4.equals((Object)category3));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category category0 = category_Builder0.build();
      category0.builder();
      category0.getHref();
      category0.getName();
      String string0 = category0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      Category.Builder category_Builder0 = new Category.Builder();
      Category category0 = category_Builder0.build();
      category0.builder();
      category0.getIcons();
      category_Builder0.setHref("EE2Pl");
      category_Builder0.setId("com.wrapper.spotify.model_objects.specification.Category");
      Category.Builder category_Builder1 = category_Builder0.setId("com.wrapper.spotify.model_objects.specification.Category");
      category0.getId();
      Category.Builder category_Builder2 = category_Builder0.setHref((String) null);
      Category.Builder category_Builder3 = category_Builder2.setId("Xm!K");
      assertSame(category_Builder3, category_Builder1);
      assertSame(category_Builder2, category_Builder3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setId("");
      Category.Builder category_Builder2 = category_Builder1.setHref("");
      Category.Builder category_Builder3 = category_Builder2.setName("");
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      Category.Builder category_Builder4 = category_Builder3.setIcons(imageArray0);
      category_Builder2.setName("");
      category_Builder3.setHref("");
      Category category0 = category_Builder4.build();
      category_Builder0.setName("");
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject0).has(anyString());
      category_JsonUtil0.createModelObject(jsonObject0);
      category0.builder();
      category0.builder();
      String string0 = category0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Image[] imageArray0 = new Image[4];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      Category.Builder category_Builder1 = category_Builder0.setIcons(imageArray0);
      Category.Builder category_Builder2 = category_Builder1.setId("x|Gk");
      category_Builder2.setName("x|Gk");
      Image[] imageArray1 = new Image[3];
      imageArray1[0] = image0;
      imageArray1[1] = image0;
      imageArray1[2] = image0;
      category_Builder1.setIcons(imageArray1);
      Category.Builder category_Builder3 = category_Builder2.setHref("x|Gk");
      Category category0 = category_Builder3.build();
      Image[] imageArray2 = category0.getIcons();
      assertNotSame(imageArray0, imageArray2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setHref("");
      category_Builder0.setHref("Not a JSON Null: ");
      category_Builder0.setHref("com.wrapper.spotify.model_objects.specification.PagingCursorbased$Builder");
      Category category0 = category_Builder1.build();
      String string0 = category0.getHref();
      assertEquals("com.wrapper.spotify.model_objects.specification.PagingCursorbased$Builder", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      category_JsonUtil0.createModelObject((JsonObject) null);
      Category category0 = category_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(category0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setHref("");
      category_Builder1.setId((String) null);
      Category category0 = category_Builder1.build();
      category0.builder();
      String string0 = category0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setId("");
      Category.Builder category_Builder2 = category_Builder1.setName("");
      assertSame(category_Builder2, category_Builder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      category_JsonUtil0.createModelObject((JsonObject) null);
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObjectPaging("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: null
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonElement jsonElement1 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonElement1).getAsString();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, jsonElement1, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true, false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category.Builder category_Builder1 = category_Builder0.setId((String) null);
      Category.Builder category_Builder2 = category_Builder1.setHref((String) null);
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      Category.Builder category_Builder3 = category_Builder2.setIcons(imageArray0);
      Category.Builder category_Builder4 = category_Builder3.setName((String) null);
      Category category0 = category_Builder3.build();
      category0.builder();
      category_Builder4.setIcons(imageArray0);
      category0.builder();
      Category category1 = category_Builder4.build();
      Category.Builder category_Builder5 = category_Builder3.setName((String) null);
      category1.getName();
      category1.builder();
      category_Builder5.setId((String) null);
      category_Builder4.setName("");
      Image[] imageArray1 = category1.getIcons();
      category1.getName();
      category1.getId();
      category_Builder2.setId((String) null);
      category_Builder5.setName((String) null);
      category_Builder4.build();
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      Category category2 = category_Builder4.build();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      category_JsonUtil0.createModelObject(jsonObject0);
      category_Builder3.setIcons(imageArray1);
      category_Builder2.setIcons(imageArray1);
      category_Builder0.setName((String) null);
      Image[] imageArray2 = category2.getIcons();
      assertSame(imageArray2, imageArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Category.Builder category_Builder0 = new Category.Builder();
      Category category0 = category_Builder0.build();
      Category.Builder category_Builder1 = category0.builder();
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      category0.builder();
      Category.Builder category_Builder2 = category0.builder();
      category_Builder2.setHref("id");
      Category.Builder category_Builder3 = category_Builder2.setHref("3=*");
      category_Builder3.build();
      category_Builder2.build();
      Category.Builder category_Builder4 = category_Builder0.setHref("");
      assertFalse(category_Builder4.equals((Object)category_Builder1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0).when(jsonObject0).get(anyString());
      doReturn(jsonArray0).when(jsonObject0).getAsJsonArray(anyString());
      doReturn(false, true, false, false).when(jsonObject0).has(anyString());
      Category.Builder category_Builder0 = new Category.Builder();
      Image[] imageArray0 = new Image[6];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      Category.Builder category_Builder1 = category_Builder0.setIcons(imageArray0);
      Category category0 = category_Builder1.build();
      category0.builder();
      Category category1 = category_JsonUtil0.createModelObject(jsonObject0);
      Category.Builder category_Builder2 = category1.builder();
      category1.builder();
      category_Builder2.build();
      // Undeclared exception!
      try { 
        category_JsonUtil0.createModelObjectPagingCursorbased((String) null, "href");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject0).has(anyString());
      Category category0 = category_JsonUtil0.createModelObject(jsonObject0);
      Category.Builder category_Builder0 = category0.builder();
      Image[] imageArray0 = new Image[4];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      Category.Builder category_Builder1 = category_Builder0.setIcons(imageArray0);
      Category.Builder category_Builder2 = category_Builder1.setIcons(imageArray0);
      assertSame(category_Builder2, category_Builder1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Category.JsonUtil category_JsonUtil0 = new Category.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false).when(jsonObject0).has(anyString());
      Category category0 = category_JsonUtil0.createModelObject(jsonObject0);
      String string0 = category0.getHref();
      assertNull(string0);
  }
}
