/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:39:03 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.Error;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Error_ESTest extends Error_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Integer integer0 = new Integer(0);
      Error.Builder error_Builder1 = error_Builder0.setStatus(integer0);
      Error error0 = error_Builder1.build();
      Integer integer1 = error0.getStatus();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Integer integer0 = new Integer((-2197));
      Error.Builder error_Builder1 = error_Builder0.setStatus(integer0);
      Error error0 = error_Builder1.build();
      Integer integer1 = error0.getStatus();
      assertEquals((-2197), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Integer integer0 = new Integer(2274);
      error_Builder0.setStatus(integer0);
      Error error0 = error_Builder0.build();
      Integer integer1 = error0.getStatus();
      assertEquals(2274, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Error.Builder error_Builder1 = error_Builder0.setMessage("k[^3?[");
      Error error0 = error_Builder1.build();
      String string0 = error0.getMessage();
      assertEquals("k[^3?[", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Error.JsonUtil error_JsonUtil0 = new Error.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      Error error0 = error_JsonUtil0.createModelObject(jsonObject0);
      assertNull(error0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Error.JsonUtil error_JsonUtil0 = new Error.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      Error error0 = error_JsonUtil0.createModelObject(jsonObject0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Error.JsonUtil error_JsonUtil0 = new Error.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      error_JsonUtil0.createModelObject(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Error error0 = error_Builder0.build();
      Error.Builder error_Builder1 = error0.builder();
      assertNotSame(error_Builder1, error_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Error error0 = error_Builder0.build();
      Integer integer0 = error0.getStatus();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Error.JsonUtil error_JsonUtil0 = new Error.JsonUtil();
      Error error0 = error_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      error_Builder0.setMessage("");
      Error error0 = error_Builder0.build();
      String string0 = error0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Error.Builder error_Builder0 = new Error.Builder();
      Error error0 = error_Builder0.build();
      String string0 = error0.getMessage();
      assertNull(string0);
  }
}
