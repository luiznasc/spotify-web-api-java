/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:43:45 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.Context;
import com.wrapper.spotify.model_objects.specification.PlayHistory;
import com.wrapper.spotify.model_objects.specification.TrackSimplified;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayHistory_ESTest extends PlayHistory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PlayHistory.Builder playHistory_Builder0 = new PlayHistory.Builder();
      PlayHistory.Builder playHistory_Builder1 = playHistory_Builder0.setContext((Context) null);
      assertSame(playHistory_Builder1, playHistory_Builder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PlayHistory.Builder playHistory_Builder0 = new PlayHistory.Builder();
      TrackSimplified trackSimplified0 = mock(TrackSimplified.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(trackSimplified0).toString();
      PlayHistory.Builder playHistory_Builder1 = playHistory_Builder0.setTrack(trackSimplified0);
      PlayHistory playHistory0 = playHistory_Builder1.build();
      TrackSimplified trackSimplified1 = playHistory0.getTrack();
      assertEquals(0, (int)trackSimplified1.getDurationMs());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PlayHistory.Builder playHistory_Builder0 = new PlayHistory.Builder();
      MockDate mockDate0 = new MockDate(0, (-1344), 0, (-1344), 2655);
      playHistory_Builder0.setPlayedAt(mockDate0);
      PlayHistory playHistory0 = playHistory_Builder0.build();
      Date date0 = playHistory0.getPlayedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PlayHistory.JsonUtil playHistory_JsonUtil0 = new PlayHistory.JsonUtil();
      PlayHistory playHistory0 = playHistory_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(playHistory0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PlayHistory.Builder playHistory_Builder0 = new PlayHistory.Builder();
      PlayHistory playHistory0 = playHistory_Builder0.build();
      Context context0 = playHistory0.getContext();
      assertNull(context0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PlayHistory.Builder playHistory_Builder0 = new PlayHistory.Builder();
      PlayHistory playHistory0 = playHistory_Builder0.build();
      Date date0 = playHistory0.getPlayedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PlayHistory.Builder playHistory_Builder0 = new PlayHistory.Builder();
      PlayHistory playHistory0 = playHistory_Builder0.build();
      TrackSimplified trackSimplified0 = playHistory0.getTrack();
      assertNull(trackSimplified0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PlayHistory.JsonUtil playHistory_JsonUtil0 = new PlayHistory.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlayHistory playHistory0 = playHistory_JsonUtil0.createModelObject(jsonObject0);
      PlayHistory.Builder playHistory_Builder0 = playHistory0.builder();
      assertNotNull(playHistory_Builder0);
  }
}
