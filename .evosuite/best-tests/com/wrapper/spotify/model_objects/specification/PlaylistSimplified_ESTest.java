/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:02:54 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.model_objects.miscellaneous.PlaylistTracksInformation;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import com.wrapper.spotify.model_objects.specification.Image;
import com.wrapper.spotify.model_objects.specification.PlaylistSimplified;
import com.wrapper.spotify.model_objects.specification.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlaylistSimplified_ESTest extends PlaylistSimplified_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Image[] imageArray0 = new Image[0];
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      playlistSimplified_Builder2.setType(modelObjectType0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      playlistSimplified_Builder0.setImages((Image[]) null);
      playlistSimplified0.builder();
      playlistSimplified0.getHref();
      String string0 = playlistSimplified0.getSnapshotId();
      assertNull(string0);
      
      playlistSimplified0.getOwner();
      Image[] imageArray1 = playlistSimplified0.getImages();
      assertEquals(0, imageArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Image[] imageArray0 = new Image[0];
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("-");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      playlistSimplified_Builder2.setType(modelObjectType0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      playlistSimplified_Builder0.setImages((Image[]) null);
      playlistSimplified0.builder();
      playlistSimplified0.getHref();
      String string0 = playlistSimplified0.getSnapshotId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Image[] imageArray0 = new Image[1];
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("");
      playlistSimplified_Builder2.setSnapshotId("");
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      playlistSimplified_Builder0.setImages((Image[]) null);
      playlistSimplified0.builder();
      String string0 = playlistSimplified0.getHref();
      String string1 = playlistSimplified0.getSnapshotId();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setUri("");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("");
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      playlistSimplified0.getExternalUrls();
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setExternalUrls((ExternalUrl) null);
      Boolean boolean0 = Boolean.TRUE;
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setPublicAccess(boolean0);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder4.build();
      playlistSimplified1.getIsPublicAccess();
      Boolean boolean1 = playlistSimplified0.getIsCollaborative();
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified.Builder playlistSimplified_Builder0 = playlistSimplified0.builder();
      Image[] imageArray0 = new Image[9];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      playlistSimplified0.builder();
      imageArray0[7] = image0;
      imageArray0[8] = image0;
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setId("");
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setUri("");
      Image[] imageArray1 = new Image[4];
      imageArray1[0] = image0;
      imageArray1[1] = image0;
      imageArray1[2] = image0;
      imageArray1[3] = image0;
      playlistSimplified_Builder2.setImages(imageArray1);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder3.build();
      playlistSimplified1.getUri();
      Boolean boolean0 = playlistSimplified0.getIsCollaborative();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setName("tracks");
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      playlistSimplified_Builder1.setImages(imageArray0);
      Boolean boolean0 = new Boolean("tracks");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder0.setPublicAccess(boolean0);
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setUri("tracks");
      Boolean boolean1 = Boolean.valueOf(false);
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setCollaborative(boolean1);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder3.build();
      playlistSimplified0.getImages();
      Boolean.compare(false, false);
      playlistSimplified_Builder4.setHref("w)$ecr6+Pak\"u");
      playlistSimplified0.getType();
      playlistSimplified0.builder();
      playlistSimplified0.getName();
      playlistSimplified0.getIsPublicAccess();
      playlistSimplified0.getImages();
      String string0 = playlistSimplified0.getHref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setSnapshotId("");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("");
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject1);
      playlistSimplified0.getTracks();
      playlistSimplified_Builder2.setTracks((PlaylistTracksInformation) null);
      playlistSimplified_Builder1.setName("");
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setName("");
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder3.build();
      playlistSimplified1.getType();
      Image[] imageArray0 = new Image[7];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      playlistSimplified_Builder1.build();
      PlaylistSimplified playlistSimplified2 = playlistSimplified_Builder1.build();
      playlistSimplified2.builder();
      playlistSimplified2.getOwner();
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder0.setOwner((User) null);
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      playlistSimplified_Builder1.setImages(imageArray0);
      playlistSimplified_Builder4.setUri("");
      playlistSimplified_JsonUtil0.createModelObject(jsonObject1);
      String string0 = playlistSimplified1.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Image[] imageArray0 = new Image[3];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setSnapshotId("name");
      playlistSimplified_Builder1.setId("\"e| (`+/w^");
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder1.build();
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified0.builder();
      playlistSimplified0.getTracks();
      playlistSimplified_Builder2.setTracks((PlaylistTracksInformation) null);
      playlistSimplified0.getIsPublicAccess();
      playlistSimplified0.getImages();
      playlistSimplified_Builder1.setId("name");
      playlistSimplified_Builder2.setUri("\"e| (`+/w^");
      playlistSimplified0.getId();
      playlistSimplified_Builder1.setUri("\"e| (`+/w^");
      playlistSimplified0.getSnapshotId();
      playlistSimplified_Builder3.setName("ZxCD$");
      playlistSimplified0.getType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setId("");
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      playlistSimplified0.getTracks();
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setTracks((PlaylistTracksInformation) null);
      playlistSimplified0.getIsPublicAccess();
      playlistSimplified_Builder0.build();
      playlistSimplified_Builder2.setUri("");
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setCollaborative((Boolean) null);
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setType(modelObjectType0);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder4.build();
      playlistSimplified1.getType();
      PlaylistSimplified playlistSimplified2 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      playlistSimplified2.builder();
      playlistSimplified_Builder1.setCollaborative((Boolean) null);
      PlaylistSimplified playlistSimplified3 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      assertNotSame(playlistSimplified3, playlistSimplified1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setHref("FIN");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setOwner((User) null);
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setName("FIN");
      Boolean boolean0 = Boolean.TRUE;
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setCollaborative(boolean0);
      Boolean boolean1 = Boolean.FALSE;
      playlistSimplified_Builder2.setPublicAccess(boolean1);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder4.build();
      playlistSimplified1.getUri();
      playlistSimplified0.getName();
      String string0 = playlistSimplified0.getHref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setSnapshotId("");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setId("collaborative");
      playlistSimplified_Builder1.setId("PK");
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setHref("");
      Boolean boolean0 = Boolean.TRUE;
      playlistSimplified_Builder0.setName("zBM>?.g");
      playlistSimplified_Builder3.setCollaborative(boolean0);
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setUri("com.wrapper.spotify.model_objects.specification.PlaylistSimplified$1");
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder4.build();
      playlistSimplified0.builder();
      playlistSimplified_Builder1.setHref("");
      playlistSimplified0.getImages();
      PlaylistSimplified.Builder playlistSimplified_Builder5 = playlistSimplified_Builder2.setImages((Image[]) null);
      playlistSimplified_Builder4.setImages((Image[]) null);
      playlistSimplified0.getId();
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder1.build();
      playlistSimplified1.getExternalUrls();
      playlistSimplified_Builder3.setExternalUrls((ExternalUrl) null);
      playlistSimplified0.getUri();
      playlistSimplified0.getImages();
      PlaylistSimplified.Builder playlistSimplified_Builder6 = playlistSimplified0.builder();
      assertNotSame(playlistSimplified_Builder6, playlistSimplified_Builder5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      jsonObject1.entrySet();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject1);
      PlaylistSimplified.Builder playlistSimplified_Builder0 = playlistSimplified0.builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setUri("^LYf{TY/uw7Fb,J");
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder1.build();
      playlistSimplified1.getUri();
      playlistSimplified_Builder0.setUri("^LYf{TY/uw7Fb,J");
      // Undeclared exception!
      try { 
        playlistSimplified_JsonUtil0.createModelObjectPagingCursorbased("^LYf{TY/uw7Fb,J", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 6 path $
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setUri("");
      Image[] imageArray0 = new Image[8];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      imageArray0[7] = image0;
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setOwner((User) null);
      playlistSimplified_Builder3.setSnapshotId("MV");
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setSnapshotId("MV");
      playlistSimplified_Builder1.build();
      PlaylistSimplified.Builder playlistSimplified_Builder5 = playlistSimplified_Builder4.setHref("MV");
      playlistSimplified_Builder4.setImages(imageArray0);
      playlistSimplified_Builder5.setUri("MV");
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder5.build();
      String string0 = playlistSimplified0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Image[] imageArray0 = new Image[0];
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setType(modelObjectType0);
      Boolean boolean0 = new Boolean(false);
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setPublicAccess(boolean0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder4.build();
      String string0 = playlistSimplified0.getHref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      playlistSimplified0.getTracks();
      playlistSimplified_Builder0.setTracks((PlaylistTracksInformation) null);
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setType(modelObjectType0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setUri((String) null);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder1.build();
      playlistSimplified1.getUri();
      playlistSimplified_Builder2.setSnapshotId((String) null);
      Image[] imageArray0 = playlistSimplified0.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Boolean boolean0 = new Boolean((String) null);
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setCollaborative(boolean0);
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      playlistSimplified0.getOwner();
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setOwner((User) null);
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setSnapshotId((String) null);
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setType(modelObjectType0);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder4.build();
      Boolean boolean1 = playlistSimplified1.getIsCollaborative();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      playlistSimplified0.getExternalUrls();
      playlistSimplified_Builder0.setExternalUrls((ExternalUrl) null);
      playlistSimplified0.builder();
      playlistSimplified0.builder();
      playlistSimplified0.getTracks();
      playlistSimplified_Builder0.setUri("pE=");
      Image[] imageArray0 = playlistSimplified0.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified.Builder playlistSimplified_Builder0 = playlistSimplified0.builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setUri((String) null);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setId("");
      playlistSimplified_Builder1.build();
      playlistSimplified0.getIsCollaborative();
      playlistSimplified_Builder1.setCollaborative((Boolean) null);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder1.build();
      playlistSimplified1.builder();
      PlaylistSimplified playlistSimplified2 = playlistSimplified_Builder2.build();
      playlistSimplified2.getId();
      playlistSimplified1.getType();
      playlistSimplified1.getIsCollaborative();
      playlistSimplified0.getExternalUrls();
      playlistSimplified2.getHref();
      playlistSimplified0.getHref();
      PlaylistSimplified playlistSimplified3 = playlistSimplified_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(playlistSimplified3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject1);
      String string0 = playlistSimplified0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setHref("FIN");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setOwner((User) null);
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setName("FIN");
      Boolean boolean0 = Boolean.TRUE;
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setCollaborative(boolean0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder4.build();
      String string0 = playlistSimplified0.getUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified0.builder();
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setId("href");
      playlistSimplified0.getIsCollaborative();
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setCollaborative((Boolean) null);
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setSnapshotId("href");
      assertSame(playlistSimplified_Builder3, playlistSimplified_Builder4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      playlistSimplified0.getTracks();
      PlaylistTracksInformation playlistTracksInformation0 = playlistSimplified0.getTracks();
      assertNull(playlistTracksInformation0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified.Builder playlistSimplified_Builder0 = playlistSimplified0.builder();
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setType(modelObjectType0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setName("2P],YmVB kXi>%1;3hG");
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder2.build();
      User user0 = playlistSimplified1.getOwner();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setTracks((PlaylistTracksInformation) null);
      Boolean boolean0 = new Boolean(true);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setPublicAccess(boolean0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder2.build();
      ExternalUrl externalUrl0 = playlistSimplified0.getExternalUrls();
      assertNull(externalUrl0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified.Builder playlistSimplified_Builder0 = playlistSimplified0.builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setId("");
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder1.build();
      String string0 = playlistSimplified1.getSnapshotId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      JsonObject jsonObject2 = jsonObject1.deepCopy();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject2);
      PlaylistTracksInformation playlistTracksInformation0 = playlistSimplified0.getTracks();
      assertNull(playlistTracksInformation0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified.Builder playlistSimplified_Builder0 = playlistSimplified0.builder();
      Image[] imageArray0 = new Image[9];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      playlistSimplified0.builder();
      imageArray0[7] = image0;
      imageArray0[8] = image0;
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setId("Ry");
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setUri("Ry");
      playlistSimplified_Builder2.setImages(imageArray0);
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder3.build();
      playlistSimplified1.getUri();
      playlistSimplified0.getIsCollaborative();
      playlistSimplified0.getIsPublicAccess();
      playlistSimplified0.getImages();
      PlaylistTracksInformation playlistTracksInformation0 = playlistSimplified1.getTracks();
      assertNull(playlistTracksInformation0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified0.builder();
      PlaylistSimplified playlistSimplified1 = playlistSimplified_Builder1.build();
      playlistSimplified1.getExternalUrls();
      playlistSimplified_Builder0.setExternalUrls((ExternalUrl) null);
      playlistSimplified_Builder0.setId("Um@c[B3#zbW#;c");
      PlaylistSimplified playlistSimplified2 = playlistSimplified_Builder0.build();
      playlistSimplified2.builder();
      playlistSimplified2.builder();
      playlistSimplified2.builder();
      playlistSimplified2.getOwner();
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      playlistSimplified_Builder0.setImages(imageArray0);
      playlistSimplified_Builder0.setOwner((User) null);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder0.setHref("Um@c[B3#zbW#;c");
      playlistSimplified_Builder0.setOwner((User) null);
      playlistSimplified_Builder2.setUri("Um@c[B3#zbW#;c");
      JsonArray jsonArray0 = new JsonArray(1);
      playlistSimplified2.getOwner();
      playlistSimplified2.getName();
      playlistSimplified0.builder();
      playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      String string0 = playlistSimplified0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      jsonObject1.entrySet();
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject2 = jsonObject0.getAsJsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject2);
      playlistSimplified0.builder();
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setUri("LC");
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setCollaborative((Boolean) null);
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil1 = new PlaylistSimplified.JsonUtil();
      PlaylistSimplified playlistSimplified1 = playlistSimplified_JsonUtil1.createModelObject(jsonObject1);
      jsonObject0.addProperty("v", (Boolean) null);
      playlistSimplified1.getTracks();
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setTracks((PlaylistTracksInformation) null);
      playlistSimplified1.getOwner();
      playlistSimplified_Builder3.setOwner((User) null);
      playlistSimplified0.getIsPublicAccess();
      jsonObject0.add("LC", jsonObject1);
      // Undeclared exception!
      try { 
        jsonObject0.deepCopy();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      Image[] imageArray0 = new Image[0];
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setImages(imageArray0);
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setHref("");
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      playlistSimplified_Builder2.setType(modelObjectType0);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder0.build();
      playlistSimplified_Builder0.setImages((Image[]) null);
      playlistSimplified0.builder();
      playlistSimplified0.getHref();
      playlistSimplified0.getSnapshotId();
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      playlistSimplified_JsonUtil0.createModelObject((JsonObject) null);
      User user0 = playlistSimplified0.getOwner();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      PlaylistSimplified.JsonUtil playlistSimplified_JsonUtil0 = new PlaylistSimplified.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      PlaylistSimplified playlistSimplified0 = playlistSimplified_JsonUtil0.createModelObject(jsonObject0);
      playlistSimplified0.builder();
      playlistSimplified0.getOwner();
      PlaylistTracksInformation playlistTracksInformation0 = playlistSimplified0.getTracks();
      assertNull(playlistTracksInformation0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlaylistSimplified.Builder playlistSimplified_Builder0 = new PlaylistSimplified.Builder();
      PlaylistSimplified.Builder playlistSimplified_Builder1 = playlistSimplified_Builder0.setName("tracks");
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      PlaylistSimplified.Builder playlistSimplified_Builder2 = playlistSimplified_Builder1.setImages(imageArray0);
      Boolean boolean0 = new Boolean("tracks");
      PlaylistSimplified.Builder playlistSimplified_Builder3 = playlistSimplified_Builder2.setCollaborative(boolean0);
      PlaylistSimplified.Builder playlistSimplified_Builder4 = playlistSimplified_Builder3.setUri("tracks");
      Boolean boolean1 = Boolean.valueOf(false);
      PlaylistSimplified.Builder playlistSimplified_Builder5 = playlistSimplified_Builder4.setCollaborative(boolean1);
      PlaylistSimplified playlistSimplified0 = playlistSimplified_Builder4.build();
      playlistSimplified0.getImages();
      Boolean.compare(false, false);
      playlistSimplified_Builder5.setHref("w)$ecr6+Pak\"u");
      playlistSimplified0.getType();
      playlistSimplified0.builder();
      playlistSimplified0.getName();
      playlistSimplified0.getIsPublicAccess();
      Image[] imageArray1 = playlistSimplified0.getImages();
      assertEquals(5, imageArray1.length);
  }
}
