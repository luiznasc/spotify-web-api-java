/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:33:49 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import com.wrapper.spotify.model_objects.specification.Followers;
import com.wrapper.spotify.model_objects.specification.Image;
import com.wrapper.spotify.model_objects.specification.Paging;
import com.wrapper.spotify.model_objects.specification.Playlist;
import com.wrapper.spotify.model_objects.specification.PlaylistTrack;
import com.wrapper.spotify.model_objects.specification.Track;
import com.wrapper.spotify.model_objects.specification.User;
import java.util.Date;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Playlist_ESTest extends Playlist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setId("");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder0.setName("I^U#bz?]WzKe");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNotNull(playlist_Builder2);
      
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Playlist.Builder playlist_Builder3 = playlist_Builder1.setType(modelObjectType0);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertNotNull(playlist_Builder3);
      
      Playlist playlist0 = playlist_Builder3.build();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("I^U#bz?]WzKe", playlist0.getName());
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist0.getType());
      assertEquals("", playlist0.getId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNotNull(playlist0);
      
      Boolean boolean0 = playlist0.getIsPublicAccess();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("I^U#bz?]WzKe", playlist0.getName());
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist0.getType());
      assertEquals("", playlist0.getId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(boolean0);
      
      PlaylistTrack.Builder playlistTrack_Builder1 = new PlaylistTrack.Builder();
      assertFalse(playlistTrack_Builder1.equals((Object)playlistTrack_Builder0));
      assertNotNull(playlistTrack_Builder1);
      
      Track track0 = mock(Track.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder0.setTrack(track0);
      assertFalse(playlistTrack_Builder0.equals((Object)playlistTrack_Builder1));
      assertFalse(playlistTrack_Builder2.equals((Object)playlistTrack_Builder1));
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertNotSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertNotSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertNotNull(playlistTrack_Builder2);
      
      Playlist.Builder playlist_Builder4 = new Playlist.Builder();
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertNotNull(playlist_Builder4);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setDescription("h");
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertNotNull(playlist_Builder5);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setCollaborative((Boolean) null);
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder6.setOwner((User) null);
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertNotNull(playlist_Builder7);
      
      Playlist.Builder playlist_Builder8 = playlist_Builder7.setSnapshotId("external_urls");
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertNotSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertNotNull(playlist_Builder8);
      
      ModelObjectType modelObjectType1 = ModelObjectType.ARTIST;
      Playlist.Builder playlist_Builder9 = playlist_Builder8.setType(modelObjectType1);
      assertFalse(modelObjectType1.equals((Object)modelObjectType0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertNotSame(modelObjectType1, modelObjectType0);
      assertNotSame(playlist_Builder9, playlist_Builder0);
      assertNotSame(playlist_Builder9, playlist_Builder1);
      assertSame(playlist_Builder9, playlist_Builder6);
      assertSame(playlist_Builder9, playlist_Builder8);
      assertSame(playlist_Builder9, playlist_Builder4);
      assertSame(playlist_Builder9, playlist_Builder7);
      assertSame(playlist_Builder9, playlist_Builder5);
      assertNotSame(playlist_Builder9, playlist_Builder3);
      assertNotSame(playlist_Builder9, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder9);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder9);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertNotSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertNotNull(playlist_Builder9);
      
      Playlist playlist1 = playlist_Builder6.build();
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getName());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertEquals("h", playlist1.getDescription());
      assertNotNull(playlist1);
      
      Playlist playlist2 = playlist_Builder8.build();
      assertFalse(playlist2.equals((Object)playlist1));
      assertFalse(playlist2.equals((Object)playlist0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertNotSame(playlist2, playlist1);
      assertNotSame(playlist2, playlist0);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder9);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder9);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertNotSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertEquals(ModelObjectType.ARTIST, playlist2.getType());
      assertNull(playlist2.getIsPublicAccess());
      assertNull(playlist2.getIsCollaborative());
      assertEquals("h", playlist2.getDescription());
      assertNull(playlist2.getId());
      assertNull(playlist2.getUri());
      assertNull(playlist2.getName());
      assertNull(playlist2.getHref());
      assertEquals("external_urls", playlist2.getSnapshotId());
      assertNotNull(playlist2);
      
      Playlist.Builder playlist_Builder10 = playlist1.builder();
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist_Builder10, playlist_Builder5);
      assertNotSame(playlist_Builder10, playlist_Builder9);
      assertNotSame(playlist_Builder10, playlist_Builder1);
      assertNotSame(playlist_Builder10, playlist_Builder3);
      assertNotSame(playlist_Builder10, playlist_Builder2);
      assertNotSame(playlist_Builder10, playlist_Builder4);
      assertNotSame(playlist_Builder10, playlist_Builder7);
      assertNotSame(playlist_Builder10, playlist_Builder6);
      assertNotSame(playlist_Builder10, playlist_Builder8);
      assertNotSame(playlist_Builder10, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getName());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertEquals("h", playlist1.getDescription());
      assertNotNull(playlist_Builder10);
      
      Playlist.Builder playlist_Builder11 = playlist1.builder();
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist_Builder11, playlist_Builder1);
      assertNotSame(playlist_Builder11, playlist_Builder6);
      assertNotSame(playlist_Builder11, playlist_Builder8);
      assertNotSame(playlist_Builder11, playlist_Builder4);
      assertNotSame(playlist_Builder11, playlist_Builder3);
      assertNotSame(playlist_Builder11, playlist_Builder7);
      assertNotSame(playlist_Builder11, playlist_Builder5);
      assertNotSame(playlist_Builder11, playlist_Builder2);
      assertNotSame(playlist_Builder11, playlist_Builder0);
      assertNotSame(playlist_Builder11, playlist_Builder9);
      assertNotSame(playlist_Builder11, playlist_Builder10);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder11);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertNotSame(playlist_Builder6, playlist_Builder11);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getName());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertEquals("h", playlist1.getDescription());
      assertNotNull(playlist_Builder11);
      
      ExternalUrl externalUrl0 = playlist1.getExternalUrls();
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder11);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertNotSame(playlist_Builder6, playlist_Builder11);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getName());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertEquals("h", playlist1.getDescription());
      assertNull(externalUrl0);
      
      Playlist.Builder playlist_Builder12 = playlist_Builder9.setExternalUrls((ExternalUrl) null);
      assertFalse(modelObjectType1.equals((Object)modelObjectType0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder12.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder12.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder12.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder12.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder12.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder12.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder10));
      assertNotSame(modelObjectType1, modelObjectType0);
      assertNotSame(playlist_Builder9, playlist_Builder0);
      assertNotSame(playlist_Builder9, playlist_Builder11);
      assertNotSame(playlist_Builder9, playlist_Builder10);
      assertNotSame(playlist_Builder9, playlist_Builder1);
      assertSame(playlist_Builder9, playlist_Builder6);
      assertSame(playlist_Builder9, playlist_Builder8);
      assertSame(playlist_Builder9, playlist_Builder12);
      assertSame(playlist_Builder9, playlist_Builder4);
      assertSame(playlist_Builder9, playlist_Builder7);
      assertNotSame(playlist_Builder9, playlist_Builder3);
      assertSame(playlist_Builder9, playlist_Builder5);
      assertNotSame(playlist_Builder9, playlist_Builder2);
      assertSame(playlist_Builder12, playlist_Builder5);
      assertSame(playlist_Builder12, playlist_Builder9);
      assertNotSame(playlist_Builder12, playlist_Builder0);
      assertSame(playlist_Builder12, playlist_Builder7);
      assertSame(playlist_Builder12, playlist_Builder8);
      assertNotSame(playlist_Builder12, playlist_Builder11);
      assertNotSame(playlist_Builder12, playlist_Builder10);
      assertSame(playlist_Builder12, playlist_Builder6);
      assertNotSame(playlist_Builder12, playlist_Builder1);
      assertSame(playlist_Builder12, playlist_Builder4);
      assertNotSame(playlist_Builder12, playlist_Builder2);
      assertNotSame(playlist_Builder12, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder11);
      assertSame(playlist_Builder4, playlist_Builder12);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder11);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertSame(playlist_Builder5, playlist_Builder12);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder12);
      assertNotSame(playlist_Builder6, playlist_Builder11);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder12);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder11);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder9);
      assertNotSame(playlist_Builder7, playlist_Builder10);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder9);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder3);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder11);
      assertSame(playlist_Builder8, playlist_Builder12);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertNotSame(playlist_Builder8, playlist_Builder10);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertNotNull(playlist_Builder12);
      
      String string0 = playlist1.getUri();
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder11);
      assertSame(playlist_Builder4, playlist_Builder12);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder11);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertSame(playlist_Builder5, playlist_Builder12);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder12);
      assertNotSame(playlist_Builder6, playlist_Builder11);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getName());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertEquals("h", playlist1.getDescription());
      assertNull(string0);
      
      String string1 = playlist2.getSnapshotId();
      assertFalse(playlist2.equals((Object)playlist1));
      assertFalse(playlist2.equals((Object)playlist0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder10));
      assertEquals("external_urls", string1);
      assertNotSame(playlist2, playlist1);
      assertNotSame(playlist2, playlist0);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder11);
      assertSame(playlist_Builder4, playlist_Builder12);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder11);
      assertSame(playlist_Builder5, playlist_Builder9);
      assertSame(playlist_Builder5, playlist_Builder12);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder12);
      assertNotSame(playlist_Builder6, playlist_Builder11);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder12);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder11);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder9);
      assertNotSame(playlist_Builder7, playlist_Builder10);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder9);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder3);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder11);
      assertSame(playlist_Builder8, playlist_Builder12);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertNotSame(playlist_Builder8, playlist_Builder10);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertEquals(ModelObjectType.ARTIST, playlist2.getType());
      assertNull(playlist2.getIsPublicAccess());
      assertNull(playlist2.getIsCollaborative());
      assertEquals("h", playlist2.getDescription());
      assertNull(playlist2.getId());
      assertNull(playlist2.getUri());
      assertNull(playlist2.getName());
      assertNull(playlist2.getHref());
      assertEquals("external_urls", playlist2.getSnapshotId());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setUri("UEvN.NjgS~p4`t>Sts");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setSnapshotId("");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setDescription("UEvN.NjgS~p4`t>Sts");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotNull(playlist_Builder3);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder1.setName("");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotNull(playlist_Builder4);
      
      Playlist playlist0 = playlist_Builder4.build();
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNull(playlist0.getHref());
      assertEquals("", playlist0.getName());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getId());
      assertEquals("", playlist0.getSnapshotId());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getDescription());
      assertNull(playlist0.getType());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getUri());
      assertNotNull(playlist0);
      
      Followers followers0 = playlist0.getFollowers();
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNull(playlist0.getHref());
      assertEquals("", playlist0.getName());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getId());
      assertEquals("", playlist0.getSnapshotId());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getDescription());
      assertNull(playlist0.getType());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getUri());
      assertNull(followers0);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder3.setFollowers((Followers) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertNotNull(playlist_Builder5);
      
      ExternalUrl externalUrl0 = playlist0.getExternalUrls();
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNull(playlist0.getHref());
      assertEquals("", playlist0.getName());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getId());
      assertEquals("", playlist0.getSnapshotId());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getDescription());
      assertNull(playlist0.getType());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getUri());
      assertNull(externalUrl0);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setExternalUrls((ExternalUrl) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder6.setExternalUrls((ExternalUrl) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertNotNull(playlist_Builder7);
      
      String string0 = playlist0.getUri();
      assertEquals("UEvN.NjgS~p4`t>Sts", string0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertNull(playlist0.getHref());
      assertEquals("", playlist0.getName());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getId());
      assertEquals("", playlist0.getSnapshotId());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getDescription());
      assertNull(playlist0.getType());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getUri());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setId("");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setAddedAt(date0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setType(modelObjectType0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNotNull(playlist_Builder2);
      
      Playlist playlist0 = playlist_Builder2.build();
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist0.getType());
      assertEquals("", playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getUri());
      assertNotNull(playlist0);
      
      Boolean boolean0 = playlist0.getIsPublicAccess();
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist0.getType());
      assertEquals("", playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getUri());
      assertNull(boolean0);
      
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder0.setIsLocal((Boolean) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder2);
      
      Track track0 = mock(Track.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder3 = playlistTrack_Builder0.setTrack(track0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder1);
      assertNotNull(playlistTrack_Builder3);
      
      Playlist.Builder playlist_Builder3 = new Playlist.Builder();
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertNotNull(playlist_Builder3);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setDescription("h");
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotNull(playlist_Builder4);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setCollaborative((Boolean) null);
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertSame(playlist_Builder3, playlist_Builder5);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotNull(playlist_Builder5);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setOwner((User) null);
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder6.setSnapshotId("external_urls");
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotNull(playlist_Builder7);
      
      ModelObjectType modelObjectType1 = ModelObjectType.ARTIST;
      Playlist.Builder playlist_Builder8 = playlist_Builder7.setType(modelObjectType1);
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(modelObjectType1.equals((Object)modelObjectType0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertNotSame(modelObjectType1, modelObjectType0);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotNull(playlist_Builder8);
      
      Playlist playlist1 = playlist_Builder5.build();
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertNotSame(playlist1, playlist0);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getName());
      assertEquals("h", playlist1.getDescription());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNotNull(playlist1);
      
      Playlist playlist2 = playlist_Builder7.build();
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist2.equals((Object)playlist0));
      assertFalse(playlist2.equals((Object)playlist1));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertNotSame(playlist2, playlist0);
      assertNotSame(playlist2, playlist1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertEquals("external_urls", playlist2.getSnapshotId());
      assertNull(playlist2.getId());
      assertEquals("h", playlist2.getDescription());
      assertNull(playlist2.getIsCollaborative());
      assertNull(playlist2.getUri());
      assertNull(playlist2.getHref());
      assertNull(playlist2.getName());
      assertNull(playlist2.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist2.getType());
      assertNotNull(playlist2);
      
      Playlist.Builder playlist_Builder9 = playlist1.builder();
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist_Builder9, playlist_Builder2);
      assertNotSame(playlist_Builder9, playlist_Builder4);
      assertNotSame(playlist_Builder9, playlist_Builder7);
      assertNotSame(playlist_Builder9, playlist_Builder8);
      assertNotSame(playlist_Builder9, playlist_Builder0);
      assertNotSame(playlist_Builder9, playlist_Builder1);
      assertNotSame(playlist_Builder9, playlist_Builder6);
      assertNotSame(playlist_Builder9, playlist_Builder3);
      assertNotSame(playlist_Builder9, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getName());
      assertEquals("h", playlist1.getDescription());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNotNull(playlist_Builder9);
      
      Playlist.Builder playlist_Builder10 = playlist1.builder();
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist1, playlist0);
      assertNotSame(playlist_Builder10, playlist_Builder2);
      assertNotSame(playlist_Builder10, playlist_Builder0);
      assertNotSame(playlist_Builder10, playlist_Builder4);
      assertNotSame(playlist_Builder10, playlist_Builder8);
      assertNotSame(playlist_Builder10, playlist_Builder9);
      assertNotSame(playlist_Builder10, playlist_Builder1);
      assertNotSame(playlist_Builder10, playlist_Builder6);
      assertNotSame(playlist_Builder10, playlist_Builder7);
      assertNotSame(playlist_Builder10, playlist_Builder3);
      assertNotSame(playlist_Builder10, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertNotSame(playlist_Builder3, playlist_Builder10);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getName());
      assertEquals("h", playlist1.getDescription());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNotNull(playlist_Builder10);
      
      ExternalUrl externalUrl0 = playlist1.getExternalUrls();
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist1, playlist0);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertNotSame(playlist_Builder3, playlist_Builder10);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getName());
      assertEquals("h", playlist1.getDescription());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(externalUrl0);
      
      Playlist.Builder playlist_Builder11 = playlist_Builder8.setExternalUrls((ExternalUrl) null);
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder9));
      assertFalse(modelObjectType1.equals((Object)modelObjectType0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder11.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertNotSame(playlist_Builder7, playlist_Builder10);
      assertNotSame(playlist_Builder7, playlist_Builder9);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertSame(playlist_Builder7, playlist_Builder11);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertNotSame(modelObjectType1, modelObjectType0);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertNotSame(playlist_Builder8, playlist_Builder9);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist_Builder8, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder10);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertSame(playlist_Builder8, playlist_Builder11);
      assertSame(playlist_Builder11, playlist_Builder4);
      assertNotSame(playlist_Builder11, playlist_Builder0);
      assertSame(playlist_Builder11, playlist_Builder6);
      assertNotSame(playlist_Builder11, playlist_Builder9);
      assertSame(playlist_Builder11, playlist_Builder5);
      assertSame(playlist_Builder11, playlist_Builder7);
      assertSame(playlist_Builder11, playlist_Builder8);
      assertSame(playlist_Builder11, playlist_Builder3);
      assertNotSame(playlist_Builder11, playlist_Builder10);
      assertNotSame(playlist_Builder11, playlist_Builder1);
      assertNotSame(playlist_Builder11, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertNotSame(playlist_Builder3, playlist_Builder10);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder11);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder9);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder11);
      assertNotNull(playlist_Builder11);
      
      String string0 = playlist1.getUri();
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist1, playlist0);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertNotSame(playlist_Builder3, playlist_Builder10);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder11);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertEquals(ModelObjectType.ARTIST, playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertEquals("external_urls", playlist1.getSnapshotId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getName());
      assertEquals("h", playlist1.getDescription());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(string0);
      
      String string1 = playlist0.getUri();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder9));
      assertFalse(modelObjectType0.equals((Object)modelObjectType1));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder11));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder5));
      assertFalse(playlist0.equals((Object)playlist1));
      assertFalse(playlist0.equals((Object)playlist2));
      assertNotSame(playlist_Builder0, playlist_Builder9);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder10);
      assertNotSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist_Builder0, playlist_Builder8);
      assertNotSame(playlist_Builder0, playlist_Builder11);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertNotSame(playlist_Builder1, playlist_Builder3);
      assertNotSame(playlist_Builder1, playlist_Builder11);
      assertNotSame(playlist_Builder1, playlist_Builder8);
      assertNotSame(playlist_Builder1, playlist_Builder10);
      assertNotSame(playlist_Builder1, playlist_Builder4);
      assertNotSame(playlist_Builder1, playlist_Builder7);
      assertNotSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder5);
      assertNotSame(playlist_Builder1, playlist_Builder9);
      assertNotSame(modelObjectType0, modelObjectType1);
      assertNotSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotSame(playlist_Builder2, playlist_Builder8);
      assertNotSame(playlist_Builder2, playlist_Builder11);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNotSame(playlist_Builder2, playlist_Builder9);
      assertNotSame(playlist_Builder2, playlist_Builder6);
      assertNotSame(playlist_Builder2, playlist_Builder7);
      assertNotSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist_Builder2, playlist_Builder10);
      assertNotSame(playlist_Builder2, playlist_Builder5);
      assertNotSame(playlist0, playlist1);
      assertNotSame(playlist0, playlist2);
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist0.getType());
      assertEquals("", playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getUri());
      assertNull(string1);
      
      ModelObjectType modelObjectType2 = playlist2.getType();
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder9));
      assertFalse(playlist2.equals((Object)playlist0));
      assertFalse(playlist2.equals((Object)playlist1));
      assertFalse(modelObjectType2.equals((Object)modelObjectType0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder10));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder10));
      assertEquals(ModelObjectType.ARTIST, modelObjectType2);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertNotSame(playlist_Builder7, playlist_Builder10);
      assertNotSame(playlist_Builder7, playlist_Builder9);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertSame(playlist_Builder7, playlist_Builder11);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertNotSame(playlist2, playlist0);
      assertNotSame(playlist2, playlist1);
      assertNotSame(modelObjectType2, modelObjectType0);
      assertSame(modelObjectType2, modelObjectType1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertNotSame(playlist_Builder3, playlist_Builder10);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder10);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder11);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder11);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertNotSame(playlist_Builder6, playlist_Builder9);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNotSame(playlist_Builder6, playlist_Builder10);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder11);
      assertEquals("external_urls", playlist2.getSnapshotId());
      assertNull(playlist2.getId());
      assertEquals("h", playlist2.getDescription());
      assertNull(playlist2.getIsCollaborative());
      assertNull(playlist2.getUri());
      assertNull(playlist2.getHref());
      assertNull(playlist2.getName());
      assertNull(playlist2.getIsPublicAccess());
      assertEquals(ModelObjectType.ARTIST, playlist2.getType());
      assertEquals("artist", modelObjectType2.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setId("GF");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setDescription("GF");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setName("GF");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotNull(playlist_Builder3);
      
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setType(modelObjectType0);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotNull(playlist_Builder4);
      
      Playlist playlist0 = playlist_Builder4.build();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.ALBUM, playlist0.getType());
      assertEquals("GF", playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertEquals("GF", playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getHref());
      assertEquals("GF", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNotNull(playlist0);
      
      String string0 = playlist0.getId();
      assertEquals("GF", string0);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.ALBUM, playlist0.getType());
      assertEquals("GF", playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertEquals("GF", playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getHref());
      assertEquals("GF", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNotNull(string0);
      
      Playlist.Builder playlist_Builder5 = playlist0.builder();
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNotSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNull(playlist0.getIsCollaborative());
      assertEquals(ModelObjectType.ALBUM, playlist0.getType());
      assertEquals("GF", playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertEquals("GF", playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getHref());
      assertEquals("GF", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNotNull(playlist_Builder5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setUri("UEvN.NjgS~p4`t>Sts");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setSnapshotId("");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      Playlist playlist0 = playlist_Builder0.build();
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNull(playlist0.getId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getHref());
      assertEquals("", playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist0);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setDescription("UEvN.NjgS~p4`t>Sts");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotNull(playlist_Builder3);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder1.setName("");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotNull(playlist_Builder4);
      
      Playlist playlist1 = playlist_Builder4.build();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getHref());
      assertEquals("", playlist1.getName());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getDescription());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getUri());
      assertEquals("", playlist1.getSnapshotId());
      assertNotNull(playlist1);
      
      Followers followers0 = playlist1.getFollowers();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getHref());
      assertEquals("", playlist1.getName());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getDescription());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getUri());
      assertEquals("", playlist1.getSnapshotId());
      assertNull(followers0);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder3.setFollowers((Followers) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertNotNull(playlist_Builder5);
      
      ExternalUrl externalUrl0 = playlist1.getExternalUrls();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getHref());
      assertEquals("", playlist1.getName());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getDescription());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getUri());
      assertEquals("", playlist1.getSnapshotId());
      assertNull(externalUrl0);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setExternalUrls((ExternalUrl) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder6.setExternalUrls((ExternalUrl) null);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertSame(playlist_Builder7, playlist_Builder0);
      assertNotNull(playlist_Builder7);
      
      String string0 = playlist1.getSnapshotId();
      assertFalse(playlist1.equals((Object)playlist0));
      assertEquals("", string0);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getHref());
      assertEquals("", playlist1.getName());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsPublicAccess());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getDescription());
      assertEquals("UEvN.NjgS~p4`t>Sts", playlist1.getUri());
      assertEquals("", playlist1.getSnapshotId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setImages(imageArray0);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertEquals(1, imageArray0.length);
      assertNotNull(playlist_Builder1);
      
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getName());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist0);
      
      String string0 = playlist0.getSnapshotId();
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getName());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string0);
      
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonElement jsonElement1 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement1).getAsBoolean();
      doReturn(false).when(jsonElement1).isJsonNull();
      JsonElement jsonElement2 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false).when(jsonObject1).has(anyString());
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject2).isJsonNull();
      doReturn(jsonElement0, jsonElement1, jsonElement1).when(jsonObject2).get(anyString());
      doReturn(jsonObject1).when(jsonObject2).getAsJsonObject(anyString());
      doReturn(true, false, false, true, false).when(jsonObject2).has(anyString());
      Playlist playlist1 = playlist_JsonUtil0.createModelObject(jsonObject2);
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getSnapshotId());
      assertFalse(playlist1.getIsCollaborative());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNotNull(playlist1);
      
      Paging<PlaylistTrack> paging0 = playlist1.getTracks();
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getSnapshotId());
      assertFalse(playlist1.getIsCollaborative());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNull(paging0);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder0.setTracks((Paging<PlaylistTrack>) null);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setName("dC");
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertNotNull(playlist_Builder3);
      
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setType(modelObjectType0);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotNull(playlist_Builder4);
      
      Followers followers0 = playlist1.getFollowers();
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist1, playlist0);
      assertNull(followers0.getTotal());
      assertNull(followers0.getHref());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getSnapshotId());
      assertFalse(playlist1.getIsCollaborative());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNotNull(followers0);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setFollowers(followers0);
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(followers0.getTotal());
      assertNull(followers0.getHref());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getSnapshotId());
      assertFalse(playlist1.getIsCollaborative());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNotNull(playlist_Builder5);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder3.setOwner((User) null);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertNotNull(playlist_Builder6);
      
      Playlist playlist2 = playlist_Builder5.build();
      assertFalse(playlist2.equals((Object)playlist0));
      assertFalse(playlist2.equals((Object)playlist1));
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist2, playlist0);
      assertNotSame(playlist2, playlist1);
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist1, playlist0);
      assertNull(followers0.getTotal());
      assertNull(followers0.getHref());
      assertNull(playlist2.getId());
      assertNull(playlist2.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist2.getType());
      assertNull(playlist2.getIsPublicAccess());
      assertEquals("dC", playlist2.getName());
      assertNull(playlist2.getDescription());
      assertNull(playlist2.getUri());
      assertNull(playlist2.getSnapshotId());
      assertNull(playlist2.getHref());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getSnapshotId());
      assertFalse(playlist1.getIsCollaborative());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNotNull(playlist2);
      
      Boolean boolean0 = playlist2.getIsPublicAccess();
      assertFalse(playlist2.equals((Object)playlist0));
      assertFalse(playlist2.equals((Object)playlist1));
      assertFalse(playlist1.equals((Object)playlist2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist2, playlist0);
      assertNotSame(playlist2, playlist1);
      assertNotSame(playlist1, playlist2);
      assertNotSame(playlist1, playlist0);
      assertNull(followers0.getTotal());
      assertNull(followers0.getHref());
      assertNull(playlist2.getId());
      assertNull(playlist2.getIsCollaborative());
      assertEquals(ModelObjectType.AUDIO_FEATURES, playlist2.getType());
      assertNull(playlist2.getIsPublicAccess());
      assertEquals("dC", playlist2.getName());
      assertNull(playlist2.getDescription());
      assertNull(playlist2.getUri());
      assertNull(playlist2.getSnapshotId());
      assertNull(playlist2.getHref());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getSnapshotId());
      assertFalse(playlist1.getIsCollaborative());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist playlist0 = playlist_Builder0.build();
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist0);
      
      Playlist.Builder playlist_Builder1 = playlist0.builder();
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setHref("`$)K<0*o:w*m>'|");
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setUri((String) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder3);
      
      Boolean boolean0 = playlist0.getIsPublicAccess();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNull(boolean0);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setPublicAccess((Boolean) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder4);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setUri((String) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder5);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder4.setSnapshotId("Hl,r6");
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder6.setDescription("");
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertNotSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertNotSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNotNull(playlist_Builder7);
      
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setAddedAt(date0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder1);
      
      Playlist playlist1 = playlist_Builder5.build();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertNotSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist0, playlist1);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertEquals("`$)K<0*o:w*m>'|", playlist1.getHref());
      assertNull(playlist1.getName());
      assertEquals("", playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsCollaborative());
      assertEquals("Hl,r6", playlist1.getSnapshotId());
      assertNotNull(playlist1);
      
      User user0 = playlist1.getOwner();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder7));
      assertFalse(playlist0.equals((Object)playlist1));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertNotSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist0, playlist1);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertEquals("`$)K<0*o:w*m>'|", playlist1.getHref());
      assertNull(playlist1.getName());
      assertEquals("", playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsCollaborative());
      assertEquals("Hl,r6", playlist1.getSnapshotId());
      assertNull(user0);
      
      Playlist.Builder playlist_Builder8 = playlist_Builder0.setOwner((User) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder5));
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertNotSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist_Builder8, playlist_Builder1);
      assertNotSame(playlist_Builder8, playlist_Builder4);
      assertNotSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder6);
      assertNotSame(playlist_Builder8, playlist_Builder5);
      assertNotNull(playlist_Builder8);
      
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder1.setAddedBy((User) null);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder2);
      
      String string0 = playlist1.getDescription();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder7));
      assertFalse(playlist0.equals((Object)playlist1));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder8));
      assertFalse(playlist1.equals((Object)playlist0));
      assertEquals("", string0);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertNotSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder4);
      assertNotSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertNotSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist0, playlist1);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertNotSame(playlist_Builder2, playlist_Builder8);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertNotSame(playlist_Builder3, playlist_Builder8);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder6);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder8);
      assertSame(playlist_Builder5, playlist_Builder7);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getName());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getId());
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertEquals("`$)K<0*o:w*m>'|", playlist1.getHref());
      assertNull(playlist1.getName());
      assertEquals("", playlist1.getDescription());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsCollaborative());
      assertEquals("Hl,r6", playlist1.getSnapshotId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        playlist_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.Playlist$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setHref("of-I|]u,C");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setDescription("of-I|]u,C");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setId("of-I|]u,C");
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotNull(playlist_Builder3);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setName("of-I|]u,C");
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotNull(playlist_Builder4);
      
      Playlist playlist0 = playlist_Builder0.build();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNull(playlist0.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("of-I|]u,C", playlist0.getHref());
      assertNull(playlist0.getIsPublicAccess());
      assertEquals("of-I|]u,C", playlist0.getName());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertEquals("of-I|]u,C", playlist0.getId());
      assertNotNull(playlist0);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder3.setName("TC");
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertNotNull(playlist_Builder5);
      
      Boolean boolean0 = playlist0.getIsCollaborative();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNull(playlist0.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("of-I|]u,C", playlist0.getHref());
      assertNull(playlist0.getIsPublicAccess());
      assertEquals("of-I|]u,C", playlist0.getName());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertEquals("of-I|]u,C", playlist0.getId());
      assertNull(boolean0);
      
      Playlist playlist1 = playlist_Builder1.build();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getSnapshotId());
      assertEquals("of-I|]u,C", playlist1.getDescription());
      assertEquals("TC", playlist1.getName());
      assertEquals("of-I|]u,C", playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist1.getId());
      assertNull(playlist1.getType());
      assertNotNull(playlist1);
      
      Playlist.Builder playlist_Builder6 = playlist0.builder();
      assertFalse(playlist0.equals((Object)playlist1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder5));
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist0, playlist1);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder4);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder2);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder5);
      assertNull(playlist0.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("of-I|]u,C", playlist0.getHref());
      assertNull(playlist0.getIsPublicAccess());
      assertEquals("of-I|]u,C", playlist0.getName());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertEquals("of-I|]u,C", playlist0.getId());
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder2.setFollowers((Followers) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder6));
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertNotSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertNotNull(playlist_Builder7);
      
      Playlist.Builder playlist_Builder8 = playlist_Builder4.setPublicAccess((Boolean) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder6));
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertNotSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder8);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertSame(playlist_Builder8, playlist_Builder2);
      assertSame(playlist_Builder8, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertSame(playlist_Builder8, playlist_Builder3);
      assertNotNull(playlist_Builder8);
      
      Playlist.Builder playlist_Builder9 = playlist0.builder();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist0.equals((Object)playlist1));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder4));
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder9);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist0, playlist1);
      assertNotSame(playlist_Builder9, playlist_Builder0);
      assertNotSame(playlist_Builder9, playlist_Builder1);
      assertNotSame(playlist_Builder9, playlist_Builder7);
      assertNotSame(playlist_Builder9, playlist_Builder6);
      assertNotSame(playlist_Builder9, playlist_Builder5);
      assertNotSame(playlist_Builder9, playlist_Builder3);
      assertNotSame(playlist_Builder9, playlist_Builder8);
      assertNotSame(playlist_Builder9, playlist_Builder2);
      assertNotSame(playlist_Builder9, playlist_Builder4);
      assertNull(playlist0.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("of-I|]u,C", playlist0.getHref());
      assertNull(playlist0.getIsPublicAccess());
      assertEquals("of-I|]u,C", playlist0.getName());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertEquals("of-I|]u,C", playlist0.getId());
      assertNotNull(playlist_Builder9);
      
      Paging<PlaylistTrack> paging0 = playlist0.getTracks();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist0.equals((Object)playlist1));
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder9);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("of-I|]u,C", playlist0.getHref());
      assertNull(playlist0.getIsPublicAccess());
      assertEquals("of-I|]u,C", playlist0.getName());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertEquals("of-I|]u,C", playlist0.getId());
      assertNull(paging0);
      
      Playlist.Builder playlist_Builder10 = playlist_Builder8.setTracks((Paging<PlaylistTrack>) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder6));
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder10);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder9);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder10);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertNotSame(playlist_Builder1, playlist_Builder9);
      assertNotSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertNotSame(playlist_Builder2, playlist_Builder9);
      assertSame(playlist_Builder2, playlist_Builder10);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder8);
      assertSame(playlist_Builder3, playlist_Builder10);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder9);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertNotSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder8);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder7);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder10);
      assertSame(playlist_Builder4, playlist_Builder7);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder6);
      assertNotSame(playlist_Builder4, playlist_Builder9);
      assertSame(playlist_Builder4, playlist_Builder8);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertSame(playlist_Builder8, playlist_Builder2);
      assertNotSame(playlist_Builder8, playlist_Builder9);
      assertSame(playlist_Builder8, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertSame(playlist_Builder8, playlist_Builder3);
      assertSame(playlist_Builder8, playlist_Builder10);
      assertSame(playlist_Builder10, playlist_Builder0);
      assertSame(playlist_Builder10, playlist_Builder1);
      assertSame(playlist_Builder10, playlist_Builder7);
      assertSame(playlist_Builder10, playlist_Builder5);
      assertSame(playlist_Builder10, playlist_Builder8);
      assertSame(playlist_Builder10, playlist_Builder4);
      assertNotSame(playlist_Builder10, playlist_Builder9);
      assertSame(playlist_Builder10, playlist_Builder2);
      assertSame(playlist_Builder10, playlist_Builder3);
      assertNotSame(playlist_Builder10, playlist_Builder6);
      assertNotNull(playlist_Builder10);
      
      String string0 = playlist0.getDescription();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist0.equals((Object)playlist1));
      assertEquals("of-I|]u,C", string0);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder10);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder9);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getIsCollaborative());
      assertEquals("of-I|]u,C", playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertEquals("of-I|]u,C", playlist0.getHref());
      assertNull(playlist0.getIsPublicAccess());
      assertEquals("of-I|]u,C", playlist0.getName());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertEquals("of-I|]u,C", playlist0.getId());
      assertNotNull(string0);
      
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setAddedAt(date0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).has(anyString());
      boolean boolean0 = playlist_JsonUtil0.hasAndNotNull(jsonObject0, "h@");
      assertFalse(boolean0);
      
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject1).isJsonNull();
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject1);
      assertNull(playlist0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(playlist0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setHref("Xz^9");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder0.setName("");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNotNull(playlist_Builder2);
      
      Playlist playlist0 = playlist_Builder2.build();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist0);
      
      String string0 = playlist0.getName();
      assertEquals("", string0);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(string0);
      
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Boolean boolean0 = playlist0.getIsCollaborative();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(boolean0);
      
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setIsLocal((Boolean) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder1);
      
      User user0 = playlist0.getOwner();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(user0);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setOwner((User) null);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotNull(playlist_Builder3);
      
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder0.setTrack((Track) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertNotNull(playlistTrack_Builder2);
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder3 = playlistTrack_Builder2.setAddedAt(date0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder3);
      
      Boolean boolean1 = playlist0.getIsCollaborative();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(boolean1);
      
      PlaylistTrack.Builder playlistTrack_Builder4 = playlistTrack_Builder3.setIsLocal((Boolean) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder4);
      
      PlaylistTrack.Builder playlistTrack_Builder5 = playlistTrack_Builder4.setTrack((Track) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder5);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder5);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder5);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder5);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder4);
      assertNotNull(playlistTrack_Builder5);
      
      String string1 = playlist0.getId();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string1);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder0.setId((String) null);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotNull(playlist_Builder4);
      
      ExternalUrl externalUrl0 = playlist0.getExternalUrls();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(externalUrl0);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder0.setExternalUrls((ExternalUrl) null);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertNotNull(playlist_Builder5);
      
      Paging<PlaylistTrack> paging0 = playlist0.getTracks();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(paging0);
      
      Image[] imageArray0 = playlist0.getImages();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(imageArray0);
      
      Paging<PlaylistTrack> paging1 = playlist0.getTracks();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(paging1);
      
      User user1 = playlist0.getOwner();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(user1);
      
      String string2 = playlist0.getSnapshotId();
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertEquals("", playlist0.getName());
      assertEquals("Xz^9", playlist0.getHref());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string2);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder2.setId((String) null);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertNotNull(playlist_Builder6);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Track track0 = mock(Track.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setTrack(track0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder1);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setName("}!(>~}ZOsmq'36/#Eag");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Track track1 = mock(Track.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder0.setTrack(track1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder2);
      
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder3 = playlistTrack_Builder0.setAddedAt(date0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder3, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder3);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setHref(")c!`]l{ (N1E");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      Playlist playlist0 = playlist_Builder2.build();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertEquals("}!(>~}ZOsmq'36/#Eag", playlist0.getName());
      assertEquals(")c!`]l{ (N1E", playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNotNull(playlist0);
      
      User user0 = playlist0.getOwner();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertEquals("}!(>~}ZOsmq'36/#Eag", playlist0.getName());
      assertEquals(")c!`]l{ (N1E", playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(user0);
      
      User user1 = playlist0.getOwner();
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertEquals("}!(>~}ZOsmq'36/#Eag", playlist0.getName());
      assertEquals(")c!`]l{ (N1E", playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(user1);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setOwner((User) null);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotNull(playlist_Builder3);
      
      PlaylistTrack.Builder playlistTrack_Builder4 = playlistTrack_Builder0.setAddedBy((User) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder2);
      assertNotNull(playlistTrack_Builder4);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder1.setId("{/EV'VKSl^(*@3");
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertNotNull(playlist_Builder4);
      
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist1 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNotNull(playlist1);
      
      Paging<PlaylistTrack> paging0 = playlist1.getTracks();
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(paging0);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder2.setTracks((Paging<PlaylistTrack>) null);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotNull(playlist_Builder5);
      
      String string0 = playlist0.getHref();
      assertFalse(playlist0.equals((Object)playlist1));
      assertEquals(")c!`]l{ (N1E", string0);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist0, playlist1);
      assertEquals("}!(>~}ZOsmq'36/#Eag", playlist0.getName());
      assertEquals(")c!`]l{ (N1E", playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNotNull(string0);
      
      PlaylistTrack.Builder playlistTrack_Builder5 = playlistTrack_Builder4.setAddedAt((Date) null);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder5);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder4);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder5, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder5);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder3);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder4, playlistTrack_Builder2);
      assertNotNull(playlistTrack_Builder5);
      
      String string1 = playlist1.getHref();
      assertFalse(playlist1.equals((Object)playlist0));
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getId());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getName());
      assertNull(playlist1.getHref());
      assertNull(string1);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder2.setName("");
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotNull(playlist_Builder6);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      assertNotNull(playlistTrack_Builder0);
      
      Track track0 = mock(Track.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setTrack(track0);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNotNull(playlistTrack_Builder1);
      
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNotNull(playlist0);
      
      Paging<PlaylistTrack> paging0 = playlist0.getTracks();
      assertNull(playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(paging0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setTracks((Paging<PlaylistTrack>) null);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).toString();
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setOwner(user0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotNull(playlist_Builder2);
      
      PlaylistTrack playlistTrack0 = playlistTrack_Builder1.build();
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertNull(playlistTrack0.getIsLocal());
      assertNotNull(playlistTrack0);
      
      Playlist playlist1 = playlist_Builder2.build();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNotNull(playlist1);
      
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setImages(imageArray0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertEquals(1, imageArray0.length);
      assertNotNull(playlist_Builder3);
      
      User user1 = playlist1.getOwner();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(user1, user0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(user1.getBirthdate());
      assertNull(user1.getHref());
      assertNull(user1.getCountry());
      assertNull(user1.getId());
      assertNull(user1.getType());
      assertNull(user1.getUri());
      assertNull(user1.getEmail());
      assertNull(user1.getProduct());
      assertNull(user1.getDisplayName());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNotNull(user1);
      
      Boolean boolean0 = playlist1.getIsCollaborative();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNull(boolean0);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder2.setCollaborative((Boolean) null);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotNull(playlist_Builder4);
      
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder1.setAddedBy(user1);
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlistTrack_Builder0, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder0, playlistTrack_Builder1);
      assertSame(user1, user0);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder2);
      assertSame(playlistTrack_Builder1, playlistTrack_Builder0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder1);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(user1.getBirthdate());
      assertNull(user1.getHref());
      assertNull(user1.getCountry());
      assertNull(user1.getId());
      assertNull(user1.getType());
      assertNull(user1.getUri());
      assertNull(user1.getEmail());
      assertNull(user1.getProduct());
      assertNull(user1.getDisplayName());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNotNull(playlistTrack_Builder2);
      
      String string0 = playlist1.getUri();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNull(string0);
      
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      Playlist.Builder playlist_Builder5 = playlist_Builder3.setType(modelObjectType0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertEquals(1, imageArray0.length);
      assertNotNull(playlist_Builder5);
      
      Boolean boolean1 = playlist1.getIsCollaborative();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNull(boolean1);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder0.setPublicAccess((Boolean) null);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder2.setOwner(user1);
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(user1, user0);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(user1.getBirthdate());
      assertNull(user1.getHref());
      assertNull(user1.getCountry());
      assertNull(user1.getId());
      assertNull(user1.getType());
      assertNull(user1.getUri());
      assertNull(user1.getEmail());
      assertNull(user1.getProduct());
      assertNull(user1.getDisplayName());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNotNull(playlist_Builder7);
      
      Paging<PlaylistTrack> paging1 = playlist0.getTracks();
      assertFalse(playlist0.equals((Object)playlist1));
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(paging1);
      
      Playlist.Builder playlist_Builder8 = playlist_Builder7.setTracks((Paging<PlaylistTrack>) null);
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(user1, user0);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertSame(playlist_Builder7, playlist_Builder8);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder8);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder5);
      assertSame(playlist_Builder8, playlist_Builder2);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertSame(playlist_Builder8, playlist_Builder0);
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(user1.getBirthdate());
      assertNull(user1.getHref());
      assertNull(user1.getCountry());
      assertNull(user1.getId());
      assertNull(user1.getType());
      assertNull(user1.getUri());
      assertNull(user1.getEmail());
      assertNull(user1.getProduct());
      assertNull(user1.getDisplayName());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
      assertNotNull(playlist_Builder8);
      
      playlist1.getType();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder6);
      assertSame(playlist_Builder1, playlist_Builder8);
      assertSame(playlist_Builder1, playlist_Builder7);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder8);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getName());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getSnapshotId());
      assertNull(playlist1.getId());
      assertNull(playlist1.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlaylistTrack.JsonUtil playlistTrack_JsonUtil0 = new PlaylistTrack.JsonUtil();
      assertNotNull(playlistTrack_JsonUtil0);
      
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setName("/");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(playlist0.getUri());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getDescription());
      assertNotNull(playlist0);
      
      Paging<PlaylistTrack> paging0 = playlist0.getTracks();
      assertNull(playlist0.getUri());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getIsCollaborative());
      assertNull(playlist0.getType());
      assertNull(playlist0.getId());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getName());
      assertNull(playlist0.getDescription());
      assertNull(paging0);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setTracks((Paging<PlaylistTrack>) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setId("*}lDFs,87hyo*0&U^hE");
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertNotNull(playlist_Builder3);
      
      Image[] imageArray0 = new Image[0];
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setImages(imageArray0);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertEquals(0, imageArray0.length);
      assertNotNull(playlist_Builder4);
      
      Playlist playlist1 = playlist_Builder4.build();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist1, playlist0);
      assertEquals(0, imageArray0.length);
      assertNull(playlist1.getSnapshotId());
      assertEquals("*}lDFs,87hyo*0&U^hE", playlist1.getId());
      assertEquals("/", playlist1.getName());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getType());
      assertNotNull(playlist1);
      
      Image[] imageArray1 = playlist1.getImages();
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(imageArray0, imageArray1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist1, playlist0);
      assertSame(imageArray1, imageArray0);
      assertEquals(0, imageArray0.length);
      assertEquals(0, imageArray1.length);
      assertNull(playlist1.getSnapshotId());
      assertEquals("*}lDFs,87hyo*0&U^hE", playlist1.getId());
      assertEquals("/", playlist1.getName());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getDescription());
      assertNull(playlist1.getType());
      assertNotNull(imageArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      assertNotNull(playlist_Builder0);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setName("NR");
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotNull(playlist_Builder1);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist0);
      
      User user0 = playlist0.getOwner();
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(user0);
      
      Playlist.Builder playlist_Builder2 = playlist0.builder();
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder1));
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertNotSame(playlist_Builder2, playlist_Builder1);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder1.setOwner((User) null);
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotNull(playlist_Builder3);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setDescription("NR");
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotNull(playlist_Builder4);
      
      Playlist playlist1 = playlist_Builder4.build();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertEquals("NR", playlist1.getName());
      assertEquals("NR", playlist1.getDescription());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNotNull(playlist1);
      
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setHref("NR");
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder3);
      assertSame(playlist_Builder5, playlist_Builder4);
      assertSame(playlist_Builder5, playlist_Builder0);
      assertSame(playlist_Builder5, playlist_Builder1);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotNull(playlist_Builder5);
      
      String string0 = playlist1.getHref();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertEquals("NR", playlist1.getName());
      assertEquals("NR", playlist1.getDescription());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNull(string0);
      
      String string1 = playlist1.getUri();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertEquals("NR", playlist1.getName());
      assertEquals("NR", playlist1.getDescription());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNull(string1);
      
      Image[] imageArray0 = playlist0.getImages();
      assertFalse(playlist0.equals((Object)playlist1));
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(imageArray0);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder2.setUri("B0iV?q9>>{^");
      assertFalse(playlist0.equals((Object)playlist1));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder4));
      assertNotSame(playlist0, playlist1);
      assertNotSame(playlist_Builder2, playlist_Builder4);
      assertNotSame(playlist_Builder2, playlist_Builder3);
      assertNotSame(playlist_Builder2, playlist_Builder0);
      assertNotSame(playlist_Builder2, playlist_Builder5);
      assertNotSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder6, playlist_Builder2);
      assertNotSame(playlist_Builder6, playlist_Builder5);
      assertNotSame(playlist_Builder6, playlist_Builder0);
      assertNotSame(playlist_Builder6, playlist_Builder1);
      assertNotSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder4);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder6);
      
      Followers followers0 = playlist0.getFollowers();
      assertFalse(playlist0.equals((Object)playlist1));
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(followers0);
      
      String string2 = playlist1.getName();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder6));
      assertFalse(playlist1.equals((Object)playlist0));
      assertEquals("NR", string2);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertEquals("NR", playlist1.getName());
      assertEquals("NR", playlist1.getDescription());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNotNull(string2);
      
      Paging<PlaylistTrack> paging0 = playlist0.getTracks();
      assertFalse(playlist0.equals((Object)playlist1));
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(paging0);
      
      Boolean boolean0 = playlist1.getIsCollaborative();
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder1.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder3.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder4.equals((Object)playlist_Builder6));
      assertFalse(playlist1.equals((Object)playlist0));
      assertSame(playlist_Builder0, playlist_Builder3);
      assertNotSame(playlist_Builder0, playlist_Builder2);
      assertNotSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNotSame(playlist_Builder1, playlist_Builder6);
      assertNotSame(playlist_Builder1, playlist_Builder2);
      assertSame(playlist_Builder1, playlist_Builder5);
      assertSame(playlist_Builder1, playlist_Builder3);
      assertSame(playlist_Builder1, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNotSame(playlist_Builder3, playlist_Builder2);
      assertNotSame(playlist_Builder3, playlist_Builder6);
      assertSame(playlist_Builder3, playlist_Builder4);
      assertSame(playlist_Builder3, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNotSame(playlist_Builder4, playlist_Builder2);
      assertNotSame(playlist_Builder4, playlist_Builder6);
      assertSame(playlist_Builder4, playlist_Builder5);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertNotSame(playlist1, playlist0);
      assertNull(playlist1.getType());
      assertEquals("NR", playlist1.getName());
      assertEquals("NR", playlist1.getDescription());
      assertNull(playlist1.getIsPublicAccess());
      assertNull(playlist1.getId());
      assertNull(playlist1.getIsCollaborative());
      assertNull(playlist1.getHref());
      assertNull(playlist1.getUri());
      assertNull(playlist1.getSnapshotId());
      assertNull(boolean0);
      
      String string3 = playlist0.getId();
      assertFalse(playlist0.equals((Object)playlist1));
      assertNotSame(playlist0, playlist1);
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getType());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getName());
      assertNull(playlist0.getId());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      assertNotNull(playlist_JsonUtil0);
      
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist0);
      
      Playlist.Builder playlist_Builder0 = playlist0.builder();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder0);
      
      playlist0.getType();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      
      String string0 = playlist0.getDescription();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string0);
      
      String string1 = playlist0.getDescription();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string1);
      
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setHref((String) null);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder1, playlist_Builder0);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder1);
      
      Playlist.Builder playlist_Builder2 = playlist_Builder0.setId((String) null);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder2);
      
      Playlist playlist1 = playlist_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(playlist1);
      
      String string2 = playlist0.getId();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string2);
      
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setSnapshotId((String) null);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertSame(playlist_Builder3, playlist_Builder2);
      assertSame(playlist_Builder3, playlist_Builder0);
      assertSame(playlist_Builder3, playlist_Builder1);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder3);
      
      Boolean boolean0 = playlist0.getIsPublicAccess();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(boolean0);
      
      Playlist.Builder playlist_Builder4 = playlist_Builder0.setCollaborative((Boolean) null);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder0);
      assertSame(playlist_Builder4, playlist_Builder2);
      assertSame(playlist_Builder4, playlist_Builder1);
      assertSame(playlist_Builder4, playlist_Builder3);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder4);
      
      Playlist.Builder playlist_Builder5 = playlist0.builder();
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertNotSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder5);
      
      Followers followers0 = playlist0.getFollowers();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(followers0);
      
      Playlist.Builder playlist_Builder6 = playlist_Builder0.setFollowers((Followers) null);
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertNotSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder6);
      
      Playlist.Builder playlist_Builder7 = playlist_Builder2.setUri("type");
      assertFalse(playlist_Builder7.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder2.equals((Object)playlist_Builder5));
      assertSame(playlist_Builder7, playlist_Builder3);
      assertSame(playlist_Builder7, playlist_Builder6);
      assertSame(playlist_Builder7, playlist_Builder0);
      assertSame(playlist_Builder7, playlist_Builder4);
      assertSame(playlist_Builder7, playlist_Builder2);
      assertSame(playlist_Builder7, playlist_Builder1);
      assertNotSame(playlist_Builder7, playlist_Builder5);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder6);
      assertSame(playlist_Builder2, playlist_Builder3);
      assertSame(playlist_Builder2, playlist_Builder0);
      assertSame(playlist_Builder2, playlist_Builder4);
      assertSame(playlist_Builder2, playlist_Builder1);
      assertNotSame(playlist_Builder2, playlist_Builder5);
      assertSame(playlist_Builder2, playlist_Builder7);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder7);
      
      Paging<PlaylistTrack> paging0 = playlist0.getTracks();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(paging0);
      
      Playlist.Builder playlist_Builder8 = playlist_Builder0.setFollowers((Followers) null);
      assertFalse(playlist_Builder8.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertSame(playlist_Builder8, playlist_Builder7);
      assertSame(playlist_Builder8, playlist_Builder1);
      assertSame(playlist_Builder8, playlist_Builder3);
      assertSame(playlist_Builder8, playlist_Builder0);
      assertNotSame(playlist_Builder8, playlist_Builder5);
      assertSame(playlist_Builder8, playlist_Builder2);
      assertSame(playlist_Builder8, playlist_Builder6);
      assertSame(playlist_Builder8, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder8);
      
      Boolean boolean1 = playlist0.getIsCollaborative();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(boolean1);
      
      Image[] imageArray0 = playlist0.getImages();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(imageArray0);
      
      String string3 = playlist0.getHref();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(string3);
      
      Playlist.Builder playlist_Builder9 = playlist_Builder6.setUri((String) null);
      assertFalse(playlist_Builder6.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder0.equals((Object)playlist_Builder5));
      assertFalse(playlist_Builder9.equals((Object)playlist_Builder5));
      assertSame(playlist_Builder6, playlist_Builder2);
      assertSame(playlist_Builder6, playlist_Builder4);
      assertSame(playlist_Builder6, playlist_Builder7);
      assertSame(playlist_Builder6, playlist_Builder1);
      assertSame(playlist_Builder6, playlist_Builder3);
      assertSame(playlist_Builder6, playlist_Builder9);
      assertNotSame(playlist_Builder6, playlist_Builder5);
      assertSame(playlist_Builder6, playlist_Builder8);
      assertSame(playlist_Builder6, playlist_Builder0);
      assertSame(playlist_Builder0, playlist_Builder6);
      assertSame(playlist_Builder0, playlist_Builder3);
      assertSame(playlist_Builder0, playlist_Builder2);
      assertSame(playlist_Builder0, playlist_Builder8);
      assertSame(playlist_Builder0, playlist_Builder4);
      assertSame(playlist_Builder0, playlist_Builder9);
      assertSame(playlist_Builder0, playlist_Builder7);
      assertSame(playlist_Builder0, playlist_Builder1);
      assertNotSame(playlist_Builder0, playlist_Builder5);
      assertSame(playlist_Builder9, playlist_Builder7);
      assertSame(playlist_Builder9, playlist_Builder1);
      assertSame(playlist_Builder9, playlist_Builder4);
      assertSame(playlist_Builder9, playlist_Builder6);
      assertNotSame(playlist_Builder9, playlist_Builder5);
      assertSame(playlist_Builder9, playlist_Builder0);
      assertSame(playlist_Builder9, playlist_Builder3);
      assertSame(playlist_Builder9, playlist_Builder2);
      assertSame(playlist_Builder9, playlist_Builder8);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder9);
      
      User user0 = playlist0.getOwner();
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNull(user0);
      
      Playlist.Builder playlist_Builder10 = playlist_Builder5.setOwner((User) null);
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder9));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder10.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder0));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder2));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder4));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder1));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder7));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder8));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder6));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder3));
      assertFalse(playlist_Builder5.equals((Object)playlist_Builder9));
      assertNotSame(playlist_Builder10, playlist_Builder0);
      assertNotSame(playlist_Builder10, playlist_Builder9);
      assertNotSame(playlist_Builder10, playlist_Builder2);
      assertNotSame(playlist_Builder10, playlist_Builder8);
      assertSame(playlist_Builder10, playlist_Builder5);
      assertNotSame(playlist_Builder10, playlist_Builder3);
      assertNotSame(playlist_Builder10, playlist_Builder7);
      assertNotSame(playlist_Builder10, playlist_Builder1);
      assertNotSame(playlist_Builder10, playlist_Builder4);
      assertNotSame(playlist_Builder10, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder0);
      assertNotSame(playlist_Builder5, playlist_Builder2);
      assertSame(playlist_Builder5, playlist_Builder10);
      assertNotSame(playlist_Builder5, playlist_Builder4);
      assertNotSame(playlist_Builder5, playlist_Builder1);
      assertNotSame(playlist_Builder5, playlist_Builder7);
      assertNotSame(playlist_Builder5, playlist_Builder8);
      assertNotSame(playlist_Builder5, playlist_Builder6);
      assertNotSame(playlist_Builder5, playlist_Builder3);
      assertNotSame(playlist_Builder5, playlist_Builder9);
      assertNull(playlist0.getName());
      assertNull(playlist0.getHref());
      assertNull(playlist0.getSnapshotId());
      assertNull(playlist0.getType());
      assertNull(playlist0.getIsPublicAccess());
      assertNull(playlist0.getUri());
      assertNull(playlist0.getId());
      assertNull(playlist0.getDescription());
      assertNull(playlist0.getIsCollaborative());
      assertNotNull(playlist_Builder10);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setDescription("");
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      playlist_Builder0.setHref("");
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      playlist0.getIsPublicAccess();
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setCollaborative((Boolean) null);
      playlist0.getFollowers();
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setFollowers((Followers) null);
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setImages(imageArray0);
      Playlist playlist1 = playlist_Builder4.build();
      playlist1.getImages();
      Playlist.Builder playlist_Builder5 = playlist_Builder3.setHref("");
      playlist0.getType();
      playlist1.getImages();
      playlist_Builder3.setSnapshotId("");
      playlist1.getFollowers();
      playlist1.builder();
      playlist0.getId();
      Playlist.Builder playlist_Builder6 = playlist_Builder1.setName((String) null);
      assertSame(playlist_Builder6, playlist_Builder5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      Class<Object> class0 = Object.class;
      playlist_JsonUtil0.createModelObjectArray(jsonArray0, class0);
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      playlist0.getIsPublicAccess();
      playlist0.getType();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist playlist0 = playlist_Builder0.build();
      playlist0.getOwner();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setOwner((User) null);
      playlist0.getIsCollaborative();
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      Playlist.Builder playlist_Builder2 = playlist_Builder0.setType(modelObjectType0);
      Playlist.Builder playlist_Builder3 = playlist_Builder1.setPublicAccess((Boolean) null);
      ModelObjectType modelObjectType1 = ModelObjectType.GENRE;
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setType(modelObjectType1);
      playlist0.builder();
      playlist0.getTracks();
      playlist_Builder4.setTracks((Paging<PlaylistTrack>) null);
      playlist0.builder();
      playlist_Builder4.setId(">qZ{-[\"!/");
      playlist0.getSnapshotId();
      playlist0.getSnapshotId();
      playlist0.getSnapshotId();
      playlist0.getDescription();
      playlist0.getIsCollaborative();
      Playlist.Builder playlist_Builder5 = playlist_Builder2.setPublicAccess((Boolean) null);
      assertSame(playlist_Builder5, playlist_Builder3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setType(modelObjectType0);
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setDescription("%,S1)/|d&Dt;");
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setUri("%,S1)/|d&Dt;");
      Playlist playlist0 = playlist_Builder0.build();
      playlist0.getIsPublicAccess();
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setPublicAccess((Boolean) null);
      playlist0.getFollowers();
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setFollowers((Followers) null);
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setName("");
      assertSame(playlist_Builder6, playlist_Builder2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setDescription("");
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      playlist0.getTracks();
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setTracks((Paging<PlaylistTrack>) null);
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setType(modelObjectType0);
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setUri("");
      Playlist playlist1 = playlist_Builder4.build();
      String string0 = playlist1.getUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setHref("LXn5`");
      assertSame(playlist_Builder1, playlist_Builder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist playlist0 = playlist_Builder0.build();
      Playlist.Builder playlist_Builder1 = playlist0.builder();
      playlist0.getExternalUrls();
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setExternalUrls((ExternalUrl) null);
      playlist0.getOwner();
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setOwner((User) null);
      Image[] imageArray0 = new Image[0];
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setImages(imageArray0);
      playlist0.getIsCollaborative();
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setCollaborative((Boolean) null);
      playlist_Builder1.setDescription("");
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setSnapshotId("");
      playlist0.builder();
      playlist_Builder4.setImages(imageArray0);
      playlist_Builder5.setId("Myanmar");
      playlist0.getImages();
      playlist0.getName();
      playlist_Builder1.setId((String) null);
      playlist0.getFollowers();
      playlist_Builder6.setFollowers((Followers) null);
      String string0 = playlist0.getUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist playlist0 = playlist_Builder0.build();
      playlist0.getIsPublicAccess();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setPublicAccess((Boolean) null);
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setUri("]D");
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setDescription("");
      assertSame(playlist_Builder0, playlist_Builder3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaylistTrack.JsonUtil playlistTrack_JsonUtil0 = new PlaylistTrack.JsonUtil();
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist playlist0 = playlist_Builder0.build();
      playlist0.getIsCollaborative();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setPublicAccess((Boolean) null);
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setType(modelObjectType0);
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setSnapshotId("-&ip");
      Playlist.Builder playlist_Builder4 = playlist_Builder3.setDescription("");
      Playlist.Builder playlist_Builder5 = playlist_Builder4.setName("");
      Playlist.Builder playlist_Builder6 = playlist_Builder5.setType(modelObjectType0);
      assertSame(playlist_Builder1, playlist_Builder6);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      playlist0.getFollowers();
      playlist0.builder();
      playlist0.getDescription();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      Playlist playlist1 = playlist_JsonUtil0.createModelObject(jsonObject1);
      playlist1.builder();
      playlist1.getType();
      playlist0.getHref();
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject2).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject2).has(anyString());
      Playlist playlist2 = playlist_JsonUtil0.createModelObject(jsonObject2);
      assertFalse(playlist2.equals((Object)playlist0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setType(modelObjectType0);
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      playlist0.getTracks();
      Playlist.Builder playlist_Builder2 = playlist_Builder1.setTracks((Paging<PlaylistTrack>) null);
      playlist_Builder1.setSnapshotId("Gh)4");
      Playlist.Builder playlist_Builder3 = playlist_Builder2.setSnapshotId("Gh)4");
      assertSame(playlist_Builder0, playlist_Builder3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlaylistTrack.JsonUtil playlistTrack_JsonUtil0 = new PlaylistTrack.JsonUtil();
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist playlist0 = playlist_Builder0.build();
      playlist0.getOwner();
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setAddedBy((User) null);
      playlist0.getIsPublicAccess();
      PlaylistTrack.Builder playlistTrack_Builder2 = playlistTrack_Builder1.setIsLocal((Boolean) null);
      playlistTrack_Builder2.build();
      playlist0.getType();
      playlist0.builder();
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      playlistTrack_Builder1.build();
      playlist0.getImages();
      playlist0.getImages();
      playlist0.getUri();
      playlist0.getOwner();
      playlist0.getIsCollaborative();
      playlist_Builder0.build();
      playlist_Builder0.setCollaborative((Boolean) null);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      PlaylistTrack.Builder playlistTrack_Builder3 = playlistTrack_Builder2.setAddedAt(date0);
      assertSame(playlistTrack_Builder2, playlistTrack_Builder3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      Playlist.Builder playlist_Builder0 = playlist0.builder();
      playlist0.builder();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      Playlist playlist1 = playlist_JsonUtil0.createModelObject(jsonObject1);
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject2).has(anyString());
      playlist_JsonUtil0.hasAndNotNull(jsonObject2, "");
      playlist_Builder0.setUri("");
      playlist0.getFollowers();
      playlist1.builder();
      playlist0.builder();
      playlist1.getTracks();
      Playlist.Builder playlist_Builder1 = playlist_Builder0.setTracks((Paging<PlaylistTrack>) null);
      playlist_Builder0.setFollowers((Followers) null);
      playlist0.getFollowers();
      playlist_Builder0.setFollowers((Followers) null);
      playlist0.getFollowers();
      playlist0.getName();
      playlist0.builder();
      playlist0.getId();
      playlist0.getHref();
      playlist_Builder1.setTracks((Paging<PlaylistTrack>) null);
      playlist1.getOwner();
      Image[] imageArray0 = playlist0.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Playlist.Builder playlist_Builder0 = new Playlist.Builder();
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonElement jsonElement1 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(jsonElement1).getAsBoolean();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(jsonElement1).getAsString();
      doReturn(false, false, false, false, false).when(jsonElement1).isJsonNull();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn((Set) null).when(jsonObject0).entrySet();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject2).isJsonNull();
      doReturn(jsonElement0, jsonElement1, jsonElement1, jsonElement1, jsonElement1).when(jsonObject2).get(anyString());
      doReturn(jsonArray0).when(jsonObject2).getAsJsonArray(anyString());
      doReturn(jsonObject0, jsonObject1, (JsonObject) null).when(jsonObject2).getAsJsonObject(anyString());
      doReturn(true, true, true, false, true).when(jsonObject2).has(anyString());
      // Undeclared exception!
      try { 
        playlist_JsonUtil0.createModelObject(jsonObject2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.Playlist$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlaylistTrack.Builder playlistTrack_Builder0 = new PlaylistTrack.Builder();
      Track track0 = mock(Track.class, new ViolatedAssumptionAnswer());
      Playlist.JsonUtil playlist_JsonUtil0 = new Playlist.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      Playlist playlist0 = playlist_JsonUtil0.createModelObject(jsonObject0);
      playlist0.getOwner();
      playlistTrack_Builder0.setAddedBy((User) null);
      PlaylistTrack.Builder playlistTrack_Builder1 = playlistTrack_Builder0.setTrack(track0);
      Playlist.JsonUtil playlist_JsonUtil1 = new Playlist.JsonUtil();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      Playlist playlist1 = playlist_JsonUtil1.createModelObject(jsonObject1);
      playlist1.builder();
      playlist1.getOwner();
      playlist1.builder();
      playlist1.builder();
      playlistTrack_Builder1.setAddedBy((User) null);
      playlist1.getTracks();
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject2).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject2).has(anyString());
      Playlist playlist2 = playlist_JsonUtil1.createModelObject(jsonObject2);
      playlist0.getImages();
      String string0 = playlist2.getSnapshotId();
      assertNull(string0);
  }
}
