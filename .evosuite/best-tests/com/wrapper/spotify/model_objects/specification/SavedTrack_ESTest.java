/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:41:02 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.SavedTrack;
import com.wrapper.spotify.model_objects.specification.Track;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SavedTrack_ESTest extends SavedTrack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SavedTrack.Builder savedTrack_Builder0 = new SavedTrack.Builder();
      SavedTrack.JsonUtil savedTrack_JsonUtil0 = new SavedTrack.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      SavedTrack savedTrack0 = savedTrack_JsonUtil0.createModelObject(jsonObject0);
      SavedTrack.Builder savedTrack_Builder1 = savedTrack0.builder();
      SavedTrack savedTrack1 = savedTrack_Builder1.build();
      savedTrack1.getTrack();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonElement0).isJsonNull();
      System.setCurrentTimeMillis((-2L));
      JsonElement jsonElement1 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(jsonElement0).when(jsonObject1).get(anyString());
      doReturn(true, false).when(jsonObject1).has(anyString());
      SavedTrack savedTrack2 = savedTrack_JsonUtil0.createModelObject(jsonObject1);
      assertNotSame(savedTrack2, savedTrack1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SavedTrack.JsonUtil savedTrack_JsonUtil0 = new SavedTrack.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        savedTrack_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.SavedTrack$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SavedTrack.JsonUtil savedTrack_JsonUtil0 = new SavedTrack.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      SavedTrack savedTrack0 = savedTrack_JsonUtil0.createModelObject(jsonObject0);
      assertNull(savedTrack0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SavedTrack.JsonUtil savedTrack_JsonUtil0 = new SavedTrack.JsonUtil();
      SavedTrack savedTrack0 = savedTrack_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(savedTrack0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SavedTrack.Builder savedTrack_Builder0 = new SavedTrack.Builder();
      SavedTrack savedTrack0 = savedTrack_Builder0.build();
      Date date0 = savedTrack0.getAddedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SavedTrack.Builder savedTrack_Builder0 = new SavedTrack.Builder();
      SavedTrack.Builder savedTrack_Builder1 = savedTrack_Builder0.setAddedAt((Date) null);
      assertSame(savedTrack_Builder0, savedTrack_Builder1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SavedTrack.Builder savedTrack_Builder0 = new SavedTrack.Builder();
      SavedTrack.Builder savedTrack_Builder1 = savedTrack_Builder0.setTrack((Track) null);
      assertSame(savedTrack_Builder1, savedTrack_Builder0);
  }
}
