/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 20:44:40 GMT 2019
 */

package com.wrapper.spotify.requests;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.wrapper.spotify.IHttpManager;
import com.wrapper.spotify.SpotifyHttpManager;
import com.wrapper.spotify.requests.authorization.client_credentials.ClientCredentialsRequest;
import com.wrapper.spotify.requests.data.albums.GetAlbumsTracksRequest;
import com.wrapper.spotify.requests.data.browse.GetListOfCategoriesRequest;
import com.wrapper.spotify.requests.data.browse.GetRecommendationsRequest;
import com.wrapper.spotify.requests.data.tracks.GetAudioAnalysisForTrackRequest;
import com.wrapper.spotify.requests.data.tracks.GetAudioFeaturesForTrackRequest;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.NameValuePair;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractRequest_ESTest extends AbstractRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("_2op}<esz7e", "[@m~UaBr*");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("_2op}<esz7e");
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          InputStreamEntity inputStreamEntity0 = new InputStreamEntity(pipedInputStream0, 206);
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder2 = clientCredentialsRequest_Builder1.setBody(inputStreamEntity0);
          Integer integer0 = new Integer(1);
          clientCredentialsRequest_Builder2.setQueryParameter("_2op}<esz7e", integer0);
          Integer integer1 = new Integer(206);
          Integer.getInteger("[@m~UaBr*", 206);
          Integer.getInteger("_2op}<esz7e", 206);
          Integer.divideUnsigned(206, 206);
          clientCredentialsRequest_Builder2.setScheme("_2op}<esz7e");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder3 = new ClientCredentialsRequest.Builder("_2op}<esz7e", "[@m~UaBr*");
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          clientCredentialsRequest_Builder1.setPath("Content-Type");
          ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.getJson();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:443\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:339)
             // org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
             // org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:373)
             // org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:381)
             // org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:237)
             // org.apache.http.impl.client.cache.CachingExec.callBackend(CachingExec.java:592)
             // org.apache.http.impl.client.cache.CachingExec.handleCacheMiss(CachingExec.java:356)
             // org.apache.http.impl.client.cache.CachingExec.execute(CachingExec.java:275)
             // org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
             // org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
             // org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:111)
             // org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
             // org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
             // com.wrapper.spotify.SpotifyHttpManager.execute(SpotifyHttpManager.java:224)
             // com.wrapper.spotify.SpotifyHttpManager.get(SpotifyHttpManager.java:154)
             // com.wrapper.spotify.requests.AbstractRequest.getJson(AbstractRequest.java:117)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder(">Wf:G})P!:kyo84V'1", ">Wf:G})P!:kyo84V'1");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.setPath(">Wf:G})P!:kyo84V'1");
      ContentType contentType0 = ContentType.APPLICATION_OCTET_STREAM;
      clientCredentialsRequest_Builder0.setContentType(contentType0);
      ClientCredentialsRequest clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder1);
      List<NameValuePair> list0 = clientCredentialsRequest0.getBodyParameters();
      clientCredentialsRequest0.bodyParametersToJson(list0);
      clientCredentialsRequest_Builder0.setScheme("&&E._^\".uZ<KQ64 {(K");
      ClientCredentialsRequest clientCredentialsRequest1 = new ClientCredentialsRequest(clientCredentialsRequest_Builder0);
      // Undeclared exception!
      try { 
        clientCredentialsRequest1.postJson();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.requests.data.playlists.ReplacePlaylistsTracksRequest$1", "com.wrapper.spotify.requests.data.playlists.ReplacePlaylistsTracksRequest$1");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setQueryParameter((String) null, (GetAudioAnalysisForTrackRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder((String) null, (String) null);
      clientCredentialsRequest_Builder0.setScheme("com.wrapper.spotify.requests.AbstractRequest$Builder");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setQueryParameter((String) null, "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder((String) null, (String) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setHeader((String) null, (GetRecommendationsRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "At1Ro\"]Vi(z;Z";
          String string1 = "ifU@|R_\"1i~A\"";
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("At1Ro\"]Vi(z;Z", "ifU@|R_\"1i~A\"");
          ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
          clientCredentialsRequest0.executeAsync();
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.deleteJson();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:443\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:339)
             // org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
             // org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:373)
             // org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:381)
             // org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:237)
             // org.apache.http.impl.client.cache.CachingExec.callBackend(CachingExec.java:592)
             // org.apache.http.impl.client.cache.CachingExec.execute(CachingExec.java:269)
             // org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
             // org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
             // org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:111)
             // org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
             // org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
             // com.wrapper.spotify.SpotifyHttpManager.execute(SpotifyHttpManager.java:224)
             // com.wrapper.spotify.SpotifyHttpManager.delete(SpotifyHttpManager.java:214)
             // com.wrapper.spotify.requests.AbstractRequest.deleteJson(AbstractRequest.java:159)
             // sun.reflect.GeneratedMethodAccessor126.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("K<u:u:Z,;bv", "K<u:u:Z,;bv");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setConnectionRequestTimeout((Integer) null);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder2 = spotifyHttpManager_Builder1.setCacheMaxObjectSize((Integer) null);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder3 = spotifyHttpManager_Builder2.setCacheMaxEntries((Integer) null);
      // Undeclared exception!
      spotifyHttpManager_Builder3.build();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("_2op}<esz7e", "[@m~UaBr*");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("_2op}<esz7e");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamEntity inputStreamEntity0 = new InputStreamEntity(pipedInputStream0, 206);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder2 = clientCredentialsRequest_Builder1.setBody(inputStreamEntity0);
      Integer integer0 = new Integer(206);
      Integer.getInteger("_2op}<esz7e", 206);
      Integer.divideUnsigned(206, 206);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder3 = clientCredentialsRequest_Builder2.setScheme("_2op}<esz7e");
      clientCredentialsRequest_Builder0.setPort(integer0);
      clientCredentialsRequest_Builder1.setPath("[@m~UaBr*");
      ClientCredentialsRequest clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder3);
      // Undeclared exception!
      try { 
        clientCredentialsRequest0.getJson();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.shouldAllThrowIOExceptions();
          FileSystemHandling.shouldAllThrowIOExceptions();
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")%e,/d(+");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("STRICT", "#U>V>wINuRQh5");
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "U%.op\"o29m'6)wA>");
          SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
          UsernamePasswordCredentials usernamePasswordCredentials0 = new UsernamePasswordCredentials(")%e,/d(+", "gO@7iQ~");
          Integer.max((-4875), 480);
          usernamePasswordCredentials0.toString();
          clientCredentialsRequest_Builder0.setPath("~.D/PxNl ^eAaZ");
          ClientCredentialsRequest clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder0);
          LinkedList<NameValuePair> linkedList0 = new LinkedList<NameValuePair>();
          clientCredentialsRequest0.bodyParametersToJson(linkedList0);
          clientCredentialsRequest0.initializeBody();
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.execute();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:31][route:{s}->https://api.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "pg{pjj350XM1O1}gO=";
      String string1 = "";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("pg{pjj350XM1O1}gO=", "");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setQueryParameter("", (GetListOfCategoriesRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("1K1M\"\"", "1K1M\"\"");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<NameValuePair> list0 = clientCredentialsRequest0.getBodyParameters();
      clientCredentialsRequest0.bodyParametersToJson(list0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      bufferedOutputStream0.write(byteArray0);
      BasicHttpEntity basicHttpEntity0 = new BasicHttpEntity();
      basicHttpEntity0.getContentEncoding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      clientCredentialsRequest0.initializeBody();
      // Undeclared exception!
      try { 
        clientCredentialsRequest0.bodyParametersToJson((List<NameValuePair>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.requests.AbstractRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Content-Type";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Content-Type", "!{J");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = new ClientCredentialsRequest.Builder("!{J", (String) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder1.setPathParameter((String) null, "Content-Type");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "Content-Type";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Content-Type", "Content-Type");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPathParameter((String) null, "Content-Type");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("_2op}<esz7e", "[@m~UaBr*");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("_2op}<esz7e");
      clientCredentialsRequest_Builder1.setPath("_2op}<esz7e");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamEntity inputStreamEntity0 = new InputStreamEntity(pipedInputStream0, 206);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder2 = clientCredentialsRequest_Builder1.setBody(inputStreamEntity0);
      Integer integer0 = new Integer(206);
      Integer.getInteger("[@m~UaBr*", 206);
      Integer.getInteger("_2op}<esz7e", 206);
      Integer.divideUnsigned(206, 206);
      clientCredentialsRequest_Builder2.setScheme("_2op}<esz7e");
      clientCredentialsRequest_Builder0.setPort(integer0);
      clientCredentialsRequest_Builder1.setPath("Content-Type");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      List<NameValuePair> list0 = clientCredentialsRequest0.getBodyParameters();
      clientCredentialsRequest0.bodyParametersToJson(list0);
      clientCredentialsRequest0.getJson();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("https", "https");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      LinkedList<NameValuePair> linkedList0 = new LinkedList<NameValuePair>();
      BasicHeader basicHeader0 = new BasicHeader("https", "");
      linkedList0.add((NameValuePair) basicHeader0);
      clientCredentialsRequest0.bodyParametersToJson(linkedList0);
      clientCredentialsRequest_Builder0.setHost("");
      LinkedList<NameValuePair> linkedList1 = new LinkedList<NameValuePair>();
      linkedList1.toArray();
      BasicNameValuePair basicNameValuePair0 = null;
      try {
        basicNameValuePair0 = new BasicNameValuePair((String) null, "https");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name may not be null
         //
         verifyException("org.apache.http.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("DFgdIlsYm*juZ/]", "DFgdIlsYm*juZ/]");
      clientCredentialsRequest_Builder0.build();
      Integer integer0 = new Integer(0);
      clientCredentialsRequest_Builder0.setScheme("aS+q0");
      clientCredentialsRequest_Builder0.grant_type("K$R");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest0.executeAsync();
      clientCredentialsRequest0.getBody();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = ";X\\IidEN>@!*LJyx'p";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials", ";XIidEN>@!*LJyx'p");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      clientCredentialsRequest_Builder0.setPathParameter("/v1/browse/new-releases", "{?R1R");
      clientCredentialsRequest_Builder0.setPort(integer0);
      clientCredentialsRequest_Builder0.setScheme("com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials");
      String string1 = "";
      clientCredentialsRequest_Builder0.setBodyParameter("0]x&wB", (Object) "com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPathParameter("{?R1R", "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      clientCredentialsRequest_Builder0.setBodyParameter("com.wrapper.spotify.requests.AbstractRequest", (Object) "com.wrapper.spotify.requests.AbstractRequest");
      clientCredentialsRequest_Builder0.build();
      String string0 = "#m|JSn{UTfQ2J^,n;F";
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPath((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      // Undeclared exception!
      spotifyHttpManager_Builder0.build();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "[&g^`@)U&";
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("[&g^`@)U&", "[&g^`@)U&");
          ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
          clientCredentialsRequest_Builder0.setPath("[&g^`@)U&");
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.getJson();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:32][route:{s}->https://accounts.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("=", "");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("");
          clientCredentialsRequest_Builder1.setHost("");
          ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder1.build();
          clientCredentialsRequest_Builder0.grant_type("=");
          clientCredentialsRequest0.initializeBody();
          clientCredentialsRequest0.initializeBody();
          clientCredentialsRequest0.initializeBody();
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.deleteJson();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:33][route:{s}->https://accounts.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "L";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("L", "L");
      String string1 = null;
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setHost((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "yGYs4g2NcX*PI\"";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("yGYs4g2NcX*PI\"", "yGYs4g2NcX*PI\"");
      String string1 = "Xb=g2A|nmR4&~h";
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest_Builder0.setHeader("yGYs4g2NcX*PI\"", clientCredentialsRequest0);
      int int0 = (-3077);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      Integer integer0 = new Integer(300);
      spotifyHttpManager_Builder0.setCacheMaxObjectSize(integer0);
      HttpHost httpHost0 = null;
      try {
        httpHost0 = new HttpHost((String) null, (-3077));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Host name may not be null
         //
         verifyException("org.apache.http.util.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "com.wrapper.spotify.requests.AbstractRequest$1";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.requests.AbstractRequest$1", "com.wrapper.spotify.requests.AbstractRequest$1");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setBodyParameter((String) null, (Object) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Klc]G sqI%N]y", "Klc]G sqI%N]y");
      ContentType contentType0 = ContentType.MULTIPART_FORM_DATA;
      ContentType contentType1 = contentType0.withCharset((Charset) null);
      clientCredentialsRequest_Builder0.setContentType(contentType1);
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest_Builder0.setBody((HttpEntity) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest0.putJson();
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      StringEntity stringEntity0 = new StringEntity("");
      stringEntity0.setContentType("p~B{.,MydpRPw}u`");
      clientCredentialsRequest_Builder0.setBody(stringEntity0);
      clientCredentialsRequest_Builder0.grant_type("K");
      clientCredentialsRequest_Builder0.setBodyParameter(")aF;Ix{", (Object) "K");
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 595, (-3045));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.requests.data.follow.CheckUsersFollowPlaylistRequest", "com.wrapper.spotify.requests.data.follow.CheckUsersFollowPlaylistRequest");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      LinkedList<NameValuePair> linkedList0 = new LinkedList<NameValuePair>();
      clientCredentialsRequest0.bodyParametersToJson(linkedList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      LinkedList<NameValuePair> linkedList0 = new LinkedList<NameValuePair>();
      // Undeclared exception!
      try { 
        clientCredentialsRequest0.postJson();
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      String string1 = "Yg9_\"2sm8G]Q`d:j7";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "Yg9_\"2sm8G]Q`d:j7");
      String string2 = ".K;|_Zw!ro/M";
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setBodyParameter("", (Object) "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "ifE$|R|\"ni~A\"";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("At1Ro\"]Vi(z;Z", "ifE$|R|\"ni~A\"");
      String string1 = "O4@)4-6d*7ppR ";
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest0.executeAsync();
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setBodyParameter("", (GetAudioFeaturesForTrackRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("$aR1!", "MN6H$%x>kFb>{B");
      Integer integer0 = new Integer(0);
      clientCredentialsRequest_Builder0.setPort(integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder((String) null, "");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setHeader("", (GetAlbumsTracksRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("K<u:u:Z,;bv", "+r`T=BF@H2+");
      clientCredentialsRequest_Builder0.grant_type("+r`T=BF@H2+");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("K<u:u:Z,;bv");
      clientCredentialsRequest_Builder0.grant_type("K<u:u:Z,;bv");
      clientCredentialsRequest_Builder0.setPathParameter("+r`T=BF@H2+", "K<u:u:Z,;bv");
      clientCredentialsRequest_Builder1.setScheme("x4xGmn.'eF");
      clientCredentialsRequest_Builder1.setPath("+r`T=BF@H2+");
      Integer integer0 = new Integer((-663));
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder1.setPort(integer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder((String) null, (String) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setBodyParameter("y[", (Object) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Max total value", (String) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setScheme((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = ",[(y+QqL4/&e(=O6+K";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder(",[(y+QqL4/&e(=O6+K", ",[(y+QqL4/&e(=O6+K");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      int int1 = 2435;
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPathParameter("", "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Vrll5ZT^h >g<1d3'`o", "");
      clientCredentialsRequest_Builder0.setPath("|w)t=c.Eza)");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPathParameter("", (String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("collaborative", "N-W7e3.-Qd}U#?qFS");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder1.build();
      clientCredentialsRequest0.executeAsync();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = ";ls6-F";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder(";ls6-F", ";ls6-F");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      IHttpManager iHttpManager0 = clientCredentialsRequest0.getHttpManager();
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setDefaults(iHttpManager0, "g:^=lY", "g:^=lY", (Integer) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "application/json");
      clientCredentialsRequest_Builder0.grant_type("application/json");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      Integer integer0 = new Integer(241);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setCacheMaxEntries(integer0);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder2 = spotifyHttpManager_Builder1.setConnectTimeout((Integer) null);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder3 = spotifyHttpManager_Builder2.setConnectionRequestTimeout((Integer) null);
      // Undeclared exception!
      spotifyHttpManager_Builder3.build();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "SSL session not available";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("SSL session not available", "SSL session not available");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      Integer integer0 = new Integer((-1362));
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setConnectionRequestTimeout(integer0);
      SpotifyHttpManager spotifyHttpManager0 = new SpotifyHttpManager(spotifyHttpManager_Builder1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("a9xg`", "");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      UsernamePasswordCredentials usernamePasswordCredentials0 = new UsernamePasswordCredentials("a9xg`", "");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setProxyCredentials(usernamePasswordCredentials0);
      Integer integer0 = new Integer(0);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder2 = spotifyHttpManager_Builder1.setCacheMaxEntries(integer0);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder3 = spotifyHttpManager_Builder2.setConnectTimeout(integer0);
      // Undeclared exception!
      spotifyHttpManager_Builder3.build();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequest$Builder", "com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequest$Builder");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("com.wrapper.spotify.requests.data.player.StartResumeUsersPlaybackRequest$Builder");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder1.setHttpManager((IHttpManager) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("!q_^]-d=PH^,O", "!q_^]-d=PH^,O");
      ClientCredentialsRequest clientCredentialsRequest0 = null;
      try {
        clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Content-Type", "Content-Type");
      clientCredentialsRequest_Builder0.setHost("Content-Type");
      clientCredentialsRequest_Builder0.setScheme("Content-Type");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.requests.AbstractRequest$Builder", "");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("org.apache.http.impl.client.BasicCredentialsProvider");
      ContentType contentType0 = ContentType.IMAGE_PNG;
      clientCredentialsRequest_Builder1.setContentType(contentType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "Connection reuse strategy");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest0.initializeBody();
      clientCredentialsRequest0.getContentType();
      clientCredentialsRequest_Builder0.setScheme("7&AWibR[xMU<y<");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("#oo", "#oo");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = new ClientCredentialsRequest.Builder((String) null, (String) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder1.setScheme("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      clientCredentialsRequest_Builder0.build();
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPath("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClientCredentialsRequest clientCredentialsRequest0 = null;
      try {
        clientCredentialsRequest0 = new ClientCredentialsRequest((ClientCredentialsRequest.Builder) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder1.build();
      clientCredentialsRequest0.getHeaders();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder(">Wf:G})P!:kyo84V'1", "");
          clientCredentialsRequest_Builder0.setPath(">Wf:G})P!:kyo84V'1");
          ClientCredentialsRequest clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder0);
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.postJson();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:34][route:{s}->https://api.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest0.deleteJson();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder((String) null, (String) null);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPath((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "discard");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Oy -*IUBHMw%MA");
      String string0 = "ydYFlKm:Hs4tO/-";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ydYFlKm:Hs4tO/-");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("ydYFlKm:Hs4tO/-", "ydYFlKm:Hs4tO/-");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      SpotifyHttpManager spotifyHttpManager0 = new SpotifyHttpManager(spotifyHttpManager_Builder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z!/`G#h7");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("offset", "offset");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("Z!/`G#h7");
      ClientCredentialsRequest clientCredentialsRequest0 = null;
      try {
        clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)48;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dKILAjx/.]O");
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("/v1/browse/new-releases", "/v1/browse/new-releases");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("dKILAjx/.]O");
      clientCredentialsRequest_Builder1.setPath("mMU(");
      clientCredentialsRequest_Builder0.setPathParameter("/v1/browse/new-releases", "/v1/browse/new-releases");
      clientCredentialsRequest_Builder1.setPath("#O3to2t)");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder1.build();
      clientCredentialsRequest_Builder0.build();
      List<NameValuePair> list0 = clientCredentialsRequest0.getBodyParameters();
      clientCredentialsRequest0.bodyParametersToJson(list0);
      clientCredentialsRequest_Builder0.setScheme("}");
      clientCredentialsRequest0.getBody();
      clientCredentialsRequest0.executeAsync();
      clientCredentialsRequest0.getUri();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[0];
          FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NdK8");
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
          String string0 = "/v1/me/player/currently-playing";
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("/v1/me/player/currently-playing", "NdK8");
          clientCredentialsRequest_Builder0.setHost("6hT(^`NyHk<jrm4uVP");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("");
          ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder1.build();
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.putJson();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:35][route:{s}->https://accounts.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = ";X\\IidEN>@!*LJyx'p";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials", ";XIidEN>@!*LJyx'p");
      int int0 = 0;
      Integer integer0 = new Integer(0);
      clientCredentialsRequest_Builder0.setPathParameter("/v1/browse/new-releases", "{?R1R");
      clientCredentialsRequest_Builder0.setPort(integer0);
      clientCredentialsRequest_Builder0.setScheme("com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials");
      String string1 = "";
      clientCredentialsRequest_Builder0.setBodyParameter(";XIidEN>@!*LJyx'p", (Object) "com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials");
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setPathParameter("{?R1R", "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("K<u:u:Z,;bv", "K<u:u:Z,;bv");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setConnectionRequestTimeout((Integer) null);
      spotifyHttpManager_Builder1.setCacheMaxEntries((Integer) null);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder2 = spotifyHttpManager_Builder1.setCacheMaxObjectSize((Integer) null);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder3 = spotifyHttpManager_Builder2.setCacheMaxEntries((Integer) null);
      // Undeclared exception!
      spotifyHttpManager_Builder3.build();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder(">Wf:G})P!:kyo84V'1", ">Wf:G})P!:kyo84V'1");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.setPath(">Wf:G})P!:kyo84V'1");
          ContentType contentType0 = ContentType.APPLICATION_OCTET_STREAM;
          clientCredentialsRequest_Builder0.setContentType(contentType0);
          ClientCredentialsRequest clientCredentialsRequest0 = new ClientCredentialsRequest(clientCredentialsRequest_Builder1);
          List<NameValuePair> list0 = clientCredentialsRequest0.getBodyParameters();
          clientCredentialsRequest0.bodyParametersToJson(list0);
          ClientCredentialsRequest clientCredentialsRequest1 = new ClientCredentialsRequest(clientCredentialsRequest_Builder0);
          // Undeclared exception!
          try { 
            clientCredentialsRequest1.postJson();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:36][route:{s}->https://api.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "pg{pjj350XM1O1}gO=";
      String string1 = "}";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("pg{pjj350XM1O1}gO=", "}");
      String string2 = "KV.|2Or>Yz}R3Ms,g\\";
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setQueryParameter("KV.|2Or>Yz}R3Ms,g", (GetListOfCategoriesRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "com.wrapper.spotify.requests.data.playlists.CreatePlaylistRequest$Builder";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("com.wrapper.spotify.requests.data.playlists.CreatePlaylistRequest$Builder", "com.wrapper.spotify.requests.data.playlists.CreatePlaylistRequest$Builder");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      clientCredentialsRequest_Builder0.setScheme("com.wrapper.spotify.requests.data.playlists.CreatePlaylistRequest$Builder");
      Integer integer0 = new Integer(0);
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setCacheMaxEntries(integer0);
      spotifyHttpManager_Builder0.setCacheMaxEntries(integer0);
      Integer integer1 = Integer.getInteger("offset", 926);
      spotifyHttpManager_Builder0.setSocketTimeout(integer1);
      spotifyHttpManager_Builder1.setCacheMaxObjectSize(integer0);
      SpotifyHttpManager spotifyHttpManager0 = new SpotifyHttpManager(spotifyHttpManager_Builder0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "!{J";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("Content-Type", "!{J");
      SpotifyHttpManager.Builder spotifyHttpManager_Builder0 = new SpotifyHttpManager.Builder();
      Integer integer0 = new Integer((-4085));
      SpotifyHttpManager.Builder spotifyHttpManager_Builder1 = spotifyHttpManager_Builder0.setCacheMaxObjectSize(integer0);
      SpotifyHttpManager spotifyHttpManager0 = new SpotifyHttpManager(spotifyHttpManager_Builder1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "ifU@|R_\"1i~A\"";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("At1Ro\"]Vi(z;Z", "ifU@|R_\"1i~A\"");
      String string1 = "O4@)4-6d*7ppR ";
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      clientCredentialsRequest0.executeAsync();
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder0.setBodyParameter("Content-Type", (GetAudioFeaturesForTrackRequest) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("_2op}<esz7e", "[@m~UaBr*");
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("_2op}<esz7e");
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          InputStreamEntity inputStreamEntity0 = new InputStreamEntity(pipedInputStream0, 206);
          ClientCredentialsRequest.Builder clientCredentialsRequest_Builder2 = clientCredentialsRequest_Builder1.setBody(inputStreamEntity0);
          Integer integer0 = new Integer(206);
          Integer.getInteger("[@m~UaBr*", 206);
          Integer.getInteger("_2op}<esz7e", 206);
          Integer.divideUnsigned(206, 206);
          clientCredentialsRequest_Builder2.setScheme("_2op}<esz7e");
          clientCredentialsRequest_Builder0.setPort(integer0);
          clientCredentialsRequest_Builder1.setPath("Content-Type");
          ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
          // Undeclared exception!
          try { 
            clientCredentialsRequest0.getJson();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:37][route:{s}->https://accounts.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "";
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder0 = new ClientCredentialsRequest.Builder("", "");
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder1 = clientCredentialsRequest_Builder0.grant_type("");
      clientCredentialsRequest_Builder0.grant_type("UTF-8");
      ClientCredentialsRequest clientCredentialsRequest0 = clientCredentialsRequest_Builder0.build();
      IHttpManager iHttpManager0 = clientCredentialsRequest0.getHttpManager();
      clientCredentialsRequest0.initializeBody();
      ClientCredentialsRequest.Builder clientCredentialsRequest_Builder2 = clientCredentialsRequest_Builder1.setHttpManager(iHttpManager0);
      // Undeclared exception!
      try { 
        clientCredentialsRequest_Builder2.setPathParameter("", ".5m]6\"KcD'TDwb2k>");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
