/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:00:58 GMT 2019
 */

package com.wrapper.spotify.requests.authorization.authorization_code;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.wrapper.spotify.requests.authorization.authorization_code.AuthorizationCodeUriRequest;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthorizationCodeUriRequest_ESTest extends AuthorizationCodeUriRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.scope("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.scope((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder1 = authorizationCodeUriRequest_Builder0.scope("text/xml");
      assertSame(authorizationCodeUriRequest_Builder0, authorizationCodeUriRequest_Builder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.state("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.state((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder1 = authorizationCodeUriRequest_Builder0.state("org.apache.http.conn.BasicManagedEntity");
      assertSame(authorizationCodeUriRequest_Builder0, authorizationCodeUriRequest_Builder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.redirect_uri((URI) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      URI uRI0 = MockURI.create("response_type");
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder1 = authorizationCodeUriRequest_Builder0.redirect_uri(uRI0);
      assertSame(authorizationCodeUriRequest_Builder0, authorizationCodeUriRequest_Builder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder1 = authorizationCodeUriRequest_Builder0.response_type("text/xml");
      assertSame(authorizationCodeUriRequest_Builder1, authorizationCodeUriRequest_Builder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.response_type((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.response_type("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.client_id("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      // Undeclared exception!
      try { 
        authorizationCodeUriRequest_Builder0.client_id((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder1 = authorizationCodeUriRequest_Builder0.client_id("org.apache.http.conn.BasicManagedEntity");
      assertSame(authorizationCodeUriRequest_Builder1, authorizationCodeUriRequest_Builder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder1 = authorizationCodeUriRequest_Builder0.show_dialog(false);
      assertSame(authorizationCodeUriRequest_Builder0, authorizationCodeUriRequest_Builder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthorizationCodeUriRequest.Builder authorizationCodeUriRequest_Builder0 = new AuthorizationCodeUriRequest.Builder();
      AuthorizationCodeUriRequest authorizationCodeUriRequest0 = authorizationCodeUriRequest_Builder0.build();
      URI uRI0 = authorizationCodeUriRequest0.execute();
      assertNotNull(uRI0);
      assertEquals("https://accounts.spotify.com:443/authorize", uRI0.toString());
  }
}
