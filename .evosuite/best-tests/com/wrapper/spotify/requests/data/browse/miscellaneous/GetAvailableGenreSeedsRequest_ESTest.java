/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:44:47 GMT 2019
 */

package com.wrapper.spotify.requests.data.browse.miscellaneous;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.wrapper.spotify.IHttpManager;
import com.wrapper.spotify.requests.data.browse.miscellaneous.GetAvailableGenreSeedsRequest;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.http.Header;
import org.apache.http.NameValuePair;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.ContentType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GetAvailableGenreSeedsRequest_ESTest extends GetAvailableGenreSeedsRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          GetAvailableGenreSeedsRequest.Builder getAvailableGenreSeedsRequest_Builder0 = new GetAvailableGenreSeedsRequest.Builder("com.wrapper.spotify.requests.data.browse.miscellaneous.GetAvailableGenreSeedsRequest");
          GetAvailableGenreSeedsRequest getAvailableGenreSeedsRequest0 = getAvailableGenreSeedsRequest_Builder0.build();
          // Undeclared exception!
          try { 
            getAvailableGenreSeedsRequest0.execute();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:4][route:{s}->https://api.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GetAvailableGenreSeedsRequest.Builder getAvailableGenreSeedsRequest_Builder0 = new GetAvailableGenreSeedsRequest.Builder("~DO({J$,uIMM?\"le");
      getAvailableGenreSeedsRequest_Builder0.setHost("^'O<~uC\"_>UeY[K=^+f");
      GetAvailableGenreSeedsRequest getAvailableGenreSeedsRequest0 = getAvailableGenreSeedsRequest_Builder0.build();
      // Undeclared exception!
      try { 
        getAvailableGenreSeedsRequest0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "Y@g";
      GetAvailableGenreSeedsRequest.Builder getAvailableGenreSeedsRequest_Builder0 = new GetAvailableGenreSeedsRequest.Builder("Y@g");
      NameValuePair[] nameValuePairArray0 = new NameValuePair[5];
      BasicHttpEntity basicHttpEntity0 = new BasicHttpEntity();
      basicHttpEntity0.getContentType();
      nameValuePairArray0[0] = (NameValuePair) null;
      basicHttpEntity0.getContentEncoding();
      nameValuePairArray0[1] = (NameValuePair) null;
      BasicHttpEntity basicHttpEntity1 = new BasicHttpEntity();
      basicHttpEntity1.getContentType();
      nameValuePairArray0[2] = (NameValuePair) null;
      BufferedHttpEntity bufferedHttpEntity0 = null;
      try {
        bufferedHttpEntity0 = new BufferedHttpEntity(basicHttpEntity0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Content has not been provided
         //
         verifyException("org.apache.http.util.Asserts", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          GetAvailableGenreSeedsRequest.Builder getAvailableGenreSeedsRequest_Builder0 = new GetAvailableGenreSeedsRequest.Builder("");
          GetAvailableGenreSeedsRequest.Builder getAvailableGenreSeedsRequest_Builder1 = new GetAvailableGenreSeedsRequest.Builder((String) null);
          GetAvailableGenreSeedsRequest getAvailableGenreSeedsRequest0 = getAvailableGenreSeedsRequest_Builder0.build();
          List<NameValuePair> list0 = getAvailableGenreSeedsRequest0.getBodyParameters();
          getAvailableGenreSeedsRequest0.bodyParametersToJson(list0);
          IHttpManager iHttpManager0 = getAvailableGenreSeedsRequest0.getHttpManager();
          Integer integer0 = new Integer((-1600));
          getAvailableGenreSeedsRequest_Builder0.setDefaults(iHttpManager0, "", "{}", integer0);
          getAvailableGenreSeedsRequest_Builder1.build();
          // Undeclared exception!
          try { 
            getAvailableGenreSeedsRequest0.execute();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:5][route:{s}->https://api.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GetAvailableGenreSeedsRequest.Builder getAvailableGenreSeedsRequest_Builder0 = new GetAvailableGenreSeedsRequest.Builder("!O9'z< \"M>");
      getAvailableGenreSeedsRequest_Builder0.setPath("Invalid HTTP host: ");
      getAvailableGenreSeedsRequest_Builder0.setScheme("iNo-5N}o?[");
      getAvailableGenreSeedsRequest_Builder0.setScheme("The response came from an upstream server");
      GetAvailableGenreSeedsRequest getAvailableGenreSeedsRequest0 = getAvailableGenreSeedsRequest_Builder0.build();
      // Undeclared exception!
      try { 
        getAvailableGenreSeedsRequest0.getJson();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }
}
