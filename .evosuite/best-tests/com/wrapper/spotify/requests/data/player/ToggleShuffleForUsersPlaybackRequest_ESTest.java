/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:20:51 GMT 2019
 */

package com.wrapper.spotify.requests.data.player;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.wrapper.spotify.IHttpManager;
import com.wrapper.spotify.requests.data.player.ToggleShuffleForUsersPlaybackRequest;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.http.entity.ContentProducer;
import org.apache.http.entity.EntityTemplate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToggleShuffleForUsersPlaybackRequest_ESTest extends ToggleShuffleForUsersPlaybackRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder0 = new ToggleShuffleForUsersPlaybackRequest.Builder("");
          ToggleShuffleForUsersPlaybackRequest toggleShuffleForUsersPlaybackRequest0 = toggleShuffleForUsersPlaybackRequest_Builder0.build();
          toggleShuffleForUsersPlaybackRequest0.initializeBody();
          // Undeclared exception!
          try { 
            toggleShuffleForUsersPlaybackRequest0.execute();
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // Entry [id:6][route:{s}->https://api.spotify.com:443][state:null] has not been leased from this pool
             //
             verifyException("org.apache.http.util.Asserts", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "-f|)s";
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder0 = new ToggleShuffleForUsersPlaybackRequest.Builder("-f|)s");
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder1 = toggleShuffleForUsersPlaybackRequest_Builder0.setHost("Not a JSON Primitive: ");
      toggleShuffleForUsersPlaybackRequest_Builder0.setPathParameter("", "");
      Object object0 = new Object();
      toggleShuffleForUsersPlaybackRequest_Builder0.setHeader("", object0);
      ToggleShuffleForUsersPlaybackRequest toggleShuffleForUsersPlaybackRequest0 = toggleShuffleForUsersPlaybackRequest_Builder0.build();
      ContentProducer contentProducer0 = mock(ContentProducer.class, new ViolatedAssumptionAnswer());
      EntityTemplate entityTemplate0 = new EntityTemplate(contentProducer0);
      toggleShuffleForUsersPlaybackRequest_Builder1.setPath("Source input stream");
      toggleShuffleForUsersPlaybackRequest_Builder0.setBody(entityTemplate0);
      // Undeclared exception!
      try { 
        toggleShuffleForUsersPlaybackRequest0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder0 = new ToggleShuffleForUsersPlaybackRequest.Builder("");
          ToggleShuffleForUsersPlaybackRequest toggleShuffleForUsersPlaybackRequest0 = toggleShuffleForUsersPlaybackRequest_Builder0.build();
          toggleShuffleForUsersPlaybackRequest0.executeAsync();
          // Undeclared exception!
          try { 
            toggleShuffleForUsersPlaybackRequest0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:443\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:339)
             // org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
             // org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:373)
             // org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:381)
             // org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:237)
             // org.apache.http.impl.client.cache.CachingExec.callBackend(CachingExec.java:592)
             // org.apache.http.impl.client.cache.CachingExec.execute(CachingExec.java:269)
             // org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
             // org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
             // org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:111)
             // org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
             // org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
             // com.wrapper.spotify.SpotifyHttpManager.execute(SpotifyHttpManager.java:224)
             // com.wrapper.spotify.SpotifyHttpManager.put(SpotifyHttpManager.java:194)
             // com.wrapper.spotify.requests.AbstractRequest.putJson(AbstractRequest.java:145)
             // com.wrapper.spotify.requests.data.player.ToggleShuffleForUsersPlaybackRequest.execute(ToggleShuffleForUsersPlaybackRequest.java:34)
             // sun.reflect.GeneratedMethodAccessor45.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder0 = new ToggleShuffleForUsersPlaybackRequest.Builder(".+?AxY");
      toggleShuffleForUsersPlaybackRequest_Builder0.build();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        toggleShuffleForUsersPlaybackRequest_Builder0.device_id("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "QUt*?6c/QA";
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder0 = new ToggleShuffleForUsersPlaybackRequest.Builder("QUt*?6c/QA");
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder1 = toggleShuffleForUsersPlaybackRequest_Builder0.device_id("(HpbC=qzd)@");
      Boolean boolean0 = Boolean.valueOf("(HpbC=qzd)@");
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder2 = toggleShuffleForUsersPlaybackRequest_Builder1.state(boolean0);
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder3 = toggleShuffleForUsersPlaybackRequest_Builder2.device_id("(HpbC=qzd)@");
      ToggleShuffleForUsersPlaybackRequest toggleShuffleForUsersPlaybackRequest0 = toggleShuffleForUsersPlaybackRequest_Builder1.build();
      IHttpManager iHttpManager0 = toggleShuffleForUsersPlaybackRequest0.getHttpManager();
      Integer integer0 = new Integer(0);
      toggleShuffleForUsersPlaybackRequest_Builder3.setDefaults(iHttpManager0, "QUt*?6c/QA", "YiiQRo9", integer0);
      toggleShuffleForUsersPlaybackRequest_Builder3.device_id("QUt*?6c/QA");
      ToggleShuffleForUsersPlaybackRequest toggleShuffleForUsersPlaybackRequest1 = toggleShuffleForUsersPlaybackRequest_Builder3.build();
      try { 
        toggleShuffleForUsersPlaybackRequest1.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.http.impl.client.InternalHttpClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = null;
      ToggleShuffleForUsersPlaybackRequest.Builder toggleShuffleForUsersPlaybackRequest_Builder0 = new ToggleShuffleForUsersPlaybackRequest.Builder((String) null);
      // Undeclared exception!
      try { 
        toggleShuffleForUsersPlaybackRequest_Builder0.device_id((String) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
