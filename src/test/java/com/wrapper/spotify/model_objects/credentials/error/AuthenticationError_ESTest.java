/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:24:27 GMT 2019
 */

package com.wrapper.spotify.model_objects.credentials.error;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.credentials.error.AuthenticationError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthenticationError_ESTest extends AuthenticationError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AuthenticationError.JsonUtil authenticationError_JsonUtil0 = new AuthenticationError.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      authenticationError_JsonUtil0.createModelObject(jsonObject0);
      JsonObject jsonObject1 = null;
      authenticationError_JsonUtil0.createModelObject((JsonObject) null);
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn((-1895)).when(jsonArray0).size();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        authenticationError_JsonUtil0.createModelObjectArray(jsonArray0, class0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AuthenticationError.Builder authenticationError_Builder0 = new AuthenticationError.Builder();
      authenticationError_Builder0.setError("&UFetO93AZ&");
      AuthenticationError authenticationError0 = authenticationError_Builder0.build();
      AuthenticationError.Builder authenticationError_Builder1 = authenticationError_Builder0.setError_description("");
      AuthenticationError.Builder authenticationError_Builder2 = authenticationError_Builder0.setError("");
      AuthenticationError authenticationError1 = authenticationError_Builder1.build();
      authenticationError_Builder0.setError("com.wrapper.spotify.model_objects.credentials.error.AuthenticationError$JsonUtil");
      authenticationError1.builder();
      AuthenticationError authenticationError2 = authenticationError_Builder1.build();
      authenticationError0.builder();
      authenticationError0.builder();
      authenticationError_Builder2.build();
      authenticationError_Builder2.setError("");
      authenticationError_Builder2.setError_description("");
      String string0 = authenticationError0.getError();
      authenticationError_Builder1.setError_description("");
      authenticationError0.builder();
      authenticationError_Builder0.setError_description("total");
      String string1 = authenticationError2.getError_description();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthenticationError.Builder authenticationError_Builder0 = new AuthenticationError.Builder();
      AuthenticationError.Builder authenticationError_Builder1 = authenticationError_Builder0.setError("/A|ST\" <T&");
      AuthenticationError.Builder authenticationError_Builder2 = authenticationError_Builder0.setError("");
      authenticationError_Builder1.setError("");
      authenticationError_Builder0.setError_description("");
      AuthenticationError authenticationError0 = authenticationError_Builder0.build();
      AuthenticationError.Builder authenticationError_Builder3 = authenticationError0.builder();
      authenticationError_Builder0.build();
      authenticationError_Builder3.setError("");
      authenticationError_Builder3.setError("/A|ST\" <T&");
      authenticationError0.getError();
      AuthenticationError.Builder authenticationError_Builder4 = authenticationError_Builder1.setError_description("I$^");
      authenticationError_Builder3.setError_description("I$^");
      authenticationError_Builder2.setError("");
      authenticationError_Builder4.build();
      AuthenticationError.Builder authenticationError_Builder5 = authenticationError0.builder();
      assertFalse(authenticationError_Builder5.equals((Object)authenticationError_Builder4));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AuthenticationError.Builder authenticationError_Builder0 = new AuthenticationError.Builder();
      AuthenticationError.Builder authenticationError_Builder1 = authenticationError_Builder0.setError("error");
      AuthenticationError authenticationError0 = authenticationError_Builder1.build();
      authenticationError0.builder();
      AuthenticationError.Builder authenticationError_Builder2 = authenticationError0.builder();
      authenticationError_Builder2.setError("error");
      String string0 = authenticationError0.getError();
      assertEquals("error", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AuthenticationError.Builder authenticationError_Builder0 = new AuthenticationError.Builder();
      AuthenticationError.JsonUtil authenticationError_JsonUtil0 = new AuthenticationError.JsonUtil();
      AuthenticationError.Builder authenticationError_Builder1 = new AuthenticationError.Builder();
      AuthenticationError authenticationError0 = authenticationError_Builder1.build();
      authenticationError0.builder();
      authenticationError0.builder();
      String string0 = authenticationError0.getError();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AuthenticationError.Builder authenticationError_Builder0 = new AuthenticationError.Builder();
      AuthenticationError.Builder authenticationError_Builder1 = authenticationError_Builder0.setError_description((String) null);
      AuthenticationError authenticationError0 = authenticationError_Builder0.build();
      AuthenticationError.Builder authenticationError_Builder2 = authenticationError_Builder0.setError_description("");
      authenticationError_Builder2.setError((String) null);
      AuthenticationError.JsonUtil authenticationError_JsonUtil0 = new AuthenticationError.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      AuthenticationError authenticationError1 = authenticationError_JsonUtil0.createModelObject(jsonObject0);
      AuthenticationError.Builder authenticationError_Builder3 = authenticationError1.builder();
      authenticationError_Builder0.setError_description("lNJ.ngb)Z-9 e$?");
      authenticationError_Builder3.setError_description("");
      AuthenticationError.Builder authenticationError_Builder4 = authenticationError_Builder3.setError_description("lNJ.ngb)Z-9 e$?");
      authenticationError1.getError_description();
      authenticationError0.builder();
      AuthenticationError authenticationError2 = authenticationError_Builder3.build();
      AuthenticationError authenticationError3 = authenticationError_Builder1.build();
      authenticationError3.builder();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      authenticationError_JsonUtil0.createModelObjectArray(jsonArray0);
      authenticationError0.getError();
      authenticationError2.builder();
      authenticationError0.getError();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false).when(jsonObject1).has(anyString());
      JsonArray jsonArray1 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray1).size();
      authenticationError_JsonUtil0.createModelObjectArray(jsonArray1);
      authenticationError_JsonUtil0.createModelObject(jsonObject1);
      authenticationError_Builder0.setError("lNJ.ngb)Z-9 e$?");
      AuthenticationError authenticationError4 = authenticationError_Builder3.build();
      authenticationError4.builder();
      authenticationError2.getError_description();
      authenticationError2.getError();
      authenticationError_JsonUtil0.createModelObject((JsonObject) null);
      AuthenticationError.Builder authenticationError_Builder5 = authenticationError_Builder4.setError_description("d](=0/<+\"3A,1`iC{6");
      assertFalse(authenticationError_Builder5.equals((Object)authenticationError_Builder1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AuthenticationError.Builder authenticationError_Builder0 = new AuthenticationError.Builder();
      authenticationError_Builder0.setError_description("");
      AuthenticationError.Builder authenticationError_Builder1 = authenticationError_Builder0.setError_description("");
      authenticationError_Builder0.setError_description((String) null);
      authenticationError_Builder1.setError_description("");
      AuthenticationError authenticationError0 = authenticationError_Builder1.build();
      authenticationError0.getError();
      AuthenticationError.Builder authenticationError_Builder2 = authenticationError0.builder();
      authenticationError_Builder0.setError_description((String) null);
      AuthenticationError.Builder authenticationError_Builder3 = authenticationError0.builder();
      authenticationError_Builder0.setError_description("8!OdAkTbdM1.A");
      authenticationError0.getError_description();
      authenticationError_Builder3.setError_description("ZWe I}1uA!MIOA`9h");
      authenticationError_Builder2.setError("com.google.gson.JsonArray");
      authenticationError0.getError();
      authenticationError0.getError_description();
      authenticationError_Builder2.setError("");
      authenticationError_Builder3.setError_description("");
      authenticationError_Builder3.setError_description("8!OdAkTbdM1.A");
      authenticationError_Builder3.setError((String) null);
      AuthenticationError.JsonUtil authenticationError_JsonUtil0 = new AuthenticationError.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      authenticationError_JsonUtil0.createModelObject(jsonObject0);
      authenticationError0.getError_description();
      authenticationError_Builder1.build();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject1).get(anyString());
      doReturn(true).when(jsonObject1).has(anyString());
      // Undeclared exception!
      try { 
        authenticationError_JsonUtil0.createModelObject(jsonObject1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.credentials.error.AuthenticationError$JsonUtil", e);
      }
  }
}
