/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:24:23 GMT 2019
 */

package com.wrapper.spotify.model_objects.miscellaneous;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysis;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisMeasure;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisMeta;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisSection;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisSegment;
import com.wrapper.spotify.model_objects.miscellaneous.AudioAnalysisTrack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AudioAnalysis_ESTest extends AudioAnalysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisMeasure[] audioAnalysisMeasureArray0 = new AudioAnalysisMeasure[2];
      AudioAnalysis.Builder audioAnalysis_Builder1 = audioAnalysis_Builder0.setTatums(audioAnalysisMeasureArray0);
      assertSame(audioAnalysis_Builder1, audioAnalysis_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisSegment[] audioAnalysisSegmentArray0 = new AudioAnalysisSegment[3];
      AudioAnalysis.Builder audioAnalysis_Builder1 = audioAnalysis_Builder0.setSegments(audioAnalysisSegmentArray0);
      assertSame(audioAnalysis_Builder0, audioAnalysis_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisMeasure[] audioAnalysisMeasureArray0 = new AudioAnalysisMeasure[2];
      AudioAnalysis.Builder audioAnalysis_Builder1 = audioAnalysis_Builder0.setBeats(audioAnalysisMeasureArray0);
      assertSame(audioAnalysis_Builder1, audioAnalysis_Builder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisTrack.JsonUtil audioAnalysisTrack_JsonUtil0 = new AudioAnalysisTrack.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysisTrack_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysis.Builder audioAnalysis_Builder1 = audioAnalysis_Builder0.setTrack(audioAnalysisTrack0);
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder1.build();
      AudioAnalysisTrack audioAnalysisTrack1 = audioAnalysis0.getTrack();
      assertNull(audioAnalysisTrack1.getTimeSignatureConfidence());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisSection[] audioAnalysisSectionArray0 = new AudioAnalysisSection[0];
      AudioAnalysis.Builder audioAnalysis_Builder1 = audioAnalysis_Builder0.setSections(audioAnalysisSectionArray0);
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder1.build();
      AudioAnalysisSection[] audioAnalysisSectionArray1 = audioAnalysis0.getSections();
      assertSame(audioAnalysisSectionArray0, audioAnalysisSectionArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisMeta.JsonUtil audioAnalysisMeta_JsonUtil0 = new AudioAnalysisMeta.JsonUtil();
      AudioAnalysisMeta audioAnalysisMeta0 = audioAnalysisMeta_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysis.Builder audioAnalysis_Builder1 = audioAnalysis_Builder0.setMeta(audioAnalysisMeta0);
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder1.build();
      AudioAnalysisMeta audioAnalysisMeta1 = audioAnalysis0.getMeta();
      assertNull(audioAnalysisMeta1.getInputProcess());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysisMeasure[] audioAnalysisMeasureArray0 = new AudioAnalysisMeasure[6];
      audioAnalysis_Builder0.setBars(audioAnalysisMeasureArray0);
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder0.build();
      AudioAnalysisMeasure[] audioAnalysisMeasureArray1 = audioAnalysis0.getBars();
      assertEquals(6, audioAnalysisMeasureArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AudioAnalysis.JsonUtil audioAnalysis_JsonUtil0 = new AudioAnalysis.JsonUtil();
      AudioAnalysis audioAnalysis0 = audioAnalysis_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(audioAnalysis0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AudioAnalysis.JsonUtil audioAnalysis_JsonUtil0 = new AudioAnalysis.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysis audioAnalysis0 = audioAnalysis_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysis.Builder audioAnalysis_Builder0 = audioAnalysis0.builder();
      assertNotNull(audioAnalysis_Builder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder0.build();
      AudioAnalysisMeasure[] audioAnalysisMeasureArray0 = audioAnalysis0.getBars();
      assertNull(audioAnalysisMeasureArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AudioAnalysis.JsonUtil audioAnalysis_JsonUtil0 = new AudioAnalysis.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysis audioAnalysis0 = audioAnalysis_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisMeasure[] audioAnalysisMeasureArray0 = audioAnalysis0.getBeats();
      assertNull(audioAnalysisMeasureArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysis.JsonUtil audioAnalysis_JsonUtil0 = new AudioAnalysis.JsonUtil();
      AudioAnalysis audioAnalysis0 = audioAnalysis_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisMeta audioAnalysisMeta0 = audioAnalysis0.getMeta();
      assertNull(audioAnalysisMeta0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder0.build();
      AudioAnalysisTrack audioAnalysisTrack0 = audioAnalysis0.getTrack();
      assertNull(audioAnalysisTrack0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AudioAnalysis.JsonUtil audioAnalysis_JsonUtil0 = new AudioAnalysis.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysis audioAnalysis0 = audioAnalysis_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisSection[] audioAnalysisSectionArray0 = audioAnalysis0.getSections();
      assertNull(audioAnalysisSectionArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      AudioAnalysis.JsonUtil audioAnalysis_JsonUtil0 = new AudioAnalysis.JsonUtil();
      AudioAnalysis audioAnalysis0 = audioAnalysis_JsonUtil0.createModelObject(jsonObject0);
      AudioAnalysisSegment[] audioAnalysisSegmentArray0 = audioAnalysis0.getSegments();
      assertNull(audioAnalysisSegmentArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AudioAnalysis.Builder audioAnalysis_Builder0 = new AudioAnalysis.Builder();
      AudioAnalysis audioAnalysis0 = audioAnalysis_Builder0.build();
      AudioAnalysisMeasure[] audioAnalysisMeasureArray0 = audioAnalysis0.getTatums();
      assertNull(audioAnalysisMeasureArray0);
  }
}
