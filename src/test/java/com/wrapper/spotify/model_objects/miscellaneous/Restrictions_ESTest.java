/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:41:37 GMT 2019
 */

package com.wrapper.spotify.model_objects.miscellaneous;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.miscellaneous.Restrictions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Restrictions_ESTest extends Restrictions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Restrictions.Builder restrictions_Builder0 = new Restrictions.Builder();
      restrictions_Builder0.setReason("`CgwZ@j_wY+$>6H8^@");
      Restrictions restrictions0 = restrictions_Builder0.build();
      String string0 = restrictions0.getReason();
      assertEquals("`CgwZ@j_wY+$>6H8^@", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Restrictions.Builder restrictions_Builder0 = new Restrictions.Builder();
      Restrictions.Builder restrictions_Builder1 = restrictions_Builder0.setReason("");
      Restrictions restrictions0 = restrictions_Builder1.build();
      String string0 = restrictions0.getReason();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Restrictions.Builder restrictions_Builder0 = new Restrictions.Builder();
      Restrictions restrictions0 = restrictions_Builder0.build();
      String string0 = restrictions0.getReason();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Restrictions.JsonUtil restrictions_JsonUtil0 = new Restrictions.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false).when(jsonObject0).has(anyString());
      Restrictions restrictions0 = restrictions_JsonUtil0.createModelObject(jsonObject0);
      Restrictions.Builder restrictions_Builder0 = restrictions0.builder();
      assertNotNull(restrictions_Builder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Restrictions.JsonUtil restrictions_JsonUtil0 = new Restrictions.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      Restrictions restrictions0 = restrictions_JsonUtil0.createModelObject(jsonObject0);
      assertNull(restrictions0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Restrictions.JsonUtil restrictions_JsonUtil0 = new Restrictions.JsonUtil();
      Restrictions restrictions0 = restrictions_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(restrictions0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Restrictions.JsonUtil restrictions_JsonUtil0 = new Restrictions.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false).when(jsonObject0).has(anyString());
      restrictions_JsonUtil0.createModelObject(jsonObject0);
  }
}
