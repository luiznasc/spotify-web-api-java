/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:55:34 GMT 2019
 */

package com.wrapper.spotify.model_objects.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.special.FeaturedPlaylists;
import com.wrapper.spotify.model_objects.specification.Paging;
import com.wrapper.spotify.model_objects.specification.PlaylistSimplified;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FeaturedPlaylists_ESTest extends FeaturedPlaylists_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      featuredPlaylists_Builder0.setMessage("");
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      featuredPlaylists_JsonUtil0.createModelObject(jsonObject0);
      // Undeclared exception!
      try { 
        featuredPlaylists_JsonUtil0.createModelObjectPaging("0C9a_$:e%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 8 path $
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      featuredPlaylists_Builder0.setMessage("com.google.gson.JsonArray");
      featuredPlaylists_Builder0.setMessage("");
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.getPlaylists();
      featuredPlaylists0.getPlaylists();
      FeaturedPlaylists.Builder featuredPlaylists_Builder2 = featuredPlaylists_Builder0.setMessage("");
      featuredPlaylists0.builder();
      featuredPlaylists0.getMessage();
      FeaturedPlaylists featuredPlaylists1 = featuredPlaylists_Builder2.build();
      featuredPlaylists1.builder();
      featuredPlaylists_Builder2.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists1.builder();
      featuredPlaylists_Builder2.setMessage("com.google.gson.JsonArray");
      featuredPlaylists0.getMessage();
      featuredPlaylists_Builder2.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists0.builder();
      featuredPlaylists1.getPlaylists();
      featuredPlaylists1.getMessage();
      featuredPlaylists_Builder1.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists1.builder();
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      FeaturedPlaylists featuredPlaylists2 = featuredPlaylists_JsonUtil0.createModelObject(jsonObject0);
      assertNull(featuredPlaylists2.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      FeaturedPlaylists featuredPlaylists1 = featuredPlaylists_Builder0.build();
      featuredPlaylists_Builder0.setMessage("*k+HG8ut~>;(");
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists_Builder0.build();
      featuredPlaylists1.builder();
      featuredPlaylists0.getPlaylists();
      featuredPlaylists0.getMessage();
      featuredPlaylists_Builder0.build();
      Paging<PlaylistSimplified> paging0 = featuredPlaylists1.getPlaylists();
      assertNull(paging0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = featuredPlaylists0.builder();
      assertNotSame(featuredPlaylists_Builder0, featuredPlaylists_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      featuredPlaylists0.getPlaylists();
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = featuredPlaylists_Builder0.setPlaylists((Paging<PlaylistSimplified>) null);
      FeaturedPlaylists.Builder featuredPlaylists_Builder2 = featuredPlaylists_Builder1.setMessage("");
      assertSame(featuredPlaylists_Builder2, featuredPlaylists_Builder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = featuredPlaylists_Builder0.setMessage("|/!b[;Fym+");
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder1.build();
      FeaturedPlaylists.Builder featuredPlaylists_Builder2 = featuredPlaylists_Builder1.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists_Builder0.build();
      featuredPlaylists_Builder2.setMessage("0%SC7g%`y");
      featuredPlaylists_Builder1.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists0.getMessage();
      String string0 = featuredPlaylists0.getMessage();
      assertEquals("|/!b[;Fym+", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_JsonUtil0.createModelObject(jsonObject0);
      assertNull(featuredPlaylists0.getMessage());
      
      featuredPlaylists0.builder();
      Paging<PlaylistSimplified> paging0 = featuredPlaylists0.getPlaylists();
      assertNull(paging0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      featuredPlaylists0.getPlaylists();
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = featuredPlaylists_Builder0.setPlaylists((Paging<PlaylistSimplified>) null);
      assertSame(featuredPlaylists_Builder1, featuredPlaylists_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = featuredPlaylists_Builder0.setMessage("Expected BEGIN_OBJECT but was ");
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder1.build();
      FeaturedPlaylists.Builder featuredPlaylists_Builder2 = featuredPlaylists0.builder();
      assertNotSame(featuredPlaylists_Builder0, featuredPlaylists_Builder2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      featuredPlaylists_Builder0.setMessage("com.google.gson.JsonArray");
      FeaturedPlaylists.Builder featuredPlaylists_Builder1 = new FeaturedPlaylists.Builder();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      FeaturedPlaylists.Builder featuredPlaylists_Builder2 = featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      featuredPlaylists0.getPlaylists();
      featuredPlaylists0.getPlaylists();
      FeaturedPlaylists.Builder featuredPlaylists_Builder3 = featuredPlaylists_Builder0.setMessage("");
      featuredPlaylists0.builder();
      featuredPlaylists0.getMessage();
      FeaturedPlaylists featuredPlaylists1 = featuredPlaylists_Builder3.build();
      featuredPlaylists1.builder();
      featuredPlaylists_Builder3.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists1.builder();
      featuredPlaylists_Builder3.setMessage("com.google.gson.JsonArray");
      featuredPlaylists0.getMessage();
      featuredPlaylists_Builder3.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists0.builder();
      featuredPlaylists1.getPlaylists();
      featuredPlaylists1.getMessage();
      featuredPlaylists_Builder2.setPlaylists((Paging<PlaylistSimplified>) null);
      featuredPlaylists1.builder();
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true).when(jsonObject0).has(anyString());
      featuredPlaylists0.getPlaylists();
      // Undeclared exception!
      try { 
        featuredPlaylists_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.special.FeaturedPlaylists$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject2 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject2).isJsonNull();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_JsonUtil0.createModelObject(jsonObject2);
      assertNull(featuredPlaylists0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FeaturedPlaylists.Builder featuredPlaylists_Builder0 = new FeaturedPlaylists.Builder();
      featuredPlaylists_Builder0.build();
      FeaturedPlaylists featuredPlaylists0 = featuredPlaylists_Builder0.build();
      featuredPlaylists0.builder();
      featuredPlaylists0.builder();
      FeaturedPlaylists.JsonUtil featuredPlaylists_JsonUtil0 = new FeaturedPlaylists.JsonUtil();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      Class<String> class0 = String.class;
      featuredPlaylists_JsonUtil0.createModelObjectArray(jsonArray0, class0);
      FeaturedPlaylists featuredPlaylists1 = featuredPlaylists_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(featuredPlaylists1);
  }
}
