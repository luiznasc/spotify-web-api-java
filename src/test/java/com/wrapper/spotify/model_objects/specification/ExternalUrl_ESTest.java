/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:03:45 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExternalUrl_ESTest extends ExternalUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExternalUrl.JsonUtil externalUrl_JsonUtil0 = new ExternalUrl.JsonUtil();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      externalUrl_JsonUtil0.createModelObjectArray(jsonArray0);
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      ExternalUrl externalUrl0 = externalUrl_JsonUtil0.createModelObject(jsonObject0);
      assertNull(externalUrl0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExternalUrl.Builder externalUrl_Builder0 = new ExternalUrl.Builder();
      ExternalUrl externalUrl0 = externalUrl_Builder0.build();
      Map<String, String> map0 = externalUrl0.getExternalUrls();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExternalUrl.Builder externalUrl_Builder0 = new ExternalUrl.Builder();
      ExternalUrl externalUrl0 = externalUrl_Builder0.build();
      ExternalUrl externalUrl1 = externalUrl_Builder0.build();
      externalUrl1.builder();
      externalUrl1.builder();
      // Undeclared exception!
      try { 
        externalUrl0.get("com.google.gson.JsonObject");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.ExternalUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExternalUrl.JsonUtil externalUrl_JsonUtil0 = new ExternalUrl.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn((Set) null).when(jsonObject0).entrySet();
      ExternalUrl externalUrl0 = externalUrl_JsonUtil0.createModelObject(jsonObject0);
      externalUrl0.getExternalUrls();
      externalUrl0.builder();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExternalUrl.JsonUtil externalUrl_JsonUtil0 = new ExternalUrl.JsonUtil();
      externalUrl_JsonUtil0.createModelObject((JsonObject) null);
      // Undeclared exception!
      try { 
        externalUrl_JsonUtil0.createModelObjectPaging("FNW", "9 ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Not a JSON Object: \"FNW\"
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExternalUrl.JsonUtil externalUrl_JsonUtil0 = new ExternalUrl.JsonUtil();
      JsonArray jsonArray0 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray0).size();
      JsonArray jsonArray1 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray1).size();
      externalUrl_JsonUtil0.createModelObjectArray(jsonArray1);
      JsonArray jsonArray2 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray2).size();
      Class<Object> class0 = Object.class;
      JsonArray jsonArray3 = mock(JsonArray.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(jsonArray3).size();
      Class<Object> class1 = Object.class;
      externalUrl_JsonUtil0.createModelObjectArray(jsonArray3, class1);
      externalUrl_JsonUtil0.createModelObjectArray(jsonArray2, class0);
      Class<Object> class2 = Object.class;
      externalUrl_JsonUtil0.createModelObjectArray(jsonArray0, class2);
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn((Set) null).when(jsonObject0).entrySet();
      // Undeclared exception!
      try { 
        externalUrl_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.JsonTreeReader", e);
      }
  }
}
