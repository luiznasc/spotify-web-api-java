/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:47:24 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.Cursor;
import com.wrapper.spotify.model_objects.specification.PagingCursorbased;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PagingCursorbased_ESTest extends PagingCursorbased_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Integer integer0 = new Integer(125);
      pagingCursorbased_Builder0.setTotal(integer0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      Integer integer1 = pagingCursorbased0.getTotal();
      assertEquals(125, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Integer integer0 = new Integer((-357));
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setTotal(integer0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Integer integer1 = pagingCursorbased0.getTotal();
      assertEquals((-357), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setNext("`=3gbb1/");
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      String string0 = pagingCursorbased0.getNext();
      assertEquals("`=3gbb1/", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      pagingCursorbased_Builder0.setNext("");
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      String string0 = pagingCursorbased0.getNext();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Integer integer0 = new Integer(93);
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setLimit(integer0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Integer integer1 = pagingCursorbased0.getLimit();
      assertEquals(93, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Integer integer0 = new Integer(0);
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setLimit(integer0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Integer integer1 = pagingCursorbased0.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Integer integer0 = new Integer((-482));
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setLimit(integer0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Integer integer1 = pagingCursorbased0.getLimit();
      assertEquals((-482), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Integer integer0 = new Integer((-65));
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setLimit(integer0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Integer integer1 = pagingCursorbased0.getLimit();
      assertEquals((-65), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Object[] objectArray0 = new Object[6];
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setItems(objectArray0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Object[] objectArray1 = pagingCursorbased0.getItems();
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      pagingCursorbased_Builder0.setHref("zAr) }nK5!X+z]diG+@");
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      String string0 = pagingCursorbased0.getHref();
      assertEquals("zAr) }nK5!X+z]diG+@", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      pagingCursorbased_Builder0.setHref("");
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      String string0 = pagingCursorbased0.getHref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Cursor[] cursorArray0 = new Cursor[9];
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setCursors(cursorArray0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder1.build();
      Cursor[] cursorArray1 = pagingCursorbased0.getCursors();
      assertSame(cursorArray0, cursorArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      Cursor[] cursorArray0 = new Cursor[0];
      pagingCursorbased_Builder0.setCursors(cursorArray0);
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      Cursor[] cursorArray1 = pagingCursorbased0.getCursors();
      assertSame(cursorArray1, cursorArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.addProperty("limit", "(T3~v?Z]f)&");
      PagingCursorbased.JsonUtil<Object> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<Object>();
      // Undeclared exception!
      try { 
        pagingCursorbased_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(T3~v?Z]f)&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PagingCursorbased.JsonUtil<String> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<String>();
      PagingCursorbased<String> pagingCursorbased0 = pagingCursorbased_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(pagingCursorbased0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PagingCursorbased.JsonUtil<Object> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<Object>();
      JsonObject jsonObject0 = new JsonObject();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_JsonUtil0.createModelObject(jsonObject0);
      Object[] objectArray0 = pagingCursorbased0.getItems();
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PagingCursorbased.JsonUtil<Object> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<Object>();
      JsonObject jsonObject0 = new JsonObject();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_JsonUtil0.createModelObject(jsonObject0);
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = pagingCursorbased0.builder();
      Integer integer0 = new Integer(0);
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder1 = pagingCursorbased_Builder0.setTotal(integer0);
      PagingCursorbased<Object> pagingCursorbased1 = pagingCursorbased_Builder1.build();
      Integer integer1 = pagingCursorbased1.getTotal();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PagingCursorbased.JsonUtil<Object> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<Object>();
      JsonObject jsonObject0 = new JsonObject();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_JsonUtil0.createModelObject(jsonObject0);
      String string0 = pagingCursorbased0.getNext();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PagingCursorbased.JsonUtil<Object> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<Object>();
      JsonObject jsonObject0 = new JsonObject();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_JsonUtil0.createModelObject(jsonObject0);
      Integer integer0 = pagingCursorbased0.getTotal();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      Integer integer0 = pagingCursorbased0.getLimit();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PagingCursorbased.JsonUtil<Object> pagingCursorbased_JsonUtil0 = new PagingCursorbased.JsonUtil<Object>();
      JsonObject jsonObject0 = new JsonObject();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_JsonUtil0.createModelObject(jsonObject0);
      String string0 = pagingCursorbased0.getHref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PagingCursorbased.Builder<Object> pagingCursorbased_Builder0 = new PagingCursorbased.Builder<Object>();
      PagingCursorbased<Object> pagingCursorbased0 = pagingCursorbased_Builder0.build();
      Cursor[] cursorArray0 = pagingCursorbased0.getCursors();
      assertNull(cursorArray0);
  }
}
