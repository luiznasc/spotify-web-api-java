/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:45:38 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.model_objects.specification.RecommendationsSeed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RecommendationsSeed_ESTest extends RecommendationsSeed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true).when(jsonObject0).has(anyString());
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil1 = new RecommendationsSeed.JsonUtil();
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject1).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject1).has(anyString());
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_JsonUtil1.createModelObject(jsonObject1);
      recommendationsSeed0.builder();
      // Undeclared exception!
      try { 
        recommendationsSeed_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.RecommendationsSeed$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_JsonUtil0.createModelObject(jsonObject0);
      assertNull(recommendationsSeed0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setType(modelObjectType0);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setId("L)::M:rgO$");
      Integer integer0 = new Integer(2768);
      recommendationsSeed_Builder0.setAfterFilteringSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setHref("J.K`K&MoA3LR4VYG");
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder3.build();
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed0.builder();
      recommendationsSeed0.getInitialPoolSize();
      recommendationsSeed_Builder4.setInitialPoolSize((Integer) null);
      recommendationsSeed0.getAfterFilteringSize();
      recommendationsSeed_Builder1.setAfterRelinkingSize((Integer) null);
      Integer integer1 = recommendationsSeed0.getAfterRelinkingSize();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(412);
      recommendationsSeed_Builder0.setInitialPoolSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setHref("");
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setType(modelObjectType0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder2.build();
      recommendationsSeed0.builder();
      recommendationsSeed0.builder();
      recommendationsSeed0.getAfterFilteringSize();
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder0.setAfterFilteringSize((Integer) null);
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder2.build();
      recommendationsSeed1.builder();
      recommendationsSeed1.builder();
      RecommendationsSeed recommendationsSeed2 = recommendationsSeed_Builder1.build();
      recommendationsSeed0.builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder1.setId("ieb-ifwjU4qL]R");
      Integer integer1 = new Integer((-292));
      recommendationsSeed_Builder3.setAfterRelinkingSize(integer1);
      recommendationsSeed2.getHref();
      recommendationsSeed1.getAfterFilteringSize();
      Integer integer2 = new Integer((-1401));
      recommendationsSeed_Builder4.setAfterRelinkingSize(integer2);
      recommendationsSeed_Builder3.setId("`lNLNk7%");
      recommendationsSeed_Builder3.setAfterRelinkingSize(integer0);
      ModelObjectType modelObjectType1 = recommendationsSeed1.getType();
      assertEquals("user", modelObjectType1.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setType(modelObjectType0);
      Integer integer0 = new Integer((-1444));
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setAfterFilteringSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed0.builder();
      recommendationsSeed_Builder3.setAfterFilteringSize(integer0);
      Integer integer1 = new Integer((-1444));
      recommendationsSeed_Builder2.setAfterFilteringSize(integer1);
      recommendationsSeed0.getAfterRelinkingSize();
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed0.builder();
      recommendationsSeed0.getAfterFilteringSize();
      recommendationsSeed0.getAfterFilteringSize();
      recommendationsSeed_Builder3.setHref((String) null);
      recommendationsSeed0.getId();
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed_Builder2.setAfterRelinkingSize(integer0);
      recommendationsSeed0.getType();
      Integer integer2 = new Integer((-1444));
      recommendationsSeed_Builder1.setAfterFilteringSize(integer2);
      recommendationsSeed0.getType();
      Integer integer3 = new Integer((-1444));
      recommendationsSeed_Builder5.setAfterFilteringSize((Integer) null);
      recommendationsSeed_Builder1.setAfterRelinkingSize(integer3);
      recommendationsSeed0.getType();
      recommendationsSeed_Builder0.setId((String) null);
      recommendationsSeed0.getInitialPoolSize();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder5.build();
      recommendationsSeed0.getAfterFilteringSize();
      recommendationsSeed1.getId();
      RecommendationsSeed.Builder recommendationsSeed_Builder6 = recommendationsSeed1.builder();
      assertNotSame(recommendationsSeed_Builder6, recommendationsSeed_Builder4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setId("");
      Integer integer0 = new Integer(7);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setAfterRelinkingSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setHref("sx+=pNyJ/NDx}ksW");
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      recommendationsSeed_Builder2.setType(modelObjectType0);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setAfterFilteringSize(integer0);
      recommendationsSeed_Builder3.build();
      recommendationsSeed_Builder4.setType(modelObjectType0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder4.build();
      recommendationsSeed0.getAfterFilteringSize();
      Integer integer1 = new Integer(7);
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed_Builder0.setInitialPoolSize(integer1);
      assertSame(recommendationsSeed_Builder0, recommendationsSeed_Builder5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(88);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setInitialPoolSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setHref("E*AwU`.,KiKN1!");
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setId("type");
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setAfterFilteringSize(integer0);
      recommendationsSeed_Builder4.setHref("w3])v~AxS\"Bv};");
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      recommendationsSeed_Builder0.setType(modelObjectType0);
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed_Builder4.setAfterRelinkingSize(integer0);
      Integer integer1 = new Integer(0);
      recommendationsSeed_Builder1.setAfterRelinkingSize(integer1);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder5.build();
      RecommendationsSeed.Builder recommendationsSeed_Builder6 = recommendationsSeed_Builder3.setInitialPoolSize(integer0);
      recommendationsSeed_Builder6.setHref("E*AwU`.,KiKN1!");
      Integer integer2 = recommendationsSeed0.getInitialPoolSize();
      RecommendationsSeed.Builder recommendationsSeed_Builder7 = recommendationsSeed_Builder0.setAfterFilteringSize(integer2);
      RecommendationsSeed.Builder recommendationsSeed_Builder8 = recommendationsSeed_Builder6.setAfterFilteringSize(integer0);
      recommendationsSeed_Builder6.setInitialPoolSize(integer2);
      recommendationsSeed0.getAfterFilteringSize();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder7.build();
      recommendationsSeed1.builder();
      recommendationsSeed_Builder6.setHref("E*AwU`.,KiKN1!");
      recommendationsSeed1.getAfterFilteringSize();
      recommendationsSeed1.getInitialPoolSize();
      recommendationsSeed1.getAfterFilteringSize();
      recommendationsSeed0.getType();
      recommendationsSeed_Builder4.setId("{fWbIqX]!6y`[");
      RecommendationsSeed recommendationsSeed2 = recommendationsSeed_Builder8.build();
      assertEquals(88, (int)recommendationsSeed2.getAfterFilteringSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer((-1172));
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setInitialPoolSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setHref("c|BWMC3e%bOmVOB`&8");
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setId("afterFilteringSize");
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder2.build();
      recommendationsSeed0.getAfterRelinkingSize();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder3.build();
      recommendationsSeed0.builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setAfterRelinkingSize((Integer) null);
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      recommendationsSeed_Builder4.setType(modelObjectType0);
      Integer integer1 = new Integer((-1172));
      recommendationsSeed_Builder1.setInitialPoolSize(integer1);
      recommendationsSeed1.getInitialPoolSize();
      recommendationsSeed0.getHref();
      recommendationsSeed1.builder();
      recommendationsSeed0.getType();
      recommendationsSeed1.getType();
      Integer integer2 = new Integer(31);
      recommendationsSeed_Builder1.setAfterFilteringSize(integer2);
      recommendationsSeed0.getId();
      recommendationsSeed0.getInitialPoolSize();
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed0.builder();
      assertNotSame(recommendationsSeed_Builder5, recommendationsSeed_Builder3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      recommendationsSeed_JsonUtil0.createModelObject((JsonObject) null);
      recommendationsSeed_JsonUtil0.createModelObject((JsonObject) null);
      // Undeclared exception!
      try { 
        recommendationsSeed_JsonUtil0.createModelObjectArray((JsonArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer((-1888));
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterFilteringSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setInitialPoolSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setId("");
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setHref("");
      recommendationsSeed_Builder2.setAfterFilteringSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder4.build();
      recommendationsSeed0.getType();
      recommendationsSeed_Builder3.build();
      Integer integer1 = new Integer((-1));
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed_Builder4.setAfterRelinkingSize(integer1);
      recommendationsSeed0.getInitialPoolSize();
      recommendationsSeed0.getAfterRelinkingSize();
      recommendationsSeed_Builder4.setType((ModelObjectType) null);
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_JsonUtil0.createModelObject(jsonObject0);
      recommendationsSeed1.getAfterFilteringSize();
      recommendationsSeed1.getAfterFilteringSize();
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      recommendationsSeed_Builder5.setType(modelObjectType0);
      RecommendationsSeed recommendationsSeed2 = recommendationsSeed_Builder4.build();
      assertEquals("", recommendationsSeed2.getHref());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setInitialPoolSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder0.build();
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed0.builder();
      Integer integer1 = new Integer((-2660));
      recommendationsSeed_Builder0.setAfterFilteringSize(integer1);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setId("=|");
      recommendationsSeed_Builder0.setAfterFilteringSize(integer0);
      recommendationsSeed_Builder1.setAfterFilteringSize(integer0);
      recommendationsSeed1.getInitialPoolSize();
      recommendationsSeed1.builder();
      recommendationsSeed1.getId();
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed0.builder();
      assertNotSame(recommendationsSeed_Builder4, recommendationsSeed_Builder3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setHref("com.wrapper.spotify.model_objects.specification.PagingCursorbased");
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setId("com.wrapper.spotify.model_objects.specification.PagingCursorbased");
      Integer integer0 = new Integer(1766);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setInitialPoolSize(integer0);
      recommendationsSeed_Builder3.setAfterFilteringSize((Integer) null);
      Integer integer1 = new Integer(0);
      recommendationsSeed_Builder2.setAfterRelinkingSize(integer1);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      Integer integer2 = recommendationsSeed0.getAfterRelinkingSize();
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setId("com.wrapper.spotify.model_objects.specification.RecommendationsSeed$Builder");
      Integer integer0 = new Integer(118);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setInitialPoolSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setAfterRelinkingSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder3.build();
      recommendationsSeed0.getAfterFilteringSize();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder1.build();
      assertEquals(118, (int)recommendationsSeed1.getInitialPoolSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterRelinkingSize(integer0);
      Integer integer1 = new Integer(0);
      recommendationsSeed_Builder1.setAfterRelinkingSize(integer1);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setId(">$,&<-#U1k");
      Integer integer2 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setAfterFilteringSize(integer2);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder3.build();
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      recommendationsSeed_Builder1.setType(modelObjectType0);
      recommendationsSeed0.getInitialPoolSize();
      Integer integer3 = new Integer((-302));
      recommendationsSeed_Builder3.setInitialPoolSize(integer3);
      recommendationsSeed_Builder1.setInitialPoolSize(integer0);
      String string0 = recommendationsSeed0.getId();
      assertEquals(">$,&<-#U1k", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setId("total");
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setAfterRelinkingSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setAfterFilteringSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setInitialPoolSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder4.build();
      recommendationsSeed0.getType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterFilteringSize(integer0);
      Integer integer1 = new Integer((-1106));
      recommendationsSeed_Builder0.setHref("album");
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setAfterRelinkingSize(integer1);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      recommendationsSeed0.getAfterRelinkingSize();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder1.build();
      recommendationsSeed1.getId();
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setId((String) null);
      recommendationsSeed_Builder3.setInitialPoolSize(integer0);
      recommendationsSeed_Builder3.setHref((String) null);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed0.builder();
      assertNotSame(recommendationsSeed_Builder4, recommendationsSeed_Builder2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setType(modelObjectType0);
      recommendationsSeed_Builder1.setId("com.wrapper.spotify.model_objects.AbstractModelObject");
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setHref("c0jF>-s2e[{y%y&`!");
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setAfterRelinkingSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setId("");
      recommendationsSeed_Builder1.setId("");
      recommendationsSeed_Builder4.setAfterFilteringSize(integer0);
      recommendationsSeed_Builder4.setId("/+QNr");
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder0.build();
      recommendationsSeed0.getType();
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder0.build();
      recommendationsSeed0.getAfterFilteringSize();
      Integer integer1 = recommendationsSeed1.getAfterFilteringSize();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterRelinkingSize(integer0);
      Integer integer1 = new Integer(16);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setInitialPoolSize(integer1);
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setType(modelObjectType0);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setId("");
      recommendationsSeed_Builder3.setAfterRelinkingSize(integer0);
      recommendationsSeed_Builder3.setAfterFilteringSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder4.build();
      recommendationsSeed0.builder();
      recommendationsSeed0.getHref();
      String string0 = recommendationsSeed0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setHref("com.wrapper.spotify.model_objects.specification.Paging$Builder");
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder0.setType(modelObjectType0);
      ModelObjectType modelObjectType1 = ModelObjectType.TRACK;
      Integer integer0 = new Integer(1);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder0.setAfterRelinkingSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder0.setType(modelObjectType1);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder4.build();
      recommendationsSeed0.builder();
      Integer integer1 = new Integer(0);
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder0.build();
      recommendationsSeed1.builder();
      recommendationsSeed1.builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed_Builder4.setAfterFilteringSize(integer1);
      Integer integer2 = new Integer(0);
      recommendationsSeed_Builder2.setAfterRelinkingSize(integer2);
      recommendationsSeed0.getInitialPoolSize();
      recommendationsSeed_Builder0.build();
      Integer integer3 = recommendationsSeed0.getAfterRelinkingSize();
      recommendationsSeed_Builder1.setAfterFilteringSize(integer3);
      recommendationsSeed_Builder3.setId("com.wrapper.spotify.model_objects.specification.Paging$Builder");
      RecommendationsSeed.Builder recommendationsSeed_Builder6 = recommendationsSeed_Builder0.setId("o9803-J4");
      assertSame(recommendationsSeed_Builder6, recommendationsSeed_Builder5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterRelinkingSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setId("^z|0~E>9;Tjh/JL)v");
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder2.build();
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed0.builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed_Builder3.setHref("^z|0~E>9;Tjh/JL)v");
      assertSame(recommendationsSeed_Builder4, recommendationsSeed_Builder3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      recommendationsSeed_Builder0.setInitialPoolSize((Integer) null);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder0.build();
      recommendationsSeed0.builder();
      recommendationsSeed0.builder();
      recommendationsSeed0.getType();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterRelinkingSize((Integer) null);
      assertSame(recommendationsSeed_Builder0, recommendationsSeed_Builder1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setHref("M]>h6Q_0H");
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      String string0 = recommendationsSeed0.getHref();
      assertEquals("M]>h6Q_0H", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setId("");
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      recommendationsSeed_Builder1.setType(modelObjectType0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      Integer integer0 = recommendationsSeed0.getAfterRelinkingSize();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer(9);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterFilteringSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder1.build();
      recommendationsSeed0.getInitialPoolSize();
      recommendationsSeed_Builder1.build();
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder1.setAfterFilteringSize(integer0);
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      recommendationsSeed_Builder1.setType(modelObjectType0);
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder2.setHref("{$/Yo~C)Wu'\"w2SKdMp");
      assertSame(recommendationsSeed_Builder3, recommendationsSeed_Builder0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0, (JsonElement) null).when(jsonObject0).get(anyString());
      doReturn(true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        recommendationsSeed_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.specification.RecommendationsSeed$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(2675);
      Integer integer1 = new Integer(2675);
      assertEquals(2675, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer((-2140));
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterRelinkingSize(integer0);
      recommendationsSeed_Builder1.setInitialPoolSize(integer0);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(recommendationsSeed0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_JsonUtil0.createModelObject(jsonObject0);
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = recommendationsSeed0.builder();
      recommendationsSeed0.getId();
      Integer integer0 = new Integer(0);
      recommendationsSeed_Builder0.setAfterFilteringSize(integer0);
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed0.builder();
      assertNotSame(recommendationsSeed_Builder1, recommendationsSeed_Builder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RecommendationsSeed.Builder recommendationsSeed_Builder0 = new RecommendationsSeed.Builder();
      Integer integer0 = new Integer((-937));
      RecommendationsSeed.Builder recommendationsSeed_Builder1 = recommendationsSeed_Builder0.setAfterRelinkingSize(integer0);
      Integer integer1 = new Integer(4167);
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      recommendationsSeed_Builder0.setType(modelObjectType0);
      recommendationsSeed_Builder1.setAfterFilteringSize(integer1);
      RecommendationsSeed recommendationsSeed0 = recommendationsSeed_Builder0.build();
      Integer integer2 = recommendationsSeed0.getAfterFilteringSize();
      RecommendationsSeed.Builder recommendationsSeed_Builder2 = recommendationsSeed_Builder0.setAfterFilteringSize(integer2);
      recommendationsSeed0.getAfterRelinkingSize();
      recommendationsSeed0.getType();
      Integer integer3 = new Integer((-937));
      RecommendationsSeed.Builder recommendationsSeed_Builder3 = recommendationsSeed_Builder1.setInitialPoolSize(integer3);
      RecommendationsSeed recommendationsSeed1 = recommendationsSeed_Builder0.build();
      ModelObjectType modelObjectType1 = ModelObjectType.ARTIST;
      recommendationsSeed_Builder1.setType(modelObjectType1);
      RecommendationsSeed recommendationsSeed2 = recommendationsSeed_Builder2.build();
      Integer integer4 = new Integer(748);
      RecommendationsSeed.Builder recommendationsSeed_Builder4 = recommendationsSeed2.builder();
      RecommendationsSeed.Builder recommendationsSeed_Builder5 = recommendationsSeed_Builder3.setAfterRelinkingSize(integer4);
      recommendationsSeed0.builder();
      recommendationsSeed2.getInitialPoolSize();
      recommendationsSeed0.getId();
      recommendationsSeed_Builder5.setAfterFilteringSize(integer0);
      recommendationsSeed2.getHref();
      recommendationsSeed1.getAfterRelinkingSize();
      recommendationsSeed_Builder4.setHref("n[");
      RecommendationsSeed.JsonUtil recommendationsSeed_JsonUtil0 = new RecommendationsSeed.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false, false, false, false).when(jsonObject0).has(anyString());
      recommendationsSeed_JsonUtil0.createModelObject(jsonObject0);
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      JsonObject jsonObject1 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
  }
}
