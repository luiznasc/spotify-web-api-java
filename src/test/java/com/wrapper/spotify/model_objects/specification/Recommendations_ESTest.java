/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:57:03 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.wrapper.spotify.model_objects.specification.Recommendations;
import com.wrapper.spotify.model_objects.specification.RecommendationsSeed;
import com.wrapper.spotify.model_objects.specification.TrackSimplified;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Recommendations_ESTest extends Recommendations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Recommendations.Builder recommendations_Builder0 = new Recommendations.Builder();
      TrackSimplified[] trackSimplifiedArray0 = new TrackSimplified[7];
      Recommendations.Builder recommendations_Builder1 = recommendations_Builder0.setTracks(trackSimplifiedArray0);
      Recommendations recommendations0 = recommendations_Builder1.build();
      TrackSimplified[] trackSimplifiedArray1 = recommendations0.getTracks();
      assertSame(trackSimplifiedArray0, trackSimplifiedArray1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Recommendations.Builder recommendations_Builder0 = new Recommendations.Builder();
      RecommendationsSeed[] recommendationsSeedArray0 = new RecommendationsSeed[5];
      Recommendations.Builder recommendations_Builder1 = recommendations_Builder0.setSeeds(recommendationsSeedArray0);
      Recommendations recommendations0 = recommendations_Builder1.build();
      RecommendationsSeed[] recommendationsSeedArray1 = recommendations0.getSeeds();
      assertSame(recommendationsSeedArray1, recommendationsSeedArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Recommendations.JsonUtil recommendations_JsonUtil0 = new Recommendations.JsonUtil();
      JsonElement jsonElement0 = mock(JsonElement.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonElement0).isJsonNull();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(jsonElement0).when(jsonObject0).get(anyString());
      doReturn((JsonArray) null).when(jsonObject0).getAsJsonArray(anyString());
      doReturn(false, true).when(jsonObject0).has(anyString());
      // Undeclared exception!
      try { 
        recommendations_JsonUtil0.createModelObject(jsonObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.wrapper.spotify.model_objects.AbstractModelObject$JsonUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Recommendations.JsonUtil recommendations_JsonUtil0 = new Recommendations.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonObject0).isJsonNull();
      Recommendations recommendations0 = recommendations_JsonUtil0.createModelObject(jsonObject0);
      assertNull(recommendations0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Recommendations.JsonUtil recommendations_JsonUtil0 = new Recommendations.JsonUtil();
      Recommendations recommendations0 = recommendations_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(recommendations0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Recommendations.JsonUtil recommendations_JsonUtil0 = new Recommendations.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      Recommendations recommendations0 = recommendations_JsonUtil0.createModelObject(jsonObject0);
      RecommendationsSeed[] recommendationsSeedArray0 = recommendations0.getSeeds();
      assertNull(recommendationsSeedArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Recommendations.JsonUtil recommendations_JsonUtil0 = new Recommendations.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      Recommendations recommendations0 = recommendations_JsonUtil0.createModelObject(jsonObject0);
      Recommendations.Builder recommendations_Builder0 = recommendations0.builder();
      assertNotNull(recommendations_Builder0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Recommendations.JsonUtil recommendations_JsonUtil0 = new Recommendations.JsonUtil();
      JsonObject jsonObject0 = mock(JsonObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonObject0).isJsonNull();
      doReturn(false, false).when(jsonObject0).has(anyString());
      Recommendations recommendations0 = recommendations_JsonUtil0.createModelObject(jsonObject0);
      TrackSimplified[] trackSimplifiedArray0 = recommendations0.getTracks();
      assertNull(trackSimplifiedArray0);
  }
}
