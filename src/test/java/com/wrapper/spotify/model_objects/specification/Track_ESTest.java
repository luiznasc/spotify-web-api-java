/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 22:33:11 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonObject;
import com.neovisionaries.i18n.CountryCode;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.model_objects.miscellaneous.Restrictions;
import com.wrapper.spotify.model_objects.specification.AlbumSimplified;
import com.wrapper.spotify.model_objects.specification.ArtistSimplified;
import com.wrapper.spotify.model_objects.specification.ExternalId;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import com.wrapper.spotify.model_objects.specification.Paging;
import com.wrapper.spotify.model_objects.specification.Track;
import com.wrapper.spotify.model_objects.specification.TrackLink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Track_ESTest extends Track_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setDurationMs(integer0);
      Boolean boolean1 = new Boolean(true);
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      track_Builder3.setType(modelObjectType0);
      track_Builder2.setIsPlayable(boolean1);
      Track.Builder track_Builder4 = track_Builder3.setName("qm ");
      Track.Builder track_Builder5 = track_Builder4.setTrackNumber(integer0);
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder6 = track_Builder5.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder6.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder6.build();
      Track track3 = track_Builder0.build();
      track2.getIsExplicit();
      Boolean.logicalAnd(true, true);
      track_Builder4.setDiscNumber(integer0);
      track2.getAlbum();
      track0.getTrackNumber();
      track3.getPreviewUrl();
      track1.getExternalIds();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      track_Builder0.setUri("");
      Track.Builder track_Builder1 = track_Builder0.setId("MA");
      Track.Builder track_Builder2 = track_Builder1.setIsPlayable((Boolean) null);
      Track track0 = track_Builder2.build();
      track0.getRestrictions();
      track_Builder2.setRestrictions((Restrictions) null);
      track0.getUri();
      track0.getId();
      track0.getId();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Track.Builder track_Builder1 = track_Builder0.setId("");
      Boolean boolean0 = Boolean.valueOf(true);
      Track.Builder track_Builder2 = track_Builder1.setIsPlayable(boolean0);
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      track_Builder2.setType(modelObjectType0);
      TrackLink trackLink0 = trackLink_Builder0.build();
      Track.Builder track_Builder3 = track_Builder2.setLinkedFrom(trackLink0);
      Track.Builder track_Builder4 = track_Builder3.setAvailableMarkets((CountryCode[]) null);
      Boolean.compare(true, true);
      Track track0 = track_Builder4.build();
      track0.getExternalIds();
      track0.getLinkedFrom();
      trackLink_Builder0.setUri("com.wrapper.spotify.model_objects.specification.Track$JsonUtil");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      track_Builder0.setPreviewUrl("tZOZ");
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setExplicit(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      track_Builder3.setType(modelObjectType0);
      track_Builder2.setIsPlayable(boolean1);
      Track.Builder track_Builder4 = track_Builder3.setName("qm ");
      Track.Builder track_Builder5 = track_Builder4.setTrackNumber(integer0);
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder6 = track_Builder5.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder6.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder6.build();
      Track track3 = track_Builder0.build();
      Boolean boolean2 = track2.getIsExplicit();
      Boolean.logicalAnd(true, true);
      track_Builder3.setIsPlayable(boolean2);
      track2.getAlbum();
      track0.getTrackNumber();
      track3.getPreviewUrl();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = new Integer(0);
      Track.Builder track_Builder1 = track_Builder0.setDurationMs(integer0);
      String string0 = "IO~";
      Boolean boolean0 = new Boolean("IO~");
      Track.Builder track_Builder2 = track_Builder1.setExplicit(boolean0);
      Track.Builder track_Builder3 = track_Builder2.setPreviewUrl("RUS");
      Track.Builder track_Builder4 = track_Builder3.setName("RUS");
      track_Builder4.setName("RUS");
      Track track0 = track_Builder4.build();
      track0.getDurationMs();
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      // Undeclared exception!
      try { 
        jsonObject0.getAsString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setExplicit(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Track.Builder track_Builder4 = track_Builder3.setType(modelObjectType0);
      track_Builder0.setHref("name");
      Track.Builder track_Builder5 = track_Builder3.setName("name");
      Track.Builder track_Builder6 = track_Builder5.setTrackNumber(integer0);
      track_Builder6.setHref("");
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder7 = track_Builder6.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder7.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder4.build();
      Track track3 = track_Builder0.build();
      Boolean boolean2 = track2.getIsExplicit();
      Boolean.logicalAnd(true, true);
      track_Builder3.setIsPlayable(boolean2);
      track2.getAlbum();
      track0.getTrackNumber();
      track3.getPreviewUrl();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setExplicit(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Track.Builder track_Builder4 = track_Builder3.setType(modelObjectType0);
      track_Builder0.setHref("name");
      Track.Builder track_Builder5 = track_Builder3.setName("name");
      Track.Builder track_Builder6 = track_Builder5.setTrackNumber(integer0);
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder7 = track_Builder6.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder7.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder4.build();
      Track track3 = track_Builder0.build();
      Boolean boolean2 = track2.getIsExplicit();
      Boolean.logicalAnd(true, true);
      track_Builder3.setIsPlayable(boolean2);
      track2.getAlbum();
      track0.getTrackNumber();
      track3.getPreviewUrl();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setExplicit(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      track_Builder3.setType(modelObjectType0);
      track_Builder2.setIsPlayable(boolean1);
      Track.Builder track_Builder4 = track_Builder3.setName("name");
      Track.Builder track_Builder5 = track_Builder4.setTrackNumber(integer0);
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder6 = track_Builder5.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder6.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder6.build();
      track_Builder0.build();
      Boolean boolean2 = track2.getIsExplicit();
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      track_Builder3.setIsPlayable(boolean2);
      track2.getAlbum();
      track2.getTrackNumber();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setExplicit(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      track_Builder3.setType(modelObjectType0);
      track_Builder2.setIsPlayable(boolean1);
      Track.Builder track_Builder4 = track_Builder3.setName("name");
      Track.Builder track_Builder5 = track_Builder4.setTrackNumber(integer0);
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder6 = track_Builder5.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder6.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder6.build();
      track_Builder0.build();
      Boolean boolean2 = track2.getIsPlayable();
      Boolean.logicalAnd(true, true);
      track_Builder3.setIsPlayable(boolean2);
      track2.getAlbum();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Integer integer0 = Integer.valueOf((-719));
      assertNotNull(integer0);
      assertEquals((-719), (int)integer0);
      
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotNull(track_Builder2);
      assertEquals(1, countryCodeArray0.length);
      
      Track track0 = track_Builder1.build();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertNotNull(track0);
      assertNull(track0.getType());
      assertNull(track0.getHref());
      assertNull(track0.getDurationMs());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getName());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertEquals((-719), (int)track0.getPopularity());
      assertNull(track0.getUri());
      
      TrackLink trackLink0 = track0.getLinkedFrom();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertNull(trackLink0);
      assertNull(track0.getType());
      assertNull(track0.getHref());
      assertNull(track0.getDurationMs());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getName());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertEquals((-719), (int)track0.getPopularity());
      assertNull(track0.getUri());
      
      Track.Builder track_Builder3 = track_Builder0.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder1);
      assertNotNull(track_Builder3);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Track.Builder track_Builder4 = track_Builder2.setExplicit(boolean0);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertNotNull(track_Builder4);
      assertEquals(1, countryCodeArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = Boolean.logicalXor(true, true);
      assertFalse(boolean2);
      
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Track.Builder track_Builder5 = track_Builder4.setType(modelObjectType0);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder5, track_Builder4);
      assertSame(track_Builder5, track_Builder1);
      assertSame(track_Builder5, track_Builder2);
      assertSame(track_Builder5, track_Builder3);
      assertSame(track_Builder5, track_Builder0);
      assertNotNull(track_Builder5);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      
      Track.Builder track_Builder6 = track_Builder2.setIsPlayable(boolean1);
      assertSame(track_Builder6, track_Builder5);
      assertSame(track_Builder6, track_Builder0);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder4);
      assertNotNull(track_Builder6);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      
      Track.Builder track_Builder7 = track_Builder4.setName("name");
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertNotNull(track_Builder7);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      
      Track.Builder track_Builder8 = track_Builder7.setTrackNumber(integer0);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertNotNull(track_Builder8);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      
      Track track1 = track_Builder2.build();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNotNull(track1);
      assertFalse(track1.getIsExplicit());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getPreviewUrl());
      assertTrue(track1.getIsPlayable());
      assertNull(track1.getDurationMs());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      AlbumSimplified albumSimplified0 = track1.getAlbum();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNull(albumSimplified0);
      assertFalse(track1.getIsExplicit());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getPreviewUrl());
      assertTrue(track1.getIsPlayable());
      assertNull(track1.getDurationMs());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      Track.Builder track_Builder9 = track_Builder8.setAlbum((AlbumSimplified) null);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertNotNull(track_Builder9);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      
      String string0 = track1.getHref();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNull(string0);
      assertFalse(track1.getIsExplicit());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getPreviewUrl());
      assertTrue(track1.getIsPlayable());
      assertNull(track1.getDurationMs());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      Track.Builder track_Builder10 = track1.builder();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNotSame(track_Builder10, track_Builder1);
      assertNotSame(track_Builder10, track_Builder2);
      assertNotSame(track_Builder10, track_Builder8);
      assertNotSame(track_Builder10, track_Builder4);
      assertNotSame(track_Builder10, track_Builder6);
      assertNotSame(track_Builder10, track_Builder7);
      assertNotSame(track_Builder10, track_Builder5);
      assertNotSame(track_Builder10, track_Builder9);
      assertNotSame(track_Builder10, track_Builder0);
      assertNotSame(track_Builder10, track_Builder3);
      assertNotNull(track_Builder10);
      assertFalse(track1.getIsExplicit());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getPreviewUrl());
      assertTrue(track1.getIsPlayable());
      assertNull(track1.getDurationMs());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder10.equals((Object)track_Builder1));
      assertFalse(track_Builder10.equals((Object)track_Builder2));
      assertFalse(track_Builder10.equals((Object)track_Builder8));
      assertFalse(track_Builder10.equals((Object)track_Builder4));
      assertFalse(track_Builder10.equals((Object)track_Builder6));
      assertFalse(track_Builder10.equals((Object)track_Builder7));
      assertFalse(track_Builder10.equals((Object)track_Builder5));
      assertFalse(track_Builder10.equals((Object)track_Builder9));
      assertFalse(track_Builder10.equals((Object)track_Builder0));
      assertFalse(track_Builder10.equals((Object)track_Builder3));
      
      Integer integer1 = track1.getDurationMs();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNull(integer1);
      assertFalse(track1.getIsExplicit());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getPreviewUrl());
      assertTrue(track1.getIsPlayable());
      assertNull(track1.getDurationMs());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      
      Track.Builder track_Builder11 = track_Builder9.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder9);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder3);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder11, track_Builder6);
      assertSame(track_Builder11, track_Builder7);
      assertSame(track_Builder11, track_Builder4);
      assertSame(track_Builder11, track_Builder1);
      assertSame(track_Builder11, track_Builder8);
      assertSame(track_Builder11, track_Builder2);
      assertSame(track_Builder11, track_Builder0);
      assertNotSame(track_Builder11, track_Builder10);
      assertSame(track_Builder11, track_Builder3);
      assertSame(track_Builder11, track_Builder5);
      assertSame(track_Builder11, track_Builder9);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder11);
      assertNotNull(track_Builder11);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track_Builder11.equals((Object)track_Builder10));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      Track track2 = track_Builder9.build();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder9);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder3);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNotSame(track2, track1);
      assertNotSame(track2, track0);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder11);
      assertNotNull(track2);
      assertEquals("name", track2.getName());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getId());
      assertTrue(track2.getIsPlayable());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getDurationMs());
      assertFalse(track2.getIsExplicit());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getHref());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      Track track3 = track_Builder0.build();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertNotSame(track3, track2);
      assertNotSame(track3, track0);
      assertNotSame(track3, track1);
      assertNotNull(track3);
      assertNull(track3.getPreviewUrl());
      assertNull(track3.getUri());
      assertNull(track3.getId());
      assertEquals((-719), (int)track3.getTrackNumber());
      assertNull(track3.getDurationMs());
      assertNull(track3.getDiscNumber());
      assertFalse(track3.getIsExplicit());
      assertNull(track3.getHref());
      assertEquals(ModelObjectType.TRACK, track3.getType());
      assertTrue(track3.getIsPlayable());
      assertEquals((-719), (int)track3.getPopularity());
      assertEquals("name", track3.getName());
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track3.equals((Object)track2));
      assertFalse(track3.equals((Object)track0));
      assertFalse(track3.equals((Object)track1));
      
      Boolean boolean3 = track2.getIsExplicit();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder9);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder3);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertNotSame(track2, track0);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder11);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertEquals("name", track2.getName());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getId());
      assertTrue(track2.getIsPlayable());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getDurationMs());
      assertFalse(track2.getIsExplicit());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getHref());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      
      boolean boolean4 = Boolean.logicalAnd(true, true);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      
      Track.Builder track_Builder12 = track_Builder4.setIsPlayable(boolean3);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder12);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder12);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder4, track_Builder12);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder9);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder12);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder12);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder12);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder3);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder1);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertNotSame(track2, track0);
      assertSame(track_Builder12, track_Builder2);
      assertSame(track_Builder12, track_Builder1);
      assertSame(track_Builder12, track_Builder0);
      assertSame(track_Builder12, track_Builder9);
      assertNotSame(track_Builder12, track_Builder10);
      assertSame(track_Builder12, track_Builder4);
      assertSame(track_Builder12, track_Builder11);
      assertSame(track_Builder12, track_Builder3);
      assertSame(track_Builder12, track_Builder6);
      assertSame(track_Builder12, track_Builder5);
      assertSame(track_Builder12, track_Builder7);
      assertSame(track_Builder12, track_Builder8);
      assertNotNull(track_Builder12);
      assertEquals("name", track2.getName());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getId());
      assertTrue(track2.getIsPlayable());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getDurationMs());
      assertFalse(track2.getIsExplicit());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getHref());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(track_Builder12.equals((Object)track_Builder10));
      
      AlbumSimplified albumSimplified1 = track2.getAlbum();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder9);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder12);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder12);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder12);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder6);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder12);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder3);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder12);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertNotSame(track2, track0);
      assertSame(track_Builder4, track_Builder12);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder11);
      assertNull(albumSimplified1);
      assertEquals("name", track2.getName());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getId());
      assertTrue(track2.getIsPlayable());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getDurationMs());
      assertFalse(track2.getIsExplicit());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getHref());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Integer integer0 = Integer.valueOf((-719));
      assertNotNull(integer0);
      assertEquals((-719), (int)integer0);
      
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotNull(track_Builder2);
      assertEquals(1, countryCodeArray0.length);
      
      Track track0 = track_Builder1.build();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track0);
      assertNull(track0.getHref());
      assertEquals((-719), (int)track0.getPopularity());
      assertNull(track0.getId());
      assertNull(track0.getUri());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getDurationMs());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsPlayable());
      
      TrackLink trackLink0 = track0.getLinkedFrom();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertNull(trackLink0);
      assertNull(track0.getHref());
      assertEquals((-719), (int)track0.getPopularity());
      assertNull(track0.getId());
      assertNull(track0.getUri());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getDurationMs());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsPlayable());
      
      Track.Builder track_Builder3 = track_Builder0.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder1);
      assertNotNull(track_Builder3);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Track.Builder track_Builder4 = track_Builder2.setExplicit(boolean0);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder4);
      assertEquals(1, countryCodeArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = Boolean.logicalXor(true, true);
      assertFalse(boolean2);
      
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Track.Builder track_Builder5 = track_Builder4.setType(modelObjectType0);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder5, track_Builder3);
      assertSame(track_Builder5, track_Builder2);
      assertSame(track_Builder5, track_Builder1);
      assertSame(track_Builder5, track_Builder0);
      assertSame(track_Builder5, track_Builder4);
      assertNotNull(track_Builder5);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      Track.Builder track_Builder6 = track_Builder2.setIsPlayable(boolean1);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder0);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder5);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder6);
      assertNotNull(track_Builder6);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      
      Track.Builder track_Builder7 = track_Builder4.setName("name");
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder7);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      Track.Builder track_Builder8 = track_Builder7.setTrackNumber(integer0);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder8);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      Track track1 = track_Builder2.build();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertNotNull(track1);
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getHref());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals((-719), (int)track1.getPopularity());
      assertNull(track1.getId());
      assertEquals("name", track1.getName());
      assertNull(track1.getDiscNumber());
      assertTrue(track1.getIsPlayable());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      AlbumSimplified albumSimplified0 = track1.getAlbum();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertNull(albumSimplified0);
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getHref());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals((-719), (int)track1.getPopularity());
      assertNull(track1.getId());
      assertEquals("name", track1.getName());
      assertNull(track1.getDiscNumber());
      assertTrue(track1.getIsPlayable());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      Track.Builder track_Builder9 = track_Builder8.setAlbum((AlbumSimplified) null);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder9);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      
      String string0 = track1.getHref();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertNull(string0);
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getHref());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals((-719), (int)track1.getPopularity());
      assertNull(track1.getId());
      assertEquals("name", track1.getName());
      assertNull(track1.getDiscNumber());
      assertTrue(track1.getIsPlayable());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      Track.Builder track_Builder10 = track1.builder();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertNotSame(track1, track0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertNotSame(track_Builder10, track_Builder8);
      assertNotSame(track_Builder10, track_Builder0);
      assertNotSame(track_Builder10, track_Builder7);
      assertNotSame(track_Builder10, track_Builder6);
      assertNotSame(track_Builder10, track_Builder5);
      assertNotSame(track_Builder10, track_Builder3);
      assertNotSame(track_Builder10, track_Builder4);
      assertNotSame(track_Builder10, track_Builder2);
      assertNotSame(track_Builder10, track_Builder1);
      assertNotSame(track_Builder10, track_Builder9);
      assertNotNull(track_Builder10);
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getHref());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals((-719), (int)track1.getPopularity());
      assertNull(track1.getId());
      assertEquals("name", track1.getName());
      assertNull(track1.getDiscNumber());
      assertTrue(track1.getIsPlayable());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder10.equals((Object)track_Builder8));
      assertFalse(track_Builder10.equals((Object)track_Builder0));
      assertFalse(track_Builder10.equals((Object)track_Builder7));
      assertFalse(track_Builder10.equals((Object)track_Builder6));
      assertFalse(track_Builder10.equals((Object)track_Builder5));
      assertFalse(track_Builder10.equals((Object)track_Builder3));
      assertFalse(track_Builder10.equals((Object)track_Builder4));
      assertFalse(track_Builder10.equals((Object)track_Builder2));
      assertFalse(track_Builder10.equals((Object)track_Builder1));
      assertFalse(track_Builder10.equals((Object)track_Builder9));
      
      Integer integer1 = track1.getDurationMs();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertNotSame(track1, track0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertNull(integer1);
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getHref());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals((-719), (int)track1.getPopularity());
      assertNull(track1.getId());
      assertEquals("name", track1.getName());
      assertNull(track1.getDiscNumber());
      assertTrue(track1.getIsPlayable());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      
      Track.Builder track_Builder11 = track_Builder9.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder11);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder8);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder11, track_Builder3);
      assertSame(track_Builder11, track_Builder4);
      assertNotSame(track_Builder11, track_Builder10);
      assertSame(track_Builder11, track_Builder2);
      assertSame(track_Builder11, track_Builder1);
      assertSame(track_Builder11, track_Builder8);
      assertSame(track_Builder11, track_Builder0);
      assertSame(track_Builder11, track_Builder9);
      assertSame(track_Builder11, track_Builder7);
      assertSame(track_Builder11, track_Builder6);
      assertSame(track_Builder11, track_Builder5);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder11);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track_Builder11.equals((Object)track_Builder10));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      Track track2 = track_Builder9.build();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder11);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder8);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track2, track1);
      assertNotSame(track2, track0);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track2);
      assertNull(track2.getHref());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getDurationMs());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertTrue(track2.getIsExplicit());
      assertNull(track2.getId());
      assertNull(track2.getPreviewUrl());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      Track track3 = track_Builder0.build();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertNotSame(track3, track1);
      assertNotSame(track3, track2);
      assertNotSame(track3, track0);
      assertNotNull(track3);
      assertEquals(ModelObjectType.TRACK, track3.getType());
      assertNull(track3.getHref());
      assertNull(track3.getUri());
      assertTrue(track3.getIsPlayable());
      assertNull(track3.getPreviewUrl());
      assertNull(track3.getId());
      assertTrue(track3.getIsExplicit());
      assertEquals("name", track3.getName());
      assertEquals((-719), (int)track3.getTrackNumber());
      assertEquals((-719), (int)track3.getPopularity());
      assertNull(track3.getDiscNumber());
      assertNull(track3.getDurationMs());
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track3.equals((Object)track1));
      assertFalse(track3.equals((Object)track2));
      assertFalse(track3.equals((Object)track0));
      
      Boolean boolean3 = track2.getIsExplicit();
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder11);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder8);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder11);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertNotSame(track2, track0);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertNull(track2.getHref());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getDurationMs());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertTrue(track2.getIsExplicit());
      assertNull(track2.getId());
      assertNull(track2.getPreviewUrl());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      
      boolean boolean4 = Boolean.logicalAnd(true, true);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      
      Track.Builder track_Builder12 = track_Builder4.setIsPlayable(boolean3);
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder12);
      assertSame(track_Builder1, track_Builder9);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder12);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder12);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder11);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder12);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder12);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder8);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder12);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertNotSame(track2, track0);
      assertNotSame(track_Builder12, track_Builder10);
      assertSame(track_Builder12, track_Builder3);
      assertSame(track_Builder12, track_Builder4);
      assertSame(track_Builder12, track_Builder2);
      assertSame(track_Builder12, track_Builder7);
      assertSame(track_Builder12, track_Builder11);
      assertSame(track_Builder12, track_Builder6);
      assertSame(track_Builder12, track_Builder5);
      assertSame(track_Builder12, track_Builder8);
      assertSame(track_Builder12, track_Builder1);
      assertSame(track_Builder12, track_Builder9);
      assertSame(track_Builder12, track_Builder0);
      assertNotNull(track_Builder12);
      assertNull(track2.getHref());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getDurationMs());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertTrue(track2.getIsExplicit());
      assertNull(track2.getId());
      assertNull(track2.getPreviewUrl());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(track2.equals((Object)track0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean4));
      assertFalse(track_Builder12.equals((Object)track_Builder10));
      
      AlbumSimplified albumSimplified1 = track2.getAlbum();
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder11);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder12);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder12);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder12);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder8);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder12);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder6);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder12);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder11);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertNotSame(track2, track0);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder12);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNull(albumSimplified1);
      assertNull(track2.getHref());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getDurationMs());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertTrue(track2.getIsExplicit());
      assertNull(track2.getId());
      assertNull(track2.getPreviewUrl());
      assertEquals((-719), (int)track2.getPopularity());
      assertNull(track2.getUri());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(track2.equals((Object)track0));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      String string1 = track3.getName();
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder8);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertNotSame(track3, track1);
      assertNotSame(track3, track2);
      assertNotSame(track3, track0);
      assertNotNull(string1);
      assertEquals("name", string1);
      assertEquals(ModelObjectType.TRACK, track3.getType());
      assertNull(track3.getHref());
      assertNull(track3.getUri());
      assertTrue(track3.getIsPlayable());
      assertNull(track3.getPreviewUrl());
      assertNull(track3.getId());
      assertTrue(track3.getIsExplicit());
      assertEquals("name", track3.getName());
      assertEquals((-719), (int)track3.getTrackNumber());
      assertEquals((-719), (int)track3.getPopularity());
      assertNull(track3.getDiscNumber());
      assertNull(track3.getDurationMs());
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track3.equals((Object)track1));
      assertFalse(track3.equals((Object)track2));
      assertFalse(track3.equals((Object)track0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      assertNotNull(trackLink_Builder0);
      
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Track.Builder track_Builder1 = track_Builder0.setExplicit(boolean0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      Track.Builder track_Builder2 = track_Builder1.setType(modelObjectType0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotNull(track_Builder2);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getPopularity());
      assertNull(track0.getId());
      
      Restrictions restrictions0 = track0.getRestrictions();
      assertNull(restrictions0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getPopularity());
      assertNull(track0.getId());
      
      Track track1 = track_Builder2.build();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track1, track0);
      assertNotNull(track1);
      assertEquals(ModelObjectType.GENRE, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getHref());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getPopularity());
      assertNull(track1.getId());
      assertNull(track1.getUri());
      assertFalse(track1.equals((Object)track0));
      
      ExternalId externalId0 = track1.getExternalIds();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track1, track0);
      assertNull(externalId0);
      assertEquals(ModelObjectType.GENRE, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getHref());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getPopularity());
      assertNull(track1.getId());
      assertNull(track1.getUri());
      assertFalse(track1.equals((Object)track0));
      
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      assertNotNull(trackLink_JsonUtil0);
      
      TrackLink trackLink0 = trackLink_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(trackLink0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getType());
      
      TrackLink trackLink1 = track1.getLinkedFrom();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track1, track0);
      assertNull(trackLink1);
      assertEquals(ModelObjectType.GENRE, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getHref());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getPopularity());
      assertNull(track1.getId());
      assertNull(track1.getUri());
      assertFalse(track1.equals((Object)track0));
      
      String string0 = track0.getPreviewUrl();
      assertNotSame(track0, track1);
      assertNull(string0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getPopularity());
      assertNull(track0.getId());
      assertFalse(track0.equals((Object)track1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertNull(track0.getId());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPopularity());
      assertNull(track0.getUri());
      
      TrackLink trackLink0 = track0.getLinkedFrom();
      assertNull(trackLink0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertNull(track0.getId());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPopularity());
      assertNull(track0.getUri());
      
      Track.Builder track_Builder1 = track_Builder0.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      Integer integer0 = new Integer(625);
      assertNotNull(integer0);
      assertEquals(625, (int)integer0);
      
      Track.Builder track_Builder2 = track_Builder1.setTrackNumber(integer0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotNull(track_Builder2);
      
      Integer integer1 = new Integer(625);
      assertNotNull(integer1);
      assertEquals(625, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Track.Builder track_Builder3 = track_Builder2.setDiscNumber(integer1);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertNotNull(track_Builder3);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Track.Builder track_Builder4 = track_Builder3.setHref("TRACK");
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertNotNull(track_Builder4);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      Track track1 = track_Builder4.build();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertNotSame(track1, track0);
      assertNotNull(track1);
      assertNull(track1.getType());
      assertNull(track1.getName());
      assertEquals(625, (int)track1.getTrackNumber());
      assertNull(track1.getIsPlayable());
      assertEquals("TRACK", track1.getHref());
      assertNull(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDurationMs());
      assertEquals(625, (int)track1.getDiscNumber());
      assertNull(track1.getPopularity());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(track1.equals((Object)track0));
      
      String string0 = track1.getId();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertNotSame(track1, track0);
      assertNull(string0);
      assertNull(track1.getType());
      assertNull(track1.getName());
      assertEquals(625, (int)track1.getTrackNumber());
      assertNull(track1.getIsPlayable());
      assertEquals("TRACK", track1.getHref());
      assertNull(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDurationMs());
      assertEquals(625, (int)track1.getDiscNumber());
      assertNull(track1.getPopularity());
      assertNull(track1.getUri());
      assertNull(track1.getId());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(track1.equals((Object)track0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Integer integer0 = Integer.valueOf((-719));
      assertNotNull(integer0);
      assertEquals((-719), (int)integer0);
      
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertNotNull(track_Builder2);
      assertEquals(1, countryCodeArray0.length);
      
      Track track0 = track_Builder1.build();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertNotNull(track0);
      assertNull(track0.getType());
      assertNull(track0.getDurationMs());
      assertNull(track0.getHref());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getName());
      assertNull(track0.getIsPlayable());
      assertEquals((-719), (int)track0.getPopularity());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getId());
      assertNull(track0.getUri());
      
      TrackLink trackLink0 = track0.getLinkedFrom();
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertNull(trackLink0);
      assertNull(track0.getType());
      assertNull(track0.getDurationMs());
      assertNull(track0.getHref());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getName());
      assertNull(track0.getIsPlayable());
      assertEquals((-719), (int)track0.getPopularity());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getId());
      assertNull(track0.getUri());
      
      Track.Builder track_Builder3 = track_Builder0.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertNotNull(track_Builder3);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Track.Builder track_Builder4 = track_Builder2.setExplicit(boolean0);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertNotNull(track_Builder4);
      assertEquals(1, countryCodeArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      boolean boolean2 = Boolean.logicalXor(true, true);
      assertFalse(boolean2);
      
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Track.Builder track_Builder5 = track_Builder4.setType(modelObjectType0);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder5, track_Builder1);
      assertSame(track_Builder5, track_Builder3);
      assertSame(track_Builder5, track_Builder2);
      assertSame(track_Builder5, track_Builder0);
      assertSame(track_Builder5, track_Builder4);
      assertNotNull(track_Builder5);
      assertEquals(1, countryCodeArray0.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      
      Track.Builder track_Builder6 = track_Builder2.setIsPlayable(boolean1);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder0);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder5);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNotNull(track_Builder6);
      assertEquals(1, countryCodeArray0.length);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      
      Track.Builder track_Builder7 = track_Builder4.setName("name");
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertNotNull(track_Builder7);
      assertEquals(1, countryCodeArray0.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      
      Track.Builder track_Builder8 = track_Builder7.setTrackNumber(integer0);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(track_Builder8);
      assertEquals(1, countryCodeArray0.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      
      Track track1 = track_Builder2.build();
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNotNull(track1);
      assertTrue(track1.getIsPlayable());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDiscNumber());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      AlbumSimplified albumSimplified0 = track1.getAlbum();
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNull(albumSimplified0);
      assertTrue(track1.getIsPlayable());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDiscNumber());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      Track.Builder track_Builder9 = track_Builder8.setAlbum((AlbumSimplified) null);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(track_Builder9);
      assertEquals(1, countryCodeArray0.length);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      
      String string0 = track1.getHref();
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNull(string0);
      assertTrue(track1.getIsPlayable());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDiscNumber());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      
      Track.Builder track_Builder10 = track1.builder();
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNotSame(track_Builder10, track_Builder9);
      assertNotSame(track_Builder10, track_Builder5);
      assertNotSame(track_Builder10, track_Builder0);
      assertNotSame(track_Builder10, track_Builder8);
      assertNotSame(track_Builder10, track_Builder4);
      assertNotSame(track_Builder10, track_Builder2);
      assertNotSame(track_Builder10, track_Builder7);
      assertNotSame(track_Builder10, track_Builder6);
      assertNotSame(track_Builder10, track_Builder1);
      assertNotSame(track_Builder10, track_Builder3);
      assertNotNull(track_Builder10);
      assertTrue(track1.getIsPlayable());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDiscNumber());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder10.equals((Object)track_Builder9));
      assertFalse(track_Builder10.equals((Object)track_Builder5));
      assertFalse(track_Builder10.equals((Object)track_Builder0));
      assertFalse(track_Builder10.equals((Object)track_Builder8));
      assertFalse(track_Builder10.equals((Object)track_Builder4));
      assertFalse(track_Builder10.equals((Object)track_Builder2));
      assertFalse(track_Builder10.equals((Object)track_Builder7));
      assertFalse(track_Builder10.equals((Object)track_Builder6));
      assertFalse(track_Builder10.equals((Object)track_Builder1));
      assertFalse(track_Builder10.equals((Object)track_Builder3));
      
      Integer integer1 = track1.getDurationMs();
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertNotSame(track1, track0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNull(integer1);
      assertTrue(track1.getIsPlayable());
      assertEquals((-719), (int)track1.getPopularity());
      assertEquals("name", track1.getName());
      assertNull(track1.getHref());
      assertEquals(ModelObjectType.TRACK, track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDiscNumber());
      assertEquals((-719), (int)track1.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      
      Track.Builder track_Builder11 = track_Builder9.setLinkedFrom((TrackLink) null);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder11);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder5);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder11, track_Builder6);
      assertSame(track_Builder11, track_Builder2);
      assertSame(track_Builder11, track_Builder8);
      assertSame(track_Builder11, track_Builder7);
      assertSame(track_Builder11, track_Builder4);
      assertNotSame(track_Builder11, track_Builder10);
      assertSame(track_Builder11, track_Builder0);
      assertSame(track_Builder11, track_Builder9);
      assertSame(track_Builder11, track_Builder3);
      assertSame(track_Builder11, track_Builder5);
      assertSame(track_Builder11, track_Builder1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(track_Builder11);
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track_Builder11.equals((Object)track_Builder10));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      Track track2 = track_Builder9.build();
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder11);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder5);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(track2);
      assertNull(track2.getDurationMs());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getId());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertEquals((-719), (int)track2.getPopularity());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getHref());
      assertTrue(track2.getIsExplicit());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      Track track3 = track_Builder0.build();
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertNotSame(track3, track0);
      assertNotSame(track3, track1);
      assertNotSame(track3, track2);
      assertNotNull(track3);
      assertNull(track3.getPreviewUrl());
      assertTrue(track3.getIsExplicit());
      assertNull(track3.getId());
      assertNull(track3.getUri());
      assertNull(track3.getHref());
      assertEquals(ModelObjectType.TRACK, track3.getType());
      assertTrue(track3.getIsPlayable());
      assertEquals((-719), (int)track3.getPopularity());
      assertEquals("name", track3.getName());
      assertEquals((-719), (int)track3.getTrackNumber());
      assertNull(track3.getDiscNumber());
      assertNull(track3.getDurationMs());
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track3.equals((Object)track0));
      assertFalse(track3.equals((Object)track1));
      assertFalse(track3.equals((Object)track2));
      
      Boolean boolean3 = track2.getIsExplicit();
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder11);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder5);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder6);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertNull(track2.getDurationMs());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getId());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertEquals((-719), (int)track2.getPopularity());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getHref());
      assertTrue(track2.getIsExplicit());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      
      boolean boolean4 = Boolean.logicalAnd(true, true);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      
      Track.Builder track_Builder12 = track_Builder4.setIsPlayable(boolean3);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder12);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder12);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder12);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder8);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder12);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder12);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder5);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder12);
      assertSame(track_Builder9, track_Builder3);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertSame(track_Builder12, track_Builder8);
      assertSame(track_Builder12, track_Builder3);
      assertSame(track_Builder12, track_Builder11);
      assertSame(track_Builder12, track_Builder9);
      assertSame(track_Builder12, track_Builder5);
      assertSame(track_Builder12, track_Builder0);
      assertNotSame(track_Builder12, track_Builder10);
      assertSame(track_Builder12, track_Builder1);
      assertSame(track_Builder12, track_Builder4);
      assertSame(track_Builder12, track_Builder2);
      assertSame(track_Builder12, track_Builder7);
      assertSame(track_Builder12, track_Builder6);
      assertNotNull(track_Builder12);
      assertNull(track2.getDurationMs());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getId());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertEquals((-719), (int)track2.getPopularity());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getHref());
      assertTrue(track2.getIsExplicit());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(track_Builder12.equals((Object)track_Builder10));
      
      AlbumSimplified albumSimplified1 = track2.getAlbum();
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder7, track_Builder8);
      assertSame(track_Builder7, track_Builder9);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder12);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder2);
      assertNotSame(track_Builder7, track_Builder10);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder4);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder11);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder8, track_Builder9);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder11);
      assertSame(track_Builder8, track_Builder12);
      assertNotSame(track_Builder8, track_Builder10);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertNotSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder12);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder11);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder9, track_Builder11);
      assertSame(track_Builder9, track_Builder5);
      assertNotSame(track_Builder9, track_Builder10);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder12);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertNotSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder11);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder12);
      assertSame(track_Builder2, track_Builder6);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNotSame(track2, track3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder6);
      assertNotSame(track_Builder4, track_Builder10);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder12);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder11);
      assertSame(track_Builder4, track_Builder9);
      assertSame(track_Builder4, track_Builder8);
      assertNull(albumSimplified1);
      assertNull(track2.getDurationMs());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getId());
      assertEquals(ModelObjectType.TRACK, track2.getType());
      assertNull(track2.getUri());
      assertEquals((-719), (int)track2.getPopularity());
      assertEquals("name", track2.getName());
      assertTrue(track2.getIsPlayable());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getHref());
      assertTrue(track2.getIsExplicit());
      assertEquals((-719), (int)track2.getTrackNumber());
      assertEquals(1, countryCodeArray0.length);
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track_Builder7.equals((Object)track_Builder10));
      assertFalse(track_Builder8.equals((Object)track_Builder10));
      assertFalse(track_Builder1.equals((Object)track_Builder10));
      assertFalse(track_Builder9.equals((Object)track_Builder10));
      assertFalse(track_Builder2.equals((Object)track_Builder10));
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      assertFalse(track2.equals((Object)track3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean4));
      assertFalse(track_Builder4.equals((Object)track_Builder10));
      
      ModelObjectType modelObjectType1 = track3.getType();
      assertSame(modelObjectType1, modelObjectType0);
      assertNotSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder12);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder11);
      assertSame(track_Builder0, track_Builder4);
      assertNotSame(track3, track0);
      assertNotSame(track3, track1);
      assertNotSame(track3, track2);
      assertEquals(ModelObjectType.TRACK, modelObjectType1);
      assertEquals("track", modelObjectType1.getType());
      assertNull(track3.getPreviewUrl());
      assertTrue(track3.getIsExplicit());
      assertNull(track3.getId());
      assertNull(track3.getUri());
      assertNull(track3.getHref());
      assertEquals(ModelObjectType.TRACK, track3.getType());
      assertTrue(track3.getIsPlayable());
      assertEquals((-719), (int)track3.getPopularity());
      assertEquals("name", track3.getName());
      assertEquals((-719), (int)track3.getTrackNumber());
      assertNull(track3.getDiscNumber());
      assertNull(track3.getDurationMs());
      assertFalse(track_Builder0.equals((Object)track_Builder10));
      assertFalse(track3.equals((Object)track0));
      assertFalse(track3.equals((Object)track1));
      assertFalse(track3.equals((Object)track2));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Integer integer0 = new Integer((-3988));
      assertNotNull(integer0);
      assertEquals((-3988), (int)integer0);
      
      int int0 = Integer.divideUnsigned((-3988), (-3988));
      assertEquals(1, int0);
      
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      assertFalse(integer0.equals((Object)int0));
      
      Boolean boolean0 = Boolean.valueOf("Isle of Man");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      assertNotNull(trackLink_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      
      TrackLink trackLink0 = trackLink_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(trackLink0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      
      TrackLink.Builder trackLink_Builder0 = trackLink0.builder();
      assertNotNull(trackLink_Builder0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      
      TrackLink.Builder trackLink_Builder1 = trackLink_Builder0.setUri("]G{N>\"(F(dRR}H");
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertNotNull(trackLink_Builder1);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      
      TrackLink.Builder trackLink_Builder2 = trackLink_Builder1.setHref("Isle of Man");
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertNotNull(trackLink_Builder2);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      
      TrackLink.Builder trackLink_Builder3 = trackLink_Builder2.setHref("Isle of Man");
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder3, trackLink_Builder0);
      assertSame(trackLink_Builder3, trackLink_Builder1);
      assertSame(trackLink_Builder3, trackLink_Builder2);
      assertNotNull(trackLink_Builder3);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      
      TrackLink.Builder trackLink_Builder4 = trackLink_Builder2.setUri((String) null);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder4);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder1, trackLink_Builder4);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder4);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder4, trackLink_Builder1);
      assertSame(trackLink_Builder4, trackLink_Builder2);
      assertSame(trackLink_Builder4, trackLink_Builder3);
      assertSame(trackLink_Builder4, trackLink_Builder0);
      assertNotNull(trackLink_Builder4);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      
      Track track0 = track_Builder0.build();
      assertSame(track_Builder0, track_Builder1);
      assertNotNull(track0);
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      assertNull(track0.getHref());
      assertEquals((-3988), (int)track0.getPopularity());
      assertNull(track0.getType());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getName());
      
      Integer integer1 = track0.getPopularity();
      assertSame(track_Builder0, track_Builder1);
      assertNotNull(integer1);
      assertEquals((-3988), (int)integer1);
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      assertNull(track0.getHref());
      assertEquals((-3988), (int)track0.getPopularity());
      assertNull(track0.getType());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getName());
      assertFalse(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Track.Builder track_Builder1 = track_Builder0.setPreviewUrl((String) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertNull(track0.getHref());
      assertNull(track0.getName());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      
      Boolean boolean0 = track0.getIsPlayable();
      assertNull(boolean0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertNull(track0.getHref());
      assertNull(track0.getName());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      
      Track.Builder track_Builder2 = track_Builder1.setExplicit((Boolean) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertNotNull(track_Builder2);
      
      Restrictions restrictions0 = track0.getRestrictions();
      assertNull(restrictions0);
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertNull(track0.getHref());
      assertNull(track0.getName());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      
      Track.Builder track_Builder3 = track_Builder2.setRestrictions((Restrictions) null);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertNotNull(track_Builder3);
      
      Track.Builder track_Builder4 = track_Builder1.setName("external_urls");
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertNotNull(track_Builder4);
      
      Track track1 = track_Builder0.build();
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertNotSame(track1, track0);
      assertNotNull(track1);
      assertEquals("external_urls", track1.getName());
      assertNull(track1.getIsExplicit());
      assertNull(track1.getUri());
      assertNull(track1.getHref());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getPopularity());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getId());
      assertNull(track1.getType());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getDurationMs());
      assertFalse(track1.equals((Object)track0));
      
      Track track2 = track_Builder2.build();
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNotNull(track2);
      assertNull(track2.getId());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getPreviewUrl());
      assertEquals("external_urls", track2.getName());
      assertNull(track2.getTrackNumber());
      assertNull(track2.getIsExplicit());
      assertNull(track2.getIsPlayable());
      assertNull(track2.getType());
      assertNull(track2.getDurationMs());
      assertNull(track2.getHref());
      assertNull(track2.getPopularity());
      assertNull(track2.getUri());
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      
      TrackLink trackLink0 = track2.getLinkedFrom();
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNull(trackLink0);
      assertNull(track2.getId());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getPreviewUrl());
      assertEquals("external_urls", track2.getName());
      assertNull(track2.getTrackNumber());
      assertNull(track2.getIsExplicit());
      assertNull(track2.getIsPlayable());
      assertNull(track2.getType());
      assertNull(track2.getDurationMs());
      assertNull(track2.getHref());
      assertNull(track2.getPopularity());
      assertNull(track2.getUri());
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      
      String string0 = track2.getUri();
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNull(string0);
      assertNull(track2.getId());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getPreviewUrl());
      assertEquals("external_urls", track2.getName());
      assertNull(track2.getTrackNumber());
      assertNull(track2.getIsExplicit());
      assertNull(track2.getIsPlayable());
      assertNull(track2.getType());
      assertNull(track2.getDurationMs());
      assertNull(track2.getHref());
      assertNull(track2.getPopularity());
      assertNull(track2.getUri());
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      
      ArtistSimplified[] artistSimplifiedArray0 = track2.getArtists();
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNull(artistSimplifiedArray0);
      assertNull(track2.getId());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getPreviewUrl());
      assertEquals("external_urls", track2.getName());
      assertNull(track2.getTrackNumber());
      assertNull(track2.getIsExplicit());
      assertNull(track2.getIsPlayable());
      assertNull(track2.getType());
      assertNull(track2.getDurationMs());
      assertNull(track2.getHref());
      assertNull(track2.getPopularity());
      assertNull(track2.getUri());
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      assertNotNull(trackLink_Builder0);
      
      TrackLink trackLink0 = trackLink_Builder0.build();
      assertNotNull(trackLink0);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      Track.Builder track_Builder1 = track_Builder0.setLinkedFrom(trackLink0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      Track.Builder track_Builder2 = track_Builder1.setId((String) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertNotNull(track_Builder2);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      Boolean boolean0 = new Boolean("DPC");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Track.Builder track_Builder3 = track_Builder2.setIsPlayable(boolean0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertNotNull(track_Builder3);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      Track.Builder track_Builder4 = track_Builder3.setExplicit(boolean0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertNotNull(track_Builder4);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      
      Integer integer0 = track0.getDiscNumber();
      assertNull(integer0);
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      
      Track.Builder track_Builder5 = track_Builder4.setPopularity((Integer) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder5, track_Builder2);
      assertSame(track_Builder5, track_Builder1);
      assertSame(track_Builder5, track_Builder4);
      assertSame(track_Builder5, track_Builder3);
      assertSame(track_Builder5, track_Builder0);
      assertNotNull(track_Builder5);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      ExternalId externalId0 = track0.getExternalIds();
      assertNull(externalId0);
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      
      Track.Builder track_Builder6 = track_Builder5.setExternalIds((ExternalId) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder5, track_Builder2);
      assertSame(track_Builder5, track_Builder6);
      assertSame(track_Builder5, track_Builder1);
      assertSame(track_Builder5, track_Builder4);
      assertSame(track_Builder5, track_Builder3);
      assertSame(track_Builder5, track_Builder0);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder0);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder5);
      assertNotNull(track_Builder6);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getHref());
      
      String string0 = track0.getName();
      assertNull(string0);
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      
      Integer integer1 = track0.getDiscNumber();
      assertNull(integer1);
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Track.Builder track_Builder1 = track_Builder0.setExplicit(boolean0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      boolean boolean1 = Boolean.logicalOr(false, false);
      assertFalse(boolean1);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getId());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getName());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      
      ExternalId externalId0 = track0.getExternalIds();
      assertNull(externalId0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getId());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getName());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      
      CountryCode[] countryCodeArray0 = new CountryCode[9];
      CountryCode countryCode0 = CountryCode.AR;
      countryCodeArray0[0] = countryCode0;
      CountryCode countryCode1 = CountryCode.TD;
      countryCodeArray0[1] = countryCode1;
      CountryCode countryCode2 = CountryCode.SU;
      countryCodeArray0[2] = countryCode2;
      CountryCode countryCode3 = CountryCode.XK;
      countryCodeArray0[3] = countryCode3;
      CountryCode countryCode4 = CountryCode.MM;
      countryCodeArray0[4] = countryCode4;
      CountryCode countryCode5 = CountryCode.MZ;
      countryCodeArray0[5] = countryCode5;
      CountryCode countryCode6 = CountryCode.MQ;
      countryCodeArray0[6] = countryCode6;
      CountryCode countryCode7 = CountryCode.LC;
      countryCodeArray0[7] = countryCode7;
      CountryCode countryCode8 = CountryCode.BH;
      countryCodeArray0[8] = countryCode8;
      Track.Builder track_Builder2 = track_Builder0.setAvailableMarkets(countryCodeArray0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertNotNull(track_Builder2);
      assertEquals(9, countryCodeArray0.length);
      
      Track.Builder track_Builder3 = track_Builder1.setExternalIds((ExternalId) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertNotNull(track_Builder3);
      assertFalse(boolean0.equals((Object)boolean1));
      
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      assertNotNull(trackLink_Builder0);
      
      TrackLink trackLink0 = trackLink_Builder0.build();
      assertNotNull(trackLink0);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      
      Track.Builder track_Builder4 = track_Builder3.setLinkedFrom(trackLink0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder4);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertFalse(boolean0.equals((Object)boolean1));
      
      Track.Builder track_Builder5 = track0.builder();
      assertNotSame(track_Builder5, track_Builder0);
      assertNotSame(track_Builder5, track_Builder4);
      assertNotSame(track_Builder5, track_Builder1);
      assertNotSame(track_Builder5, track_Builder2);
      assertNotSame(track_Builder5, track_Builder3);
      assertNotNull(track_Builder5);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getId());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getName());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertFalse(track_Builder5.equals((Object)track_Builder0));
      assertFalse(track_Builder5.equals((Object)track_Builder4));
      assertFalse(track_Builder5.equals((Object)track_Builder1));
      assertFalse(track_Builder5.equals((Object)track_Builder2));
      assertFalse(track_Builder5.equals((Object)track_Builder3));
      
      TrackLink.Builder trackLink_Builder1 = trackLink_Builder0.setHref("external_urls");
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertNotNull(trackLink_Builder1);
      
      Track.Builder track_Builder6 = track_Builder4.setName("1u7J3xT<JJX");
      assertSame(track_Builder0, track_Builder1);
      assertNotSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder0);
      assertNotSame(track_Builder6, track_Builder5);
      assertNotSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder1);
      assertNotSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(track_Builder4, track_Builder1);
      assertNotSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder6);
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertFalse(track_Builder0.equals((Object)track_Builder5));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(track_Builder6.equals((Object)track_Builder5));
      assertFalse(track_Builder1.equals((Object)track_Builder5));
      assertFalse(track_Builder3.equals((Object)track_Builder5));
      assertFalse(track_Builder4.equals((Object)track_Builder5));
      
      Track track1 = track_Builder6.build();
      assertSame(track_Builder0, track_Builder1);
      assertNotSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder0);
      assertNotSame(track_Builder6, track_Builder5);
      assertNotSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track1, track0);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder1);
      assertNotSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(track_Builder4, track_Builder1);
      assertNotSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track1);
      assertNull(track1.getIsPlayable());
      assertNull(track1.getDiscNumber());
      assertEquals("1u7J3xT<JJX", track1.getName());
      assertNull(track1.getHref());
      assertNull(track1.getTrackNumber());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertNull(track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getPopularity());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertFalse(track_Builder0.equals((Object)track_Builder5));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(track_Builder6.equals((Object)track_Builder5));
      assertFalse(track_Builder1.equals((Object)track_Builder5));
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder3.equals((Object)track_Builder5));
      assertFalse(track_Builder4.equals((Object)track_Builder5));
      
      CountryCode[] countryCodeArray1 = track1.getAvailableMarkets();
      assertSame(track_Builder0, track_Builder1);
      assertNotSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder0);
      assertNotSame(track_Builder6, track_Builder5);
      assertNotSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder1, track_Builder4);
      assertNotSame(track1, track0);
      assertSame(countryCodeArray1, countryCodeArray0);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder1);
      assertNotSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(track_Builder4, track_Builder1);
      assertNotSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(countryCodeArray1);
      assertNull(track1.getIsPlayable());
      assertNull(track1.getDiscNumber());
      assertEquals("1u7J3xT<JJX", track1.getName());
      assertNull(track1.getHref());
      assertNull(track1.getTrackNumber());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertNull(track1.getType());
      assertNull(track1.getId());
      assertNull(track1.getPopularity());
      assertNull(trackLink0.getId());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getType());
      assertEquals(9, countryCodeArray1.length);
      assertFalse(track_Builder0.equals((Object)track_Builder5));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(track_Builder6.equals((Object)track_Builder5));
      assertFalse(track_Builder1.equals((Object)track_Builder5));
      assertFalse(track1.equals((Object)track0));
      assertFalse(track_Builder3.equals((Object)track_Builder5));
      assertFalse(track_Builder4.equals((Object)track_Builder5));
      
      TrackLink trackLink1 = track0.getLinkedFrom();
      assertNotSame(track0, track1);
      assertNull(trackLink1);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getId());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getName());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertFalse(track0.equals((Object)track1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      assertNotNull(trackLink_Builder0);
      
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      TrackLink.Builder trackLink_Builder1 = trackLink_Builder0.setType(modelObjectType0);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertNotNull(trackLink_Builder1);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getHref());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDurationMs());
      assertNull(track0.getPopularity());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      
      ExternalUrl externalUrl0 = track0.getExternalUrls();
      assertNull(externalUrl0);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getHref());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDurationMs());
      assertNull(track0.getPopularity());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      
      TrackLink.Builder trackLink_Builder2 = trackLink_Builder1.setExternalUrls((ExternalUrl) null);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertNotNull(trackLink_Builder2);
      
      TrackLink.Builder trackLink_Builder3 = trackLink_Builder2.setHref("artists");
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder3, trackLink_Builder2);
      assertSame(trackLink_Builder3, trackLink_Builder1);
      assertSame(trackLink_Builder3, trackLink_Builder0);
      assertNotNull(trackLink_Builder3);
      
      TrackLink.Builder trackLink_Builder4 = trackLink_Builder3.setId("");
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder1, trackLink_Builder4);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder2);
      assertSame(trackLink_Builder3, trackLink_Builder1);
      assertSame(trackLink_Builder3, trackLink_Builder0);
      assertSame(trackLink_Builder4, trackLink_Builder3);
      assertSame(trackLink_Builder4, trackLink_Builder2);
      assertSame(trackLink_Builder4, trackLink_Builder1);
      assertSame(trackLink_Builder4, trackLink_Builder0);
      assertNotNull(trackLink_Builder4);
      
      TrackLink.Builder trackLink_Builder5 = trackLink_Builder2.setExternalUrls((ExternalUrl) null);
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder5);
      assertSame(trackLink_Builder1, trackLink_Builder4);
      assertSame(trackLink_Builder1, trackLink_Builder5);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder5);
      assertSame(trackLink_Builder2, trackLink_Builder4);
      assertSame(trackLink_Builder5, trackLink_Builder2);
      assertSame(trackLink_Builder5, trackLink_Builder3);
      assertSame(trackLink_Builder5, trackLink_Builder4);
      assertSame(trackLink_Builder5, trackLink_Builder1);
      assertSame(trackLink_Builder5, trackLink_Builder0);
      assertNotNull(trackLink_Builder5);
      
      TrackLink.Builder trackLink_Builder6 = trackLink_Builder4.setUri("A:047T!i)f<D+l");
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder6);
      assertSame(trackLink_Builder0, trackLink_Builder5);
      assertSame(trackLink_Builder1, trackLink_Builder6);
      assertSame(trackLink_Builder1, trackLink_Builder4);
      assertSame(trackLink_Builder1, trackLink_Builder5);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder6);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder5);
      assertSame(trackLink_Builder2, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder5);
      assertSame(trackLink_Builder3, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder2);
      assertSame(trackLink_Builder3, trackLink_Builder1);
      assertSame(trackLink_Builder3, trackLink_Builder6);
      assertSame(trackLink_Builder3, trackLink_Builder0);
      assertSame(trackLink_Builder4, trackLink_Builder2);
      assertSame(trackLink_Builder4, trackLink_Builder3);
      assertSame(trackLink_Builder4, trackLink_Builder5);
      assertSame(trackLink_Builder4, trackLink_Builder1);
      assertSame(trackLink_Builder4, trackLink_Builder6);
      assertSame(trackLink_Builder4, trackLink_Builder0);
      assertSame(trackLink_Builder6, trackLink_Builder1);
      assertSame(trackLink_Builder6, trackLink_Builder3);
      assertSame(trackLink_Builder6, trackLink_Builder2);
      assertSame(trackLink_Builder6, trackLink_Builder5);
      assertSame(trackLink_Builder6, trackLink_Builder0);
      assertSame(trackLink_Builder6, trackLink_Builder4);
      assertNotNull(trackLink_Builder6);
      
      TrackLink.Builder trackLink_Builder7 = trackLink_Builder6.setHref("(^Ti");
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder6);
      assertSame(trackLink_Builder0, trackLink_Builder5);
      assertSame(trackLink_Builder0, trackLink_Builder7);
      assertSame(trackLink_Builder1, trackLink_Builder6);
      assertSame(trackLink_Builder1, trackLink_Builder4);
      assertSame(trackLink_Builder1, trackLink_Builder5);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder7);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder6);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder5);
      assertSame(trackLink_Builder2, trackLink_Builder7);
      assertSame(trackLink_Builder2, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder5);
      assertSame(trackLink_Builder3, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder7);
      assertSame(trackLink_Builder3, trackLink_Builder2);
      assertSame(trackLink_Builder3, trackLink_Builder1);
      assertSame(trackLink_Builder3, trackLink_Builder6);
      assertSame(trackLink_Builder3, trackLink_Builder0);
      assertSame(trackLink_Builder4, trackLink_Builder2);
      assertSame(trackLink_Builder4, trackLink_Builder3);
      assertSame(trackLink_Builder4, trackLink_Builder7);
      assertSame(trackLink_Builder4, trackLink_Builder5);
      assertSame(trackLink_Builder4, trackLink_Builder1);
      assertSame(trackLink_Builder4, trackLink_Builder6);
      assertSame(trackLink_Builder4, trackLink_Builder0);
      assertSame(trackLink_Builder6, trackLink_Builder1);
      assertSame(trackLink_Builder6, trackLink_Builder3);
      assertSame(trackLink_Builder6, trackLink_Builder7);
      assertSame(trackLink_Builder6, trackLink_Builder2);
      assertSame(trackLink_Builder6, trackLink_Builder5);
      assertSame(trackLink_Builder6, trackLink_Builder0);
      assertSame(trackLink_Builder6, trackLink_Builder4);
      assertSame(trackLink_Builder7, trackLink_Builder4);
      assertSame(trackLink_Builder7, trackLink_Builder2);
      assertSame(trackLink_Builder7, trackLink_Builder0);
      assertSame(trackLink_Builder7, trackLink_Builder6);
      assertSame(trackLink_Builder7, trackLink_Builder1);
      assertSame(trackLink_Builder7, trackLink_Builder5);
      assertSame(trackLink_Builder7, trackLink_Builder3);
      assertNotNull(trackLink_Builder7);
      
      TrackLink.Builder trackLink_Builder8 = trackLink_Builder6.setUri("");
      assertSame(trackLink_Builder0, trackLink_Builder3);
      assertSame(trackLink_Builder0, trackLink_Builder2);
      assertSame(trackLink_Builder0, trackLink_Builder4);
      assertSame(trackLink_Builder0, trackLink_Builder1);
      assertSame(trackLink_Builder0, trackLink_Builder6);
      assertSame(trackLink_Builder0, trackLink_Builder5);
      assertSame(trackLink_Builder0, trackLink_Builder8);
      assertSame(trackLink_Builder0, trackLink_Builder7);
      assertSame(trackLink_Builder1, trackLink_Builder6);
      assertSame(trackLink_Builder1, trackLink_Builder4);
      assertSame(trackLink_Builder1, trackLink_Builder5);
      assertSame(trackLink_Builder1, trackLink_Builder8);
      assertSame(trackLink_Builder1, trackLink_Builder2);
      assertSame(trackLink_Builder1, trackLink_Builder3);
      assertSame(trackLink_Builder1, trackLink_Builder7);
      assertSame(trackLink_Builder1, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder3);
      assertSame(trackLink_Builder2, trackLink_Builder1);
      assertSame(trackLink_Builder2, trackLink_Builder6);
      assertSame(trackLink_Builder2, trackLink_Builder0);
      assertSame(trackLink_Builder2, trackLink_Builder5);
      assertSame(trackLink_Builder2, trackLink_Builder7);
      assertSame(trackLink_Builder2, trackLink_Builder4);
      assertSame(trackLink_Builder2, trackLink_Builder8);
      assertSame(trackLink_Builder3, trackLink_Builder5);
      assertSame(trackLink_Builder3, trackLink_Builder8);
      assertSame(trackLink_Builder3, trackLink_Builder4);
      assertSame(trackLink_Builder3, trackLink_Builder7);
      assertSame(trackLink_Builder3, trackLink_Builder2);
      assertSame(trackLink_Builder3, trackLink_Builder1);
      assertSame(trackLink_Builder3, trackLink_Builder6);
      assertSame(trackLink_Builder3, trackLink_Builder0);
      assertSame(trackLink_Builder4, trackLink_Builder2);
      assertSame(trackLink_Builder4, trackLink_Builder3);
      assertSame(trackLink_Builder4, trackLink_Builder7);
      assertSame(trackLink_Builder4, trackLink_Builder5);
      assertSame(trackLink_Builder4, trackLink_Builder8);
      assertSame(trackLink_Builder4, trackLink_Builder1);
      assertSame(trackLink_Builder4, trackLink_Builder6);
      assertSame(trackLink_Builder4, trackLink_Builder0);
      assertSame(trackLink_Builder6, trackLink_Builder1);
      assertSame(trackLink_Builder6, trackLink_Builder3);
      assertSame(trackLink_Builder6, trackLink_Builder7);
      assertSame(trackLink_Builder6, trackLink_Builder2);
      assertSame(trackLink_Builder6, trackLink_Builder5);
      assertSame(trackLink_Builder6, trackLink_Builder8);
      assertSame(trackLink_Builder6, trackLink_Builder0);
      assertSame(trackLink_Builder6, trackLink_Builder4);
      assertSame(trackLink_Builder8, trackLink_Builder1);
      assertSame(trackLink_Builder8, trackLink_Builder7);
      assertSame(trackLink_Builder8, trackLink_Builder3);
      assertSame(trackLink_Builder8, trackLink_Builder5);
      assertSame(trackLink_Builder8, trackLink_Builder4);
      assertSame(trackLink_Builder8, trackLink_Builder6);
      assertSame(trackLink_Builder8, trackLink_Builder2);
      assertSame(trackLink_Builder8, trackLink_Builder0);
      assertNotNull(trackLink_Builder8);
      
      Track track1 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotSame(track1, track0);
      assertNotNull(track1);
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonNull());
      assertTrue(jsonObject0.isJsonObject());
      assertNull(track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getHref());
      assertNull(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getPopularity());
      assertNull(track1.getId());
      assertNull(track1.getUri());
      assertFalse(track1.equals((Object)track0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      
      Track.Builder track_Builder1 = track_Builder0.setHref("=mB}Z,os{Y)%");
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getPopularity());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      
      TrackLink trackLink0 = track0.getLinkedFrom();
      assertNull(trackLink0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getPopularity());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      
      Track.Builder track_Builder2 = track_Builder0.setLinkedFrom((TrackLink) null);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertNotNull(track_Builder2);
      
      Track.Builder track_Builder3 = track_Builder2.setUri("preview_url");
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertNotNull(track_Builder3);
      
      Restrictions restrictions0 = track0.getRestrictions();
      assertNull(restrictions0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getPopularity());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      
      Track.Builder track_Builder4 = track_Builder3.setRestrictions((Restrictions) null);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder4);
      
      Track track1 = track_Builder4.build();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotSame(track1, track0);
      assertNotNull(track1);
      assertNull(track1.getPopularity());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getType());
      assertNull(track1.getIsExplicit());
      assertNull(track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertEquals("preview_url", track1.getUri());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDurationMs());
      assertNull(track1.getId());
      assertEquals("=mB}Z,os{Y)%", track1.getHref());
      assertFalse(track1.equals((Object)track0));
      
      String string0 = track1.getUri();
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder2);
      assertNotSame(track1, track0);
      assertNotNull(string0);
      assertEquals("preview_url", string0);
      assertNull(track1.getPopularity());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getType());
      assertNull(track1.getIsExplicit());
      assertNull(track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertEquals("preview_url", track1.getUri());
      assertNull(track1.getPreviewUrl());
      assertNull(track1.getDurationMs());
      assertNull(track1.getId());
      assertEquals("=mB}Z,os{Y)%", track1.getHref());
      assertFalse(track1.equals((Object)track0));
      
      String string1 = track0.getPreviewUrl();
      assertNotSame(track0, track1);
      assertNull(string1);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getPopularity());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getId());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getType());
      assertNull(track0.getDiscNumber());
      assertFalse(track0.equals((Object)track1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Track.Builder track_Builder1 = track_Builder0.setId("*U!GpVx]hg");
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      Track track0 = track_Builder0.build();
      assertSame(track_Builder0, track_Builder1);
      assertNotNull(track0);
      assertNull(track0.getHref());
      assertNull(track0.getPopularity());
      assertNull(track0.getUri());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertEquals("*U!GpVx]hg", track0.getId());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDiscNumber());
      
      ArtistSimplified[] artistSimplifiedArray0 = track0.getArtists();
      assertSame(track_Builder0, track_Builder1);
      assertNull(artistSimplifiedArray0);
      assertNull(track0.getHref());
      assertNull(track0.getPopularity());
      assertNull(track0.getUri());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getDurationMs());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertEquals("*U!GpVx]hg", track0.getId());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getDiscNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      assertNotNull(track_Builder0);
      
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getHref());
      
      ExternalId externalId0 = track0.getExternalIds();
      assertNull(externalId0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getHref());
      
      Track.Builder track_Builder1 = track_Builder0.setExternalIds((ExternalId) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      
      Paging<Track> paging0 = track_JsonUtil0.createModelObjectPaging(jsonObject0);
      assertNotNull(paging0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(paging0.getPrevious());
      assertNull(paging0.getOffset());
      assertNull(paging0.getHref());
      assertNull(paging0.getLimit());
      assertNull(paging0.getNext());
      assertNull(paging0.getTotal());
      
      ModelObjectType modelObjectType0 = ModelObjectType.ARTIST;
      Track.Builder track_Builder2 = track_Builder1.setType(modelObjectType0);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertNotNull(track_Builder2);
      
      Track.Builder track_Builder3 = track_Builder2.setName("sS='j3y");
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertNotNull(track_Builder3);
      
      Restrictions restrictions0 = track0.getRestrictions();
      assertNull(restrictions0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track0.getUri());
      assertNull(track0.getId());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getHref());
      
      Track.Builder track_Builder4 = track_Builder3.setRestrictions((Restrictions) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertNotNull(track_Builder4);
      
      Track.Builder track_Builder5 = track_Builder4.setType(modelObjectType0);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder5, track_Builder1);
      assertSame(track_Builder5, track_Builder0);
      assertSame(track_Builder5, track_Builder2);
      assertSame(track_Builder5, track_Builder3);
      assertSame(track_Builder5, track_Builder4);
      assertNotNull(track_Builder5);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Track.Builder track_Builder6 = track_Builder4.setExternalIds((ExternalId) null);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder6, track_Builder2);
      assertSame(track_Builder6, track_Builder1);
      assertSame(track_Builder6, track_Builder3);
      assertSame(track_Builder6, track_Builder4);
      assertSame(track_Builder6, track_Builder0);
      assertSame(track_Builder6, track_Builder5);
      assertNotNull(track_Builder6);
      
      Track.Builder track_Builder7 = track_Builder1.setRestrictions((Restrictions) null);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder7, track_Builder3);
      assertSame(track_Builder7, track_Builder1);
      assertSame(track_Builder7, track_Builder0);
      assertSame(track_Builder7, track_Builder2);
      assertSame(track_Builder7, track_Builder5);
      assertSame(track_Builder7, track_Builder6);
      assertSame(track_Builder7, track_Builder4);
      assertNotNull(track_Builder7);
      
      Track.Builder track_Builder8 = track_Builder4.setExplicit(boolean0);
      assertSame(track_Builder8, track_Builder3);
      assertSame(track_Builder8, track_Builder1);
      assertSame(track_Builder8, track_Builder5);
      assertSame(track_Builder8, track_Builder2);
      assertSame(track_Builder8, track_Builder6);
      assertSame(track_Builder8, track_Builder0);
      assertSame(track_Builder8, track_Builder4);
      assertSame(track_Builder8, track_Builder7);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder8);
      assertSame(track_Builder3, track_Builder7);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(track_Builder8);
      
      Track track1 = track_Builder4.build();
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertNotSame(track1, track0);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder8);
      assertSame(track_Builder3, track_Builder7);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder8);
      assertNotNull(track1);
      assertNull(track1.getPopularity());
      assertEquals("sS='j3y", track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getHref());
      assertNull(track1.getId());
      assertEquals(ModelObjectType.ARTIST, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertFalse(track1.equals((Object)track0));
      
      Integer integer0 = track1.getPopularity();
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertNotSame(track1, track0);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder8);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder8);
      assertSame(track_Builder3, track_Builder7);
      assertSame(track_Builder3, track_Builder5);
      assertSame(track_Builder3, track_Builder4);
      assertSame(track_Builder3, track_Builder6);
      assertSame(track_Builder3, track_Builder2);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder4, track_Builder3);
      assertSame(track_Builder4, track_Builder5);
      assertSame(track_Builder4, track_Builder7);
      assertSame(track_Builder4, track_Builder0);
      assertSame(track_Builder4, track_Builder1);
      assertSame(track_Builder4, track_Builder2);
      assertSame(track_Builder4, track_Builder6);
      assertSame(track_Builder4, track_Builder8);
      assertNull(integer0);
      assertNull(track1.getPopularity());
      assertEquals("sS='j3y", track1.getName());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getHref());
      assertNull(track1.getId());
      assertEquals(ModelObjectType.ARTIST, track1.getType());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertTrue(track1.getIsExplicit());
      assertNull(track1.getPreviewUrl());
      assertFalse(track1.equals((Object)track0));
      
      Track track2 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNotNull(track2);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track2.getName());
      assertNull(track2.getType());
      assertNull(track2.getIsPlayable());
      assertNull(track2.getTrackNumber());
      assertNull(track2.getIsExplicit());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getHref());
      assertNull(track2.getId());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getUri());
      assertNull(track2.getDurationMs());
      assertNull(track2.getPopularity());
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      
      Track.Builder track_Builder9 = track_Builder2.setId("}1S<X}l}@YrZwzY-");
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder9, track_Builder3);
      assertSame(track_Builder9, track_Builder5);
      assertSame(track_Builder9, track_Builder0);
      assertSame(track_Builder9, track_Builder7);
      assertSame(track_Builder9, track_Builder1);
      assertSame(track_Builder9, track_Builder6);
      assertSame(track_Builder9, track_Builder2);
      assertSame(track_Builder9, track_Builder4);
      assertSame(track_Builder9, track_Builder8);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder8);
      assertNotNull(track_Builder9);
      
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      assertNotNull(trackLink_JsonUtil0);
      
      TrackLink trackLink0 = trackLink_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(trackLink0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getId());
      
      Boolean boolean1 = track2.getIsExplicit();
      assertNotSame(track2, track0);
      assertNotSame(track2, track1);
      assertNull(boolean1);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track2.getName());
      assertNull(track2.getType());
      assertNull(track2.getIsPlayable());
      assertNull(track2.getTrackNumber());
      assertNull(track2.getIsExplicit());
      assertNull(track2.getPreviewUrl());
      assertNull(track2.getHref());
      assertNull(track2.getId());
      assertNull(track2.getDiscNumber());
      assertNull(track2.getUri());
      assertNull(track2.getDurationMs());
      assertNull(track2.getPopularity());
      assertFalse(track2.equals((Object)track0));
      assertFalse(track2.equals((Object)track1));
      
      Track.Builder track_Builder10 = track_Builder2.setLinkedFrom(trackLink0);
      assertSame(track_Builder0, track_Builder5);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder7);
      assertSame(track_Builder0, track_Builder10);
      assertSame(track_Builder0, track_Builder8);
      assertSame(track_Builder0, track_Builder9);
      assertSame(track_Builder0, track_Builder4);
      assertSame(track_Builder0, track_Builder6);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder8);
      assertSame(track_Builder1, track_Builder4);
      assertSame(track_Builder1, track_Builder6);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder5);
      assertSame(track_Builder1, track_Builder9);
      assertSame(track_Builder1, track_Builder7);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder10);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder10, track_Builder2);
      assertSame(track_Builder10, track_Builder7);
      assertSame(track_Builder10, track_Builder6);
      assertSame(track_Builder10, track_Builder4);
      assertSame(track_Builder10, track_Builder5);
      assertSame(track_Builder10, track_Builder8);
      assertSame(track_Builder10, track_Builder9);
      assertSame(track_Builder10, track_Builder1);
      assertSame(track_Builder10, track_Builder0);
      assertSame(track_Builder10, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder2, track_Builder5);
      assertSame(track_Builder2, track_Builder10);
      assertSame(track_Builder2, track_Builder9);
      assertSame(track_Builder2, track_Builder7);
      assertSame(track_Builder2, track_Builder6);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder4);
      assertSame(track_Builder2, track_Builder8);
      assertNotNull(track_Builder10);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(trackLink0.getUri());
      assertNull(trackLink0.getHref());
      assertNull(trackLink0.getType());
      assertNull(trackLink0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getId());
      assertNull(track0.getDurationMs());
      
      Integer integer0 = track0.getPopularity();
      assertNull(integer0);
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonArray());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getHref());
      assertNull(track0.getType());
      assertNull(track0.getName());
      assertNull(track0.getUri());
      assertNull(track0.getPopularity());
      assertNull(track0.getId());
      assertNull(track0.getDurationMs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      assertNotNull(track_JsonUtil0);
      
      JsonObject jsonObject0 = new JsonObject();
      assertNotNull(jsonObject0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      assertNotNull(track0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      
      Track.Builder track_Builder0 = track0.builder();
      assertNotNull(track_Builder0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      
      Track.Builder track_Builder1 = track_Builder0.setExternalUrls((ExternalUrl) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder1, track_Builder0);
      assertNotNull(track_Builder1);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      
      Track.Builder track_Builder2 = track_Builder1.setTrackNumber((Integer) null);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertNotNull(track_Builder2);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      
      Track.Builder track_Builder3 = track_Builder2.setPreviewUrl("artists");
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertNotNull(track_Builder3);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      
      Track track1 = track_Builder3.build();
      assertNotSame(track0, track1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertNotSame(track1, track0);
      assertNotNull(track1);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getId());
      assertNull(track1.getPopularity());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertNull(track1.getType());
      assertNull(track1.getName());
      assertEquals("artists", track1.getPreviewUrl());
      assertNull(track1.getHref());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getIsExplicit());
      assertFalse(track1.equals((Object)track0));
      
      String string0 = track1.getHref();
      assertNotSame(track0, track1);
      assertSame(track_Builder0, track_Builder3);
      assertSame(track_Builder0, track_Builder1);
      assertSame(track_Builder0, track_Builder2);
      assertSame(track_Builder1, track_Builder0);
      assertSame(track_Builder1, track_Builder2);
      assertSame(track_Builder1, track_Builder3);
      assertSame(track_Builder2, track_Builder3);
      assertSame(track_Builder2, track_Builder0);
      assertSame(track_Builder2, track_Builder1);
      assertSame(track_Builder3, track_Builder0);
      assertSame(track_Builder3, track_Builder1);
      assertSame(track_Builder3, track_Builder2);
      assertNotSame(track1, track0);
      assertNull(string0);
      assertTrue(jsonObject0.isJsonObject());
      assertFalse(jsonObject0.isJsonNull());
      assertFalse(jsonObject0.isJsonArray());
      assertFalse(jsonObject0.isJsonPrimitive());
      assertNull(track0.getIsExplicit());
      assertNull(track0.getUri());
      assertNull(track0.getName());
      assertNull(track0.getHref());
      assertNull(track0.getPreviewUrl());
      assertNull(track0.getIsPlayable());
      assertNull(track0.getTrackNumber());
      assertNull(track0.getType());
      assertNull(track0.getId());
      assertNull(track0.getDiscNumber());
      assertNull(track0.getPopularity());
      assertNull(track0.getDurationMs());
      assertNull(track1.getIsPlayable());
      assertNull(track1.getDiscNumber());
      assertNull(track1.getId());
      assertNull(track1.getPopularity());
      assertNull(track1.getDurationMs());
      assertNull(track1.getUri());
      assertNull(track1.getType());
      assertNull(track1.getName());
      assertEquals("artists", track1.getPreviewUrl());
      assertNull(track1.getHref());
      assertNull(track1.getTrackNumber());
      assertNull(track1.getIsExplicit());
      assertFalse(track0.equals((Object)track1));
      assertFalse(track1.equals((Object)track0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      track0.getDiscNumber();
      Track.Builder track_Builder0 = track0.builder();
      Track.Builder track_Builder1 = track_Builder0.setAvailableMarkets((CountryCode[]) null);
      assertSame(track_Builder1, track_Builder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      Track.Builder track_Builder1 = track_Builder0.setType(modelObjectType0);
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject1);
      track0.getExternalIds();
      Track.Builder track_Builder2 = track_Builder1.setExternalIds((ExternalId) null);
      assertSame(track_Builder2, track_Builder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      Track.Builder track_Builder0 = track0.builder();
      track0.getIsPlayable();
      track0.getExternalIds();
      Track.Builder track_Builder1 = track_Builder0.setExternalIds((ExternalId) null);
      assertSame(track_Builder0, track_Builder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = new Integer((-2536));
      Track.Builder track_Builder1 = track_Builder0.setDiscNumber(integer0);
      track_Builder1.setPreviewUrl("com.wrapper.spotify.model_objects.specification.Track$JsonUtil");
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      track0.getExternalUrls();
      Track.Builder track_Builder2 = track_Builder1.setExternalUrls((ExternalUrl) null);
      ModelObjectType modelObjectType0 = ModelObjectType.PLAYLIST;
      Track.Builder track_Builder3 = track_Builder2.setType(modelObjectType0);
      Track.Builder track_Builder4 = track_Builder3.setUri("");
      Track.Builder track_Builder5 = track_Builder4.setRestrictions((Restrictions) null);
      Track track1 = track_JsonUtil0.createModelObject(jsonObject0);
      track1.getAlbum();
      track_Builder5.setAlbum((AlbumSimplified) null);
      track0.getDurationMs();
      Track.Builder track_Builder6 = track_Builder3.setPreviewUrl("VR9");
      assertSame(track_Builder6, track_Builder4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.getInteger("!:7Jim", (-1155));
      track_Builder0.setDiscNumber(integer0);
      Track.Builder track_Builder1 = track_Builder0.setUri("@]VA$.g~>Zf*j9`I");
      Track track0 = track_Builder1.build();
      track0.getUri();
      track0.getAvailableMarkets();
      Boolean boolean0 = track0.getIsExplicit();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Track track0 = track_Builder0.build();
      Integer integer0 = new Integer(3075);
      track_Builder0.setTrackNumber(integer0);
      track0.builder();
      Integer integer1 = track0.getDiscNumber();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      trackLink_JsonUtil0.createModelObject(jsonObject0);
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = new Integer((-406));
      Track.Builder track_Builder1 = track_Builder0.setDiscNumber(integer0);
      assertSame(track_Builder0, track_Builder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      TrackLink trackLink0 = trackLink_JsonUtil0.createModelObject(jsonObject0);
      trackLink0.getExternalUrls();
      Track.Builder track_Builder1 = track_Builder0.setExternalUrls((ExternalUrl) null);
      Track.Builder track_Builder2 = track_Builder1.setId("artists");
      Track track0 = track_Builder2.build();
      Track.Builder track_Builder3 = track0.builder();
      Boolean boolean0 = Boolean.TRUE;
      Track.Builder track_Builder4 = track_Builder3.setIsPlayable(boolean0);
      assertNotSame(track_Builder4, track_Builder2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Track.Builder track_Builder1 = track_Builder0.setUri("1%_");
      Track track0 = track_Builder1.build();
      Track.Builder track_Builder2 = track0.builder();
      Track.Builder track_Builder3 = track_Builder2.setId("name");
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track1 = track_JsonUtil0.createModelObject(jsonObject0);
      track1.getAlbum();
      track_Builder1.setUri("pMJ*?");
      Track.Builder track_Builder4 = track_Builder3.setAlbum((AlbumSimplified) null);
      Track track2 = track_Builder4.build();
      track2.getType();
      track_Builder0.setUri((String) null);
      track_Builder0.setAlbum((AlbumSimplified) null);
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      TrackLink trackLink0 = trackLink_Builder0.build();
      trackLink0.builder();
      TrackLink.Builder trackLink_Builder1 = trackLink0.builder();
      TrackLink.Builder trackLink_Builder2 = trackLink_Builder1.setHref("1%_");
      TrackLink.Builder trackLink_Builder3 = trackLink_Builder2.setType((ModelObjectType) null);
      TrackLink.Builder trackLink_Builder4 = trackLink_Builder3.setId("name");
      trackLink_Builder4.setId("");
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.ZM;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder5 = track_Builder2.setAvailableMarkets(countryCodeArray0);
      assertNotSame(track_Builder5, track_Builder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      Track.Builder track_Builder0 = track0.builder();
      Track.Builder track_Builder1 = track_Builder0.setPreviewUrl((String) null);
      Track track1 = track_Builder1.build();
      CountryCode[] countryCodeArray0 = track1.getAvailableMarkets();
      assertNull(countryCodeArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      Track.Builder track_Builder1 = track_Builder0.setType(modelObjectType0);
      Track track0 = track_Builder1.build();
      track0.getIsPlayable();
      track_Builder0.setExplicit((Boolean) null);
      Integer integer0 = track0.getTrackNumber();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      track_Builder0.setName("yEDI6'=u=LcZqc]Sx");
      Integer integer0 = new Integer(476);
      Integer.compareUnsigned(476, 1);
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      assertSame(track_Builder0, track_Builder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      Track.Builder track_Builder0 = track0.builder();
      track0.getLinkedFrom();
      Track.Builder track_Builder1 = track_Builder0.setLinkedFrom((TrackLink) null);
      Track track1 = track_Builder1.build();
      track1.getAlbum();
      Track.Builder track_Builder2 = track_Builder0.setAlbum((AlbumSimplified) null);
      assertSame(track_Builder2, track_Builder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Track.Builder track_Builder1 = track_Builder0.setUri("");
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      Track.Builder track_Builder2 = track_Builder1.setType(modelObjectType0);
      Track.Builder track_Builder3 = track_Builder2.setArtists((ArtistSimplified[]) null);
      Track.Builder track_Builder4 = track_Builder3.setId("");
      Track track0 = track_Builder4.build();
      Integer integer0 = track0.getDiscNumber();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      track0.getRestrictions();
      Track.Builder track_Builder1 = track_Builder0.setRestrictions((Restrictions) null);
      Track.Builder track_Builder2 = track_Builder1.setDurationMs((Integer) null);
      assertSame(track_Builder1, track_Builder2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Track.Builder track_Builder1 = track_Builder0.setPreviewUrl("");
      Track.Builder track_Builder2 = track_Builder1.setHref("is_playable");
      track_Builder2.setUri("<JW");
      Track track0 = track_Builder0.build();
      track0.getDiscNumber();
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      JsonObject jsonObject2 = jsonObject1.getAsJsonObject();
      jsonObject2.getAsJsonObject("is_playable");
      Track track1 = track_JsonUtil0.createModelObject((JsonObject) null);
      assertNull(track1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = new Integer(10);
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      track0.getExternalIds();
      Track.Builder track_Builder2 = track_Builder1.setExternalIds((ExternalId) null);
      Track.Builder track_Builder3 = track_Builder2.setPreviewUrl("");
      track0.getExternalUrls();
      Track.Builder track_Builder4 = track_Builder3.setExternalUrls((ExternalUrl) null);
      Track track1 = track_Builder4.build();
      ExternalUrl externalUrl0 = track1.getExternalUrls();
      assertNull(externalUrl0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Boolean boolean0 = new Boolean("^dHx[3C[Xh1oe6 %OIl");
      Track.Builder track_Builder1 = track_Builder0.setIsPlayable(boolean0);
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      JsonObject jsonObject2 = jsonObject1.getAsJsonObject();
      trackLink_JsonUtil0.createModelObject(jsonObject2);
      Track track0 = track_Builder0.build();
      track0.getIsPlayable();
      JsonObject jsonObject3 = new JsonObject();
      trackLink_JsonUtil0.createModelObject(jsonObject3);
      track_Builder1.setId("^dHx[3C[Xh1oe6 %OIl");
      // Undeclared exception!
      try { 
        jsonObject3.getAsFloat();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Integer integer0 = Integer.valueOf((-719));
      Track.Builder track_Builder1 = track_Builder0.setPopularity(integer0);
      CountryCode[] countryCodeArray0 = new CountryCode[1];
      CountryCode countryCode0 = CountryCode.MX;
      countryCodeArray0[0] = countryCode0;
      Track.Builder track_Builder2 = track_Builder1.setAvailableMarkets(countryCodeArray0);
      Track track0 = track_Builder1.build();
      track0.getLinkedFrom();
      track_Builder0.setLinkedFrom((TrackLink) null);
      Boolean boolean0 = new Boolean(true);
      Track.Builder track_Builder3 = track_Builder2.setExplicit(boolean0);
      Boolean boolean1 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      track_Builder3.setType(modelObjectType0);
      track_Builder2.setIsPlayable(boolean1);
      Track.Builder track_Builder4 = track_Builder3.setName("qm ");
      Track.Builder track_Builder5 = track_Builder4.setTrackNumber(integer0);
      Track track1 = track_Builder2.build();
      track1.getAlbum();
      Track.Builder track_Builder6 = track_Builder5.setAlbum((AlbumSimplified) null);
      track1.getHref();
      track1.builder();
      track1.getDurationMs();
      track_Builder6.setLinkedFrom((TrackLink) null);
      Track track2 = track_Builder6.build();
      Track track3 = track_Builder0.build();
      Boolean boolean2 = track2.getIsExplicit();
      Boolean.logicalAnd(true, true);
      track_Builder3.setIsPlayable(boolean2);
      track2.getAlbum();
      track0.getTrackNumber();
      String string0 = track3.getPreviewUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      TrackLink trackLink0 = trackLink_JsonUtil0.createModelObject(jsonObject0);
      TrackLink.Builder trackLink_Builder0 = trackLink0.builder();
      TrackLink.Builder trackLink_Builder1 = trackLink_Builder0.setUri("]G{N>\"(F(dRR}H");
      trackLink_Builder1.setHref("cJ'k[%]");
      trackLink_Builder0.setHref("2l=;mrr>H");
      Track track0 = track_Builder0.build();
      track0.getId();
      ArtistSimplified[] artistSimplifiedArray0 = track0.getArtists();
      assertNull(artistSimplifiedArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TrackLink.Builder trackLink_Builder0 = new TrackLink.Builder();
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      track0.getExternalUrls();
      track_JsonUtil0.createModelObject((JsonObject) null);
      String string0 = track0.getUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TrackLink.JsonUtil trackLink_JsonUtil0 = new TrackLink.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      trackLink_JsonUtil0.createModelObjectPagingCursorbased(jsonObject0);
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      jsonObject1.getAsJsonObject();
      JsonObject jsonObject2 = jsonObject0.deepCopy();
      trackLink_JsonUtil0.createModelObject(jsonObject2);
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject3 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject3);
      track0.getAvailableMarkets();
      track0.getAvailableMarkets();
      track0.getPopularity();
      String string0 = track0.getPreviewUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Track.Builder track_Builder0 = new Track.Builder();
      Boolean boolean0 = new Boolean("DPC");
      Track.JsonUtil track_JsonUtil0 = new Track.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      Track track0 = track_JsonUtil0.createModelObject(jsonObject0);
      track0.getDiscNumber();
      track0.getExternalIds();
      track0.getName();
      track0.getDiscNumber();
      track0.getRestrictions();
      ExternalUrl externalUrl0 = track0.getExternalUrls();
      assertNull(externalUrl0);
  }
}
