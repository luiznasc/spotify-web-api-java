/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 21:31:13 GMT 2019
 */

package com.wrapper.spotify.model_objects.specification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonObject;
import com.neovisionaries.i18n.CountryCode;
import com.wrapper.spotify.enums.ModelObjectType;
import com.wrapper.spotify.enums.ProductType;
import com.wrapper.spotify.model_objects.specification.ExternalUrl;
import com.wrapper.spotify.model_objects.specification.Followers;
import com.wrapper.spotify.model_objects.specification.Image;
import com.wrapper.spotify.model_objects.specification.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      user_JsonUtil0.createModelObjectPaging(jsonObject0);
      JsonObject jsonObject2 = jsonObject0.getAsJsonObject();
      jsonObject1.add("type", jsonObject2);
      jsonObject0.remove("com.wrapper.spotify.model_objects.specification.User");
      user_JsonUtil0.createModelObjectPagingCursorbased(jsonObject0);
      JsonObject jsonObject3 = jsonObject0.getAsJsonObject();
      Boolean boolean0 = new Boolean(true);
      jsonObject3.addProperty("type", boolean0);
      User user0 = user_JsonUtil0.createModelObject(jsonObject3);
      User.Builder user_Builder0 = user0.builder();
      assertNotNull(user_Builder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      Image[] imageArray0 = new Image[0];
      User.Builder user_Builder1 = user_Builder0.setImages(imageArray0);
      User user0 = user_Builder1.build();
      user0.builder();
      user0.builder();
      User user1 = user_Builder1.build();
      user1.builder();
      user1.builder();
      user0.builder();
      user1.builder();
      user1.builder();
      user0.builder();
      user1.builder();
      user0.getImages();
      ProductType productType0 = ProductType.BASIC_DESKTOP;
      user_Builder1.setProduct(productType0);
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      user_Builder0.setType(modelObjectType0);
      user1.builder();
      user1.builder();
      user0.builder();
      user0.getCountry();
      user_Builder0.setBirthdate("Nepal");
      user1.getExternalUrls();
      user0.builder();
      user1.builder();
      user0.getCountry();
      user1.getExternalUrls();
      user1.getEmail();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      user_JsonUtil0.createModelObjectPaging(jsonObject0);
      String string0 = "type";
      JsonObject jsonObject2 = jsonObject0.getAsJsonObject();
      jsonObject1.add("type", jsonObject2);
      // Undeclared exception!
      try { 
        user_JsonUtil0.createModelObject(jsonObject1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      User.Builder user_Builder1 = user_Builder0.setHref("followers");
      jsonObject0.get("followers");
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      user_Builder1.setType(modelObjectType0);
      user0.builder();
      ModelObjectType modelObjectType1 = ModelObjectType.TRACK;
      User.Builder user_Builder2 = user_Builder1.setType(modelObjectType1);
      user_Builder2.setDisplayName("");
      User.Builder user_Builder3 = user_Builder2.setUri("followers");
      user_Builder3.setBirthdate("followers");
      user0.builder();
      User user1 = user_Builder3.build();
      user_Builder2.setEmail("followers");
      user1.builder();
      user1.getImages();
      user1.getDisplayName();
      user1.builder();
      user_Builder1.setExternalUrls((ExternalUrl) null);
      user0.builder();
      user0.getEmail();
      user0.getImages();
      user1.getId();
      user0.getUri();
      user1.getBirthdate();
      user0.builder();
      user1.getDisplayName();
      user0.getType();
      user0.getHref();
      user1.getExternalUrls();
      user0.getEmail();
      user1.getHref();
      user1.getCountry();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      CountryCode countryCode0 = CountryCode.PS;
      User.Builder user_Builder1 = user_Builder0.setCountry(countryCode0);
      Image[] imageArray0 = new Image[5];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      User.Builder user_Builder2 = user_Builder1.setImages(imageArray0);
      User.Builder user_Builder3 = user_Builder2.setHref("com.wrapper.spotify.model_objects.specification.ExternalUrl$JsonUtil");
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      user_Builder3.setId("{Qj6D(wXGN0");
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      user0.getFollowers();
      User.Builder user_Builder4 = user_Builder3.setFollowers((Followers) null);
      user_Builder0.setFollowers((Followers) null);
      User user1 = user_Builder4.build();
      user_Builder3.setDisplayName(";DKi'0R*3x7p7|[h%");
      user1.builder();
      user1.getFollowers();
      user_Builder3.setBirthdate("^}[fD=");
      user1.getImages();
      user1.getCountry();
      user_Builder4.setFollowers((Followers) null);
      user1.getId();
      user1.getCountry();
      user1.getId();
      user1.getEmail();
      ExternalUrl externalUrl0 = user0.getExternalUrls();
      assertNull(externalUrl0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      Image[] imageArray0 = new Image[7];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      user_Builder0.setImages(imageArray0);
      User user0 = user_Builder0.build();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.getEmail();
      User user1 = user_Builder0.build();
      user1.builder();
      user1.builder();
      User user2 = user_Builder0.build();
      user2.builder();
      user1.getHref();
      user1.getFollowers();
      user0.getDisplayName();
      Image[] imageArray1 = user0.getImages();
      assertSame(imageArray1, imageArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      User.Builder user_Builder1 = user_Builder0.setHref("");
      jsonObject0.get("");
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      user_Builder1.setType(modelObjectType0);
      ModelObjectType modelObjectType1 = ModelObjectType.TRACK;
      User.Builder user_Builder2 = user_Builder1.setType(modelObjectType1);
      user_Builder2.setDisplayName("");
      User.Builder user_Builder3 = user_Builder2.setUri("");
      user_Builder3.setBirthdate("");
      user0.builder();
      User user1 = user_Builder3.build();
      user_Builder2.setEmail("");
      user1.builder();
      user1.getImages();
      user1.getDisplayName();
      user1.builder();
      user_Builder1.setExternalUrls((ExternalUrl) null);
      user0.builder();
      user0.getEmail();
      user0.getImages();
      user1.getId();
      user0.getUri();
      user1.getBirthdate();
      user0.builder();
      user1.getDisplayName();
      user0.getType();
      user0.getHref();
      user1.getExternalUrls();
      user0.getEmail();
      String string0 = user1.getHref();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.FREE;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      CountryCode countryCode0 = CountryCode.CG;
      User.Builder user_Builder2 = user_Builder1.setCountry(countryCode0);
      User.Builder user_Builder3 = user_Builder2.setUri("@Uncw+DA0P/D^");
      Image[] imageArray0 = new Image[7];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      User.Builder user_Builder4 = user_Builder3.setImages(imageArray0);
      User user0 = user_Builder2.build();
      User user1 = user_Builder4.build();
      user1.getExternalUrls();
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      user_Builder1.setCountry(countryCode0);
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      jsonObject1.getAsJsonObject("@Uncw+DA0P/D^");
      user_JsonUtil0.createModelObject((JsonObject) null);
      User user2 = user_Builder3.build();
      user2.getEmail();
      user_Builder4.setEmail((String) null);
      String string0 = user0.getUri();
      assertEquals("@Uncw+DA0P/D^", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.PREMIUM;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      user_Builder1.setId("");
      user_Builder0.setUri("");
      User.Builder user_Builder2 = user_Builder1.setEmail("-4XF_uU7Z}.po=");
      user_Builder2.setBirthdate("");
      User.Builder user_Builder3 = user_Builder2.setHref("-4XF_uU7Z}.po=");
      User user0 = user_Builder3.build();
      user0.builder();
      user0.getFollowers();
      user_Builder3.setBirthdate("uri");
      user_Builder3.setFollowers((Followers) null);
      user0.getUri();
      user0.builder();
      String string0 = user0.getDisplayName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.FREE;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      ModelObjectType modelObjectType0 = ModelObjectType.USER;
      User.Builder user_Builder2 = user_Builder0.setId(">I(zmA|7u kx6");
      user_Builder1.setType(modelObjectType0);
      user_Builder0.setEmail("");
      User user0 = user_Builder0.build();
      user_Builder1.setEmail("{1wr%mlKW<%) ");
      User.Builder user_Builder3 = user_Builder1.setEmail("_'");
      User user1 = user_Builder3.build();
      user0.getType();
      user_Builder1.build();
      User.Builder user_Builder4 = user_Builder0.setEmail("SY");
      user1.getProduct();
      Image[] imageArray0 = new Image[1];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      User.Builder user_Builder5 = user_Builder2.setImages(imageArray0);
      assertSame(user_Builder5, user_Builder4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      User.Builder user_Builder1 = user_Builder0.setHref("");
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      user_Builder1.setType(modelObjectType0);
      ModelObjectType modelObjectType1 = ModelObjectType.TRACK;
      User.Builder user_Builder2 = user_Builder1.setType(modelObjectType1);
      user_Builder2.setDisplayName("com.wrapper.spotify.model_objects.specification.Paging");
      User.Builder user_Builder3 = user_Builder2.setUri("");
      user_Builder3.setBirthdate("");
      user0.builder();
      User user1 = user_Builder3.build();
      user_Builder2.setEmail("");
      user1.builder();
      user1.getImages();
      user1.getDisplayName();
      user1.builder();
      user_Builder1.setExternalUrls((ExternalUrl) null);
      user0.builder();
      user0.getEmail();
      user0.getImages();
      user1.getBirthdate();
      user0.getUri();
      user0.getUri();
      user0.builder();
      user1.getDisplayName();
      user0.getType();
      user0.getHref();
      user1.getExternalUrls();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setDisplayName("^Ru^{:oF");
      CountryCode countryCode0 = CountryCode.FJ;
      user_Builder1.setCountry(countryCode0);
      User user0 = user_Builder1.build();
      user0.getFollowers();
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      user0.builder();
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.getAsJsonObject("Hong Kong");
      user_JsonUtil0.createModelObject((JsonObject) null);
      String string0 = user0.getDisplayName();
      assertEquals("^Ru^{:oF", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      CountryCode countryCode0 = CountryCode.TT;
      User.Builder user_Builder1 = user_Builder0.setCountry(countryCode0);
      User.Builder user_Builder2 = user_Builder1.setDisplayName("");
      Image[] imageArray0 = new Image[4];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      user_Builder0.setHref("");
      user_Builder2.setDisplayName("");
      imageArray0[1] = imageArray0[0];
      ModelObjectType modelObjectType0 = ModelObjectType.AUDIO_FEATURES;
      user_Builder2.setType(modelObjectType0);
      imageArray0[2] = imageArray0[1];
      imageArray0[3] = imageArray0[2];
      user_Builder2.setImages(imageArray0);
      User.Builder user_Builder3 = user_Builder2.setImages(imageArray0);
      ProductType productType0 = ProductType.PREMIUM;
      User.Builder user_Builder4 = user_Builder2.setProduct(productType0);
      user_Builder4.setEmail("");
      User.Builder user_Builder5 = user_Builder4.setBirthdate("");
      User.Builder user_Builder6 = user_Builder5.setUri("href");
      user_Builder6.setEmail("l!Ng#Z5dYf>%'Ii+0y4");
      user_Builder3.setEmail("");
      user_Builder6.setBirthdate("l!Ng#Z5dYf>%'Ii+0y4");
      User user0 = user_Builder1.build();
      user0.getBirthdate();
      user_Builder4.setProduct(productType0);
      user0.getFollowers();
      CountryCode countryCode1 = user0.getCountry();
      assertSame(countryCode1, countryCode0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.PREMIUM;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      user_Builder1.setId("");
      user_Builder1.setProduct(productType0);
      User.Builder user_Builder2 = user_Builder1.setEmail("-4XF_uU7Z}.po=");
      user_Builder2.setBirthdate("");
      User.Builder user_Builder3 = user_Builder2.setHref("-4XF_uU7Z}.po=");
      User user0 = user_Builder3.build();
      user0.builder();
      user0.getFollowers();
      user_Builder3.setBirthdate("uri");
      user_Builder3.setFollowers((Followers) null);
      user0.getUri();
      user0.builder();
      String string0 = user0.getDisplayName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject1);
      user0.builder();
      user0.getBirthdate();
      user0.getType();
      user0.getType();
      user0.getType();
      Image[] imageArray0 = user0.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.PREMIUM;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      User.Builder user_Builder2 = user_Builder1.setEmail(",Y\"7UEB9F:4I[9k-N3");
      User.Builder user_Builder3 = user_Builder2.setImages((Image[]) null);
      user_Builder1.setEmail(",Y\"7UEB9F:4I[9k-N3");
      ProductType productType1 = ProductType.PREMIUM;
      user_Builder3.setProduct(productType1);
      User.Builder user_Builder4 = user_Builder3.setImages((Image[]) null);
      user_Builder1.setProduct(productType0);
      CountryCode countryCode0 = CountryCode.CP;
      user_Builder3.setCountry(countryCode0);
      User.Builder user_Builder5 = user_Builder3.setBirthdate("6pQ#Y");
      User user0 = user_Builder5.build();
      user0.getFollowers();
      user_Builder2.setEmail("");
      User.Builder user_Builder6 = user_Builder2.setProduct(productType0);
      user0.getCountry();
      user0.getBirthdate();
      user_Builder3.build();
      user_Builder6.setImages((Image[]) null);
      user0.getEmail();
      user_Builder6.setEmail(",Y\"7UEB9F:4I[9k-N3");
      user_Builder0.setProduct(productType0);
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      user_JsonUtil0.createModelObject((JsonObject) null);
      User.Builder user_Builder7 = user_Builder0.setUri("");
      assertSame(user_Builder7, user_Builder4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      user_JsonUtil0.createModelObjectPagingCursorbased(jsonObject0);
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      JsonObject jsonObject2 = jsonObject1.deepCopy();
      jsonObject2.getAsJsonObject("");
      user_JsonUtil0.createModelObject((JsonObject) null);
      User.Builder user_Builder0 = new User.Builder();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.OPEN;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      User.Builder user_Builder2 = user_Builder1.setEmail("Alr3h!RG2~a!Q,x|ODK");
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject1);
      user0.getExternalUrls();
      user_Builder2.setExternalUrls((ExternalUrl) null);
      user_Builder1.setProduct(productType0);
      User user1 = user_Builder2.build();
      user1.getType();
      CountryCode countryCode0 = CountryCode.ZW;
      user_Builder2.setCountry(countryCode0);
      user1.getType();
      user1.getProduct();
      ExternalUrl externalUrl0 = user1.getExternalUrls();
      assertNull(externalUrl0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      User.Builder user_Builder1 = user_Builder0.setUri("");
      User.Builder user_Builder2 = user_Builder1.setHref("uri");
      CountryCode countryCode0 = CountryCode.RO;
      User.Builder user_Builder3 = user_Builder1.setCountry(countryCode0);
      User.Builder user_Builder4 = user_Builder3.setId("");
      User user1 = user_Builder4.build();
      User.Builder user_Builder5 = user_Builder4.setUri("D>Us\"e,V*M8{E");
      user1.getDisplayName();
      user1.getId();
      user1.getDisplayName();
      User user2 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder6 = user_Builder2.setEmail("");
      user2.builder();
      Image[] imageArray0 = new Image[0];
      user_Builder6.setImages(imageArray0);
      user_Builder6.setHref(" Xb=eTS)wu");
      user2.builder();
      user2.builder();
      user_Builder6.setId("KWT");
      user0.getExternalUrls();
      user1.getProduct();
      Character character0 = Character.valueOf('8');
      jsonObject0.addProperty("uri", character0);
      user0.builder();
      user2.getId();
      user_Builder6.setEmail("");
      User.Builder user_Builder7 = user_Builder5.setProduct((ProductType) null);
      User.Builder user_Builder8 = user0.builder();
      assertFalse(user_Builder8.equals((Object)user_Builder7));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setDisplayName("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      CountryCode countryCode0 = CountryCode.BL;
      User.Builder user_Builder2 = user_Builder1.setCountry(countryCode0);
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      User.Builder user_Builder3 = user_Builder2.setType(modelObjectType0);
      User.Builder user_Builder4 = user_Builder3.setHref("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      User.Builder user_Builder5 = user_Builder3.setUri("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      User user0 = user_Builder5.build();
      user0.builder();
      user0.getFollowers();
      User.Builder user_Builder6 = user_Builder0.setFollowers((Followers) null);
      User user1 = user_Builder5.build();
      user1.builder();
      user1.builder();
      user1.builder();
      user_Builder5.setEmail("itw/vemNed");
      user_Builder2.setCountry(countryCode0);
      user_Builder4.setType(modelObjectType0);
      user_Builder6.setBirthdate("itw/vemNed");
      user_Builder5.setEmail("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      user0.getExternalUrls();
      CountryCode countryCode1 = CountryCode.KY;
      user_Builder1.setCountry(countryCode1);
      user1.getProduct();
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user2 = user_JsonUtil0.createModelObject(jsonObject0);
      assertNull(user2.getEmail());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      CountryCode countryCode0 = CountryCode.SD;
      User.Builder user_Builder1 = user_Builder0.setCountry(countryCode0);
      ModelObjectType modelObjectType0 = ModelObjectType.GENRE;
      User.Builder user_Builder2 = user_Builder1.setType(modelObjectType0);
      User user0 = user_Builder2.build();
      user_Builder2.setId("");
      User.Builder user_Builder3 = user0.builder();
      user0.builder();
      user0.getBirthdate();
      user_Builder2.setId((String) null);
      user_Builder3.setId("");
      user0.getId();
      user0.getHref();
      String string0 = user0.getHref();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User user0 = user_Builder0.build();
      User.Builder user_Builder1 = user0.builder();
      User.Builder user_Builder2 = user_Builder1.setBirthdate("f3M1(<a5+o");
      CountryCode countryCode0 = CountryCode.ET;
      User.Builder user_Builder3 = user_Builder2.setCountry(countryCode0);
      User.Builder user_Builder4 = user_Builder2.setHref("id");
      User.Builder user_Builder5 = user_Builder4.setUri("f3M1(<a5+o");
      User.Builder user_Builder6 = user_Builder5.setEmail("f3M1(<a5+o");
      user0.getHref();
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      user0.getFollowers();
      user_Builder5.setFollowers((Followers) null);
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      JsonObject jsonObject2 = jsonObject1.getAsJsonObject();
      user_JsonUtil0.createModelObject(jsonObject2);
      user_Builder5.setId("id");
      user_Builder6.setDisplayName((String) null);
      User.Builder user_Builder7 = user_Builder3.setCountry(countryCode0);
      assertNotSame(user_Builder0, user_Builder7);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      CountryCode countryCode0 = CountryCode.ML;
      User.Builder user_Builder1 = user_Builder0.setCountry(countryCode0);
      User user1 = user_Builder1.build();
      user1.getType();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setEmail("");
      User.Builder user_Builder2 = user_Builder1.setDisplayName("tlP+*>Vd!u5");
      User.Builder user_Builder3 = user_Builder2.setUri("tlP+*>Vd!u5");
      User.Builder user_Builder4 = user_Builder3.setBirthdate("tlP+*>Vd!u5");
      User user0 = user_Builder4.build();
      user0.getProduct();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      ProductType productType0 = ProductType.FREE;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      User.Builder user_Builder2 = user_Builder1.setId("");
      User.Builder user_Builder3 = user_Builder2.setUri("");
      User user1 = user_Builder3.build();
      String string0 = user1.getDisplayName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      CountryCode countryCode0 = CountryCode.PL;
      User.Builder user_Builder1 = user_Builder0.setCountry(countryCode0);
      User.Builder user_Builder2 = user_Builder1.setCountry(countryCode0);
      assertSame(user_Builder2, user_Builder1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setDisplayName("");
      User.Builder user_Builder2 = user_Builder1.setImages((Image[]) null);
      User.Builder user_Builder3 = user_Builder2.setHref("");
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      user0.getExternalUrls();
      User.Builder user_Builder4 = user_Builder3.setExternalUrls((ExternalUrl) null);
      User user1 = user_Builder4.build();
      String string0 = user1.getUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setEmail((String) null);
      User.Builder user_Builder2 = user_Builder1.setDisplayName((String) null);
      User.Builder user_Builder3 = user_Builder2.setBirthdate("/A~#<LU:w,UX/%.v");
      User.Builder user_Builder4 = user_Builder3.setDisplayName("/A~#<LU:w,UX/%.v");
      assertSame(user_Builder2, user_Builder4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setBirthdate("");
      ModelObjectType modelObjectType0 = ModelObjectType.TRACK;
      User.Builder user_Builder2 = user_Builder1.setType(modelObjectType0);
      User user0 = user_Builder2.build();
      Followers followers0 = user0.getFollowers();
      assertNull(followers0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.OPEN;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      user_Builder1.setId("J7hv~$1w");
      user_Builder1.setEmail("m6$,xH][G[W`H<j'V");
      User user0 = user_Builder1.build();
      user0.getImages();
      user_Builder0.setEmail("m6$,xH][G[W`H<j'V");
      String string0 = user0.getId();
      assertEquals("J7hv~$1w", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      User.Builder user_Builder0 = user0.builder();
      User user1 = user_Builder0.build();
      user1.getHref();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      User user2 = user_JsonUtil0.createModelObject(jsonObject1);
      assertNull(user2.getId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      User user0 = user_JsonUtil0.createModelObject(jsonObject1);
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setUri("com.wrapper.spotify.model_objects.specification.User");
      User.Builder user_Builder2 = user_Builder1.setEmail("com.wrapper.spotify.model_objects.specification.User");
      Image[] imageArray0 = new Image[0];
      User.Builder user_Builder3 = user_Builder2.setImages(imageArray0);
      assertSame(user_Builder1, user_Builder3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.FREE;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      User.Builder user_Builder2 = user_Builder1.setBirthdate("");
      User user0 = user_Builder2.build();
      User.Builder user_Builder3 = user0.builder();
      User.Builder user_Builder4 = user_Builder3.setId((String) null);
      User.Builder user_Builder5 = user_Builder4.setEmail((String) null);
      assertNotSame(user_Builder2, user_Builder5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setEmail("SRB");
      User.Builder user_Builder2 = user_Builder1.setBirthdate("SRB");
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      user0.getFollowers();
      User.Builder user_Builder3 = user_Builder2.setFollowers((Followers) null);
      user0.getExternalUrls();
      User.Builder user_Builder4 = user_Builder3.setExternalUrls((ExternalUrl) null);
      User user1 = user_Builder4.build();
      user1.getCountry();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      Image[] imageArray0 = user0.getImages();
      assertNull(imageArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      User user0 = user_JsonUtil0.createModelObject(jsonObject0);
      user0.builder();
      user0.builder();
      user0.builder();
      user0.getHref();
      user0.getImages();
      user0.getUri();
      user0.getUri();
      user0.builder();
      user0.getType();
      user0.getId();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      ProductType productType0 = ProductType.DAYPASS;
      User.Builder user_Builder1 = user_Builder0.setProduct(productType0);
      User.Builder user_Builder2 = user_Builder1.setHref("^<JBJz;e");
      User.Builder user_Builder3 = user_Builder2.setExternalUrls((ExternalUrl) null);
      user_Builder2.setDisplayName("^<JBJz;e");
      CountryCode countryCode0 = CountryCode.GL;
      User.Builder user_Builder4 = user_Builder3.setCountry(countryCode0);
      Image[] imageArray0 = new Image[2];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      user_Builder4.setImages(imageArray0);
      User user0 = user_Builder4.build();
      user0.getBirthdate();
      user_Builder3.setExternalUrls((ExternalUrl) null);
      user_Builder4.setUri((String) null);
      Image[] imageArray1 = new Image[12];
      Image image1 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray1[0] = image1;
      imageArray1[1] = image1;
      imageArray1[2] = image1;
      imageArray1[3] = image1;
      imageArray1[4] = image1;
      imageArray1[5] = image1;
      imageArray1[6] = image1;
      user_Builder0.setImages(imageArray1);
      user0.getEmail();
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      jsonObject1.getAsJsonObject((String) null);
      user_JsonUtil0.createModelObject((JsonObject) null);
      User user1 = user_JsonUtil0.createModelObject(jsonObject1);
      assertNull(user1.getEmail());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      Image[] imageArray0 = new Image[7];
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      imageArray0[0] = image0;
      imageArray0[1] = image0;
      imageArray0[2] = image0;
      imageArray0[3] = image0;
      imageArray0[4] = image0;
      imageArray0[5] = image0;
      imageArray0[6] = image0;
      User.Builder user_Builder1 = user_Builder0.setImages(imageArray0);
      User user0 = user_Builder0.build();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.builder();
      user0.getEmail();
      User user1 = user_Builder0.build();
      user1.builder();
      user_Builder1.setEmail((String) null);
      User user2 = user_Builder0.build();
      user2.builder();
      user0.builder();
      user2.builder();
      user1.getHref();
      user0.getDisplayName();
      user0.getHref();
      user2.getCountry();
      String string0 = user1.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      User.Builder user_Builder1 = user_Builder0.setDisplayName("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      ModelObjectType modelObjectType0 = ModelObjectType.ALBUM;
      User.Builder user_Builder2 = user_Builder1.setHref("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      User.Builder user_Builder3 = user_Builder0.setUri("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      User user0 = user_Builder3.build();
      user0.builder();
      user0.builder();
      user_Builder3.setEmail("itw/vemNed");
      user_Builder2.setType(modelObjectType0);
      user_Builder3.setEmail("com.wrapper.spotify.model_objects.specification.User$JsonUtil");
      CountryCode countryCode0 = CountryCode.KY;
      user_Builder1.setCountry(countryCode0);
      user0.getProduct();
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      user0.getExternalUrls();
      Followers followers0 = user0.getFollowers();
      assertNull(followers0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      User.Builder user_Builder0 = new User.Builder();
      CountryCode countryCode0 = CountryCode.BL;
      user_Builder0.setCountry(countryCode0);
      CountryCode countryCode1 = CountryCode.KY;
      user_Builder0.setCountry(countryCode1);
      JsonObject jsonObject0 = new JsonObject();
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      User.JsonUtil user_JsonUtil0 = new User.JsonUtil();
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.getAsJsonObject();
      user_JsonUtil0.createModelObjectPaging(jsonObject0);
      JsonObject jsonObject2 = jsonObject0.getAsJsonObject();
      jsonObject1.add("type", jsonObject2);
      jsonObject0.remove("com.wrapper.spotify.model_objects.specification.User");
      user_JsonUtil0.createModelObjectPagingCursorbased(jsonObject0);
      JsonObject jsonObject3 = jsonObject0.getAsJsonObject();
      // Undeclared exception!
      try { 
        user_JsonUtil0.createModelObject(jsonObject3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonObject
         //
         verifyException("com.google.gson.JsonElement", e);
      }
  }
}
